{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RuleDataReFormat.js","views/viewhelper.js","../node_modules/reactstrap/es/Col.js","../node_modules/reactstrap/es/Card.js","views/tables/data-tables/basic/AdminComponent/DataTable.js","views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RealTimeCommisionRuleLogic.js"],"names":["RuleDataReFormat","userInput","flexibleData","cashbackFlexibleData","voucherFlexibleData","datapackFlexibleData","pointFlexibleData","commissionRuleName","reward_type","isFinBasedOffer","target","isQuota","isRxQuota","isCertainTimeline","isTime","commissionType","pointExpireDays","offer_type","offerCount","offerAmount","target_type","target_count","target_amount","quotaType","quotaCount","quotaAmount","rxQuotaType","rxQuotaCount","rxQuotaAmount","timelineType","isTimelineRange","staticTimeline","startTimeline","endTimeline","startHour","endHour","outsideHourCommissionId","returnCertainTimelineId","flexibleRules","isPercentage","snAmount","rxAmount","min","max","snreward_datapack_groupid","rxreward_datapack_groupid","snreward_voucherid","rxreward_voucherid","Error","err","e","response","status","toast","error","data","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","Success","success","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","size","order","offset","propTypes","tag","tagPropType","xs","sm","md","lg","xl","className","cssModule","object","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Col","props","Tag","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","i","columnProp","isObject","_classNames","colSizeInterfix","colClass","push","mapToCssModules","classNames","_colClass","length","classes","React","createElement","_extends","inverse","color","body","outline","innerRef","func","Card","ref","CommonDataTable","_ref","column","TableData","TableDataLoading","_jsx","Fragment","children","DataTable","noHeader","columns","sortIcon","ChevronDown","progressPending","progressComponent","Spinner","responsive","conditionTypes","value","label","rewardConditionTypes","cumulativeConditionTypes","weekDaysName","monthDays","Array","map","_","concat","RealTimeCommisionRuleLogic","setUserInput","tableData","setCashbackFlexibleData","setTableData","tableData1","setVoucherFlexibleData","setTableData1","tableData2","setDatapackFlexibleData","setTableData2","tableData3","setPointFlexibleData","setTableData3","onlyView","isFirstRender","useRef","rewardTypeRef","ref1","srRef","rrRef","recurringStartDateRef","recurringEndDateRef","recurringSpecificDateRef","commissionRuleList","setcommissionRuleList","useState","isCommissionRuleListLoading","setCommissionRuleListLoading","setError","voucherList","setVoucherList","isVoucherListLoading","setVoucherListLoading","datapackList","setDatapackList","isDatapackLoading","setDatapackLoading","campaignRewardType","setcampaignRewardType","campaignRewardTypeValueOption","setcampaignRewardTypeValueOption","quotaConditionTypes","setquotaConditionTypes","campaignQuotaValue","setcampaignQuotaValue","campaignReceiverQuotaValue","setcampaignReceiverQuotaValue","needRefresh","setneedRefresh","console","log","handleChange","name","handleChange1","index","handleChange2","handleChange3","handleChange4","getVoucherList","useJwt2","pmsVoucher","then","res","payload","voucherid","title","catch","getDatapack","datapackGroupList","id","group_title","resetQuotaSelectedValues","useEffect","rewardTypeid","current","item","rewardTypeObj","find","_ref2","rewardTypeFirstValue","_ref3","_ref4","commissionListDropdown","commission_id","commission_rule_name","useMemo","minWidth","cell","Row","_tableData$index","_tableData$index2","_tableData$index3","Select","ClassName","theme","selectThemeColors","maxMenuHeight","classNamePrefix","onChange","selected","isDisabled","options","_tableData$index4","_jsxs","InputGroup","Input","type","required","style","borderColor","placeholder","onWheel","blur","step","disabled","InputGroupAddon","addonType","InputGroupText","padding","fontSize","bottom","_tableData$index5","startRange","endRange","row","Plus","cursor","onClick","parseFloat","Minus","splice","column1","_tableData1$index2","width","_tableData1$index","menuPlacement","captureMenuScroll","closeMenuOnSelect","closeMenuOnScroll","hideSelectedOptions","defaultValue","_ref5","opacity","height","_tableData1$index4","_tableData1$index3","_ref6","_Fragment","column2","_tableData2$index","_ref7","_tableData2$index2","_ref8","column3","CardBody","FormGroup","Label","for","rows","maxLength","margin","Info","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","onFocus","select","focus","CardHeader","CustomInput","checked","_ref9","_ref10","BeatLoader","_ref11","isClearable","recurringTypeOnChange","check","inline","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","amount","_ref19","_ref20","_ref21","_ref22"],"mappings":"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","file":"static/js/53.77884373.chunk.js","sourcesContent":["\nexport const RuleDataReFormat = (userInput, flexibleData) => {\n\n    const {\n        cashbackFlexibleData,\n        voucherFlexibleData,\n        datapackFlexibleData,\n        pointFlexibleData\n    } = flexibleData\n\n    const {\n        commissionRuleName,\n        reward_type,\n\n        isFinBasedOffer,\n        target,\n        isQuota,\n        isRxQuota,\n        isCertainTimeline,\n        isTime,\n        commissionType\n\n    } = userInput\n\n    let {\n        pointExpireDays,\n\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target_type,\n        target_count,\n        target_amount,\n\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        timelineType,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n        returnCertainTimelineId,\n\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n\n    } = userInput\n\n\n    // Add Transaction Reachable Target?\n    if (!isFinBasedOffer) {\n        offer_type = 0\n        offerCount = 0\n        offerAmount = 0\n    }\n\n    // Set Cumulative Target?\n    if (!target) {\n        target_type = 0\n        target_count = 0\n        target_amount = 0\n    }\n\n    // Set Campaign Reward Quota?\n    if (!isQuota) {\n        quotaType = 0\n        quotaCount = 0\n        quotaAmount = 0\n    }\n\n    // Set Receiver Reward Quota?\n    if (!isRxQuota) {\n        rxQuotaType = 0\n        rxQuotaCount = 0\n        rxQuotaAmount = 0\n    }\n\n    /* \n       Set Recurring Timeline?\n       returnCertainTimelineId => off hour rule => optional..\n       timelineType = w/m\n       isTimelineRange = false=> Specific Day, true => Day Range\n\n       //for specific date\n       staticTimeline => 1/2/3/4/....\n      //For date range..\n       startTimeline => 1/2/3/4....\n       endTimeline => 1/2/3/4...\n    */\n    if (!isCertainTimeline) {\n        returnCertainTimelineId = 0\n        timelineType = null\n        isTimelineRange = false\n        staticTimeline = null\n        startTimeline = null\n        endTimeline = null\n    } else {\n\n        if (!isTimelineRange) {\n            startTimeline = null\n            endTimeline = null\n        } else {\n            staticTimeline = null\n        }\n    }\n\n    if (!isTime) {\n        startHour = null\n        endHour = null\n        outsideHourCommissionId = 0\n    }\n\n    if (isCertainTimeline && isTime) {\n        outsideHourCommissionId = returnCertainTimelineId\n    }\n\n    /*\n      commissionType = fixed / flexible\n      reward type => 1=voucher,2=datapck,3=point,4=cashback\n    */\n   if (commissionType === 'fixed') {\n    flexibleRules = []\n    switch (reward_type) {\n        case 1 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_datapack_groupid = 0\n            rxreward_datapack_groupid = 0\n\n            break\n\n        case 2 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_voucherid = 0\n            rxreward_voucherid = 0\n\n            break\n\n        case 3 : \n             isPercentage = false\n             min = 0\n             max = 0\n\n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n\n             break\n        \n        default :\n             pointExpireDays = 0\n             \n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n             if (!isPercentage) {\n                min = 0\n                max = 0\n             }\n      }\n   } else {\n    // For flexiable..\n    // cash-back...\n      isPercentage = false\n      snAmount = 0  //also for point\n      rxAmount = 0   //also for point\n      min = 0\n      max = 0\n\n    //voucher...\n      snreward_voucherid = 0\n      rxreward_voucherid = 0\n\n    // Data-pack...\n      snreward_datapack_groupid = 0\n      rxreward_datapack_groupid = 0\n\n      switch (reward_type) {\n        case 1 :\n            flexibleRules = voucherFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 2 :\n            flexibleRules = datapackFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 3 : \n             flexibleRules = pointFlexibleData\n             break\n        \n        default :\n             flexibleRules = cashbackFlexibleData\n             pointExpireDays = 0\n      }\n\n   }\n\n   const finalRequestData = {\n        commissionRuleName,\n        reward_type,\n        pointExpireDays,\n\n        isFinBasedOffer,\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target,\n        target_type,\n        target_count,\n        target_amount,\n\n        isQuota,\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        isRxQuota,\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        isCertainTimeline,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        timelineType,\n        startHour,\n        endHour,\n        returnCertainTimelineId,\n\n        isTime,\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n\n        commissionType,\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n   }\n\n   return finalRequestData\n}","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string, PropTypes.shape({\n  size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  tag: tagPropType,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Col = function Col(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      widths = props.widths,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"widths\", \"tag\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      var colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames)), cssModule));\n    } else {\n      var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n\n      colClasses.push(_colClass);\n    }\n  });\n\n  if (!colClasses.length) {\n    colClasses.push('col');\n  }\n\n  var classes = mapToCssModules(classNames(className, colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = propTypes;\nCol.defaultProps = defaultProps;\nexport default Col;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                columns={column}\n                className='react-dataTable realtimecomissionflaxiabletable'\n                sortIcon={<ChevronDown size={10} />}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable","import useJwt2 from '@src/auth/jwt/useJwt2'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useMemo, useRef, useState } from 'react'\nimport { ChevronLeft, Minus, Plus, Info } from 'react-feather'\nimport Select from 'react-select'\nimport { UncontrolledPopover, PopoverHeader, PopoverBody, Button, Card, CardBody, InputGroup, InputGroupAddon, InputGroupText, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport { Error, Success } from '../../../../../viewhelper'\nimport {BeatLoader} from \"react-spinners\"   \nimport CommonDataTable from '../DataTable'\nimport './rStyle.css'\n\nconst conditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst rewardConditionTypes = [\n    { value: 1, label: 'On Reward Count' }, \n    { value: 2, label: 'On Reward Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst cumulativeConditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' },\n    { value: 5, label: 'Per Transaction' },\n    { value: 6, label: 'Top Transaction' }\n]\n\nconst weekDaysName = [\n    { value: 1, label: 'Monday' }, \n    { value: 2, label: 'Tuesday' }, \n    { value: 3, label: 'Wednesday' }, \n    { value: 4, label: 'Thursday' }, \n    { value: 5, label: 'Friday' },\n    { value: 6, label: 'Saturday' }, \n    { value: 7, label: 'Sunday' }\n]\n\nconst monthDays = [...Array(31)].map((_, i) => {\n    return {value: i + 1, label: `${i + 1}`}\n})\n\nconst RealTimeCommisionRuleLogic = ({\n    setUserInput, \n    userInput,\n\n    cashbackFlexibleData:tableData,\n    setCashbackFlexibleData:setTableData,\n    voucherFlexibleData:tableData1,\n    setVoucherFlexibleData:setTableData1,\n\n    datapackFlexibleData:tableData2,\n    setDatapackFlexibleData:setTableData2,\n    pointFlexibleData:tableData3,\n    setPointFlexibleData:setTableData3,\n\n    onlyView\n\n}) => {\n\n    const isFirstRender = useRef(true)\n\n    const rewardTypeRef = useRef()\n    const ref1 = useRef()\n    const srRef = useRef()\n    const rrRef = useRef()\n\n    const recurringStartDateRef = useRef()\n    const recurringEndDateRef = useRef()\n    const recurringSpecificDateRef = useRef()\n\n\n    // const [tableData, setTableData] = useState([{ startRange: 0, isPercentage: false }])\n    // const [tableData1, setTableData1] = useState([{ startRange: 0 }])\n    // const [tableData2, setTableData2] = useState([{ startRange: 0 }])\n    // const [tableData3, setTableData3] = useState([{ startRange: 0 }])\n\n    const [commissionRuleList, setcommissionRuleList] = useState([])\n    const [isCommissionRuleListLoading, setCommissionRuleListLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [voucherList, setVoucherList] = useState([])\n    const [isVoucherListLoading, setVoucherListLoading] = useState(true)\n    const [datapackList, setDatapackList] = useState([])\n    const [isDatapackLoading, setDatapackLoading] = useState(true)\n    const [campaignRewardType, setcampaignRewardType] = useState([])\n    const [campaignRewardTypeValueOption, setcampaignRewardTypeValueOption] = useState({})\n    const [quotaConditionTypes, setquotaConditionTypes] = useState(rewardConditionTypes)\n    const [campaignQuotaValue, setcampaignQuotaValue] = useState({})\n    const [campaignReceiverQuotaValue, setcampaignReceiverQuotaValue] = useState({})\n\n    const [needRefresh, setneedRefresh] = useState(0)\n\n    console.log('isVoucherListLoading => ', isVoucherListLoading)\n\n    const handleChange = (e) => {\n        // console.log(e.target.value)\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n    const handleChange1 = (e, index) => {\n        tableData[index] = { ...tableData[index], [e.target.name]: e.target.value }\n        setTableData([...tableData])\n    }\n    const handleChange2 = (e, index) => {\n        tableData1[index] = { ...tableData1[index], [e.target.name]: e.target.value }\n        setTableData1([...tableData1])\n    }\n    const handleChange3 = (e, index) => {\n        tableData2[index] = { ...tableData2[index], [e.target.name]: e.target.value }\n        setTableData2([...tableData2])\n    }\n    const handleChange4 = (e, index) => {\n        tableData3[index] = { ...tableData3[index], [e.target.name]: e.target.value }\n        setTableData3([...tableData3])\n    }\n\n    const getVoucherList = () => {\n        useJwt2.pmsVoucher().then(res => {\n            setVoucherList(res.data.payload.map(i => { return {value: i.voucherid, label: i.title} }))\n            setVoucherListLoading(false)\n        }).catch(err => {\n            setVoucherListLoading(false)\n            Error(err)\n        })\n    }\n\n    const getDatapack = () => {\n        useJwt2.datapackGroupList().then(res => {\n            setDatapackList(res.data.payload.map(i => { return {value: i.id, label: i.group_title} }))\n            setDatapackLoading(false)\n        }).catch(err => {\n            setDatapackLoading(false)\n            Error(err)\n        })\n    }\n\n    const getCampaignRule = () => {\n        // campaignListDropdown\n        useJwt2.commissionListDropdown().then(res => {\n            setcommissionRuleList(res.data.payload.map(i => { return {value: i.commission_id, label: i.commission_rule_name} }))\n            setCommissionRuleListLoading(false)\n        }).catch(err => {\n            setCommissionRuleListLoading(false)\n            Error(err)\n        })\n    }\n\n    const resetQuotaSelectedValues = () => {\n        setcampaignQuotaValue(rewardConditionTypes[0])\n        setcampaignReceiverQuotaValue(rewardConditionTypes[0])\n        setUserInput({...userInput, quotaType: 1, rxQuotaType: 1})\n    }\n    const recurringTypeOnChange = (selected) => {\n        let staticTimeline = null, startTimeline = null, endTimeline = null\n        if (selected.value === 'm') {\n           if (!userInput.isTimelineRange) {\n            staticTimeline = 1\n            startTimeline = null\n            endTimeline = null\n           } else {\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n           }\n            \n        } else {\n\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n        }\n\n        setUserInput({ \n            ...userInput, \n            timelineType: selected.value,\n            staticTimeline,\n            startTimeline,\n            endTimeline\n        })\n    }\n\n    // rewardlist....\n    useEffect(() => {\n        const rewardTypeid = userInput.reward_type\n        if (isFirstRender.current) {\n            // Skip the effect on the initial render\n            isFirstRender.current = false\n            switch (rewardTypeid) {\n                // Voucher...\n                case 1 :\n                    getVoucherList()\n                    break\n    \n                // Data-pack....\n                case 2 :\n                    getDatapack()\n                    break\n            }\n            return\n        }\n        switch (rewardTypeid) {\n            // Voucher...\n            case 1 :\n                if (!voucherList.length) {\n                    getVoucherList()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Data-pack....\n            case 2 :\n                if (!datapackList.length) {\n                    getDatapack()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Point....\n            case 3 :\n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // cash-back..\n            case 4 : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // There have no other option..\n            default : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n        }\n    }, [userInput.reward_type])\n\n    useEffect(() => {\n        useJwt2.campaignRewardType().then(res => {\n            const data = res.data.payload.map(item => {\n                return { value: item['reward_id'], label:item['reward_type_name']}\n            })\n            setcampaignRewardType(data)\n            if (data.length) {\n                if (userInput.reward_type > 0) {\n                    const rewardTypeObj = data.find(({ value }) => value === userInput.reward_type)\n                    if (rewardTypeObj) {\n                        setcampaignRewardTypeValueOption(rewardTypeObj)\n                    } else {\n                        setUserInput({ ...userInput, reward_type: 0})\n                    }\n                } else {\n                    const rewardTypeFirstValue = data[0].value \n                    setUserInput({ ...userInput, reward_type: rewardTypeFirstValue})\n                    setcampaignRewardTypeValueOption(data[0])\n                }\n            }\n\n          }).catch(err => {\n            Error(err)\n        })\n\n        // Set some default values...\n        if (userInput.quotaType > 0) {\n            setcampaignQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.quotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n        // setcampaignReceiverQuotaValue\n        if (userInput.rxQuotaType > 0) {\n            setcampaignReceiverQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.rxQuotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n\n        console.log('userInput.flexibleRulesuserInput.flexibleRules ==>>', userInput.flexibleRules)\n        switch (userInput.reward_type) {\n            case 1 :\n                setTableData1(userInput.flexibleRules)\n                break\n\n            case 2 :\n                setTableData2(userInput.flexibleRules)\n                break\n\n            case 3 :\n                setTableData3(userInput.flexibleRules)\n                break\n\n            case 4 :\n                setTableData(userInput.flexibleRules)\n                break\n        }\n        setneedRefresh(needRefresh + 1)\n    }, [])\n\n    useEffect(() => {\n        if (!commissionRuleList.length && (userInput.isCertainTimeline || userInput.isTime)) {\n            getCampaignRule()\n        }\n    }, [userInput.isCertainTimeline, userInput.isTime])\n\n    // Cash-back\n    const column = useMemo(() => [\n        {\n            name: 'Reward Condition',\n            minWidth: '150px',\n            cell: (Row, index) => {\n                return <Select ClassName='wid-100'\n                    theme={selectThemeColors}\n                    maxMenuHeight={200}\n                    className='react-select'\n                    classNamePrefix='select'\n                    value={{ value: tableData[index]?.isPercentage, label: tableData[index]?.isPercentage ? 'Percentage' : tableData[index]?.isPercentage === undefined ? 'select' : 'Flat' }}\n                    onChange={(selected) => {\n                        if (selected.value) {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value }\n                            setTableData([...tableData])\n                        } else {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value, min: 0.00, max: 0.00 }\n                            setTableData([...tableData])\n                        }\n\n                    }}\n                    isDisabled={onlyView}\n                    options={[{ value: true, label: 'Percentage' }, { value: false, label: 'Flat' }]}\n                />\n            }\n        },\n        {\n            name: 'Sender Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                    <InputGroup>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData[index].snAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n\n                    /> \n                    {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                      \n                    </InputGroup>\n                    {(error && !tableData[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                     <InputGroup>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData[index].rxAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n                    />\n                     {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                    </InputGroup>\n                    {(error && !tableData[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData[index].startRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData[index].endRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Minimum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"min\"\n                        id={`${index}min`}\n                        value={tableData[index].min}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].min) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].min) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Min commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Maximum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"max\"\n                        id={`${index}max`}\n                        value={tableData[index].max}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].max) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={tableData[index].min || 0.01}\n                        step={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].max) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Max commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <Fragment>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData[index].snAmount && tableData[index].rxAmount && tableData[index].startRange && tableData[index].endRange && ((!tableData[index].isPercentage && (!tableData[index].min && !tableData[index].max)) || (tableData[index].isPercentage && (tableData[index].min && tableData[index].max)))) {\n                                    setTableData([...tableData, { startRange: parseFloat(tableData[index].endRange) + 0.01, isPercentage: false }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData.splice(index, 1)\n                                setTableData([...tableData])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </Fragment>\n            }\n        }\n    ], [tableData.length, userInput.commissionType, error, needRefresh])\n    // Voucher..\n    const column1 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                console.log('jjjjjjj000000')\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                            name=\"country\"\n                            title=\"Country\"\n\n                            theme={selectThemeColors}\n                            className='react-select wid-100'\n                            classNamePrefix='select'\n                            value={ voucherList.find(i => i.value === tableData1[index]?.snreward_voucherid) }\n                            onChange={(e) => {\n                                tableData1[index] = { ...tableData1[index], snreward_voucherid: e.value }\n                                setTableData1([...tableData1])\n                            }}\n                            style={(error && !tableData1[index].snreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                            options={voucherList}\n                            menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                            captureMenuScroll={true}\n                            closeMenuOnSelect={true}\n                            closeMenuOnScroll={true}\n                            hideSelectedOptions={true}\n                            defaultValue={\n                                tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['snreward_voucherid'])) : null\n                            }\n                            isDisabled={onlyView}\n                         />\n                         <Input\n                            required\n                            disabled={onlyView}\n                            style={{\n                                opacity: 0,\n                                width: \"100\",\n                                height: 0\n                                // position: \"absolute\"\n                            }}\n                            value={tableData1[index]?.snreward_voucherid || ''}\n                            onChange={e => ''}\n                        />\n                        {(error && !tableData1[index].snreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='react-select'\n                        ClassName='wid-100'\n                        classNamePrefix='select'\n                        value={ voucherList.find(i => i.value === tableData1[index]?.rxreward_voucherid) }\n                        onChange={(e) => {\n                            tableData1[index] = { ...tableData1[index], rxreward_voucherid: e.value }\n                            setTableData1([...tableData1])\n                        }}\n                        style={(error && !tableData1[index].rxreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={voucherList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['rxreward_voucherid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData1[index]?.rxreward_voucherid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData1[index].rxreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData1[index].startRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData1[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData1[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData1[index].endRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData1[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData1[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData1[index].startRange && tableData1[index].endRange && tableData1[index].snreward_voucherid && tableData1[index].rxreward_voucherid) {\n                                    setTableData1([...tableData1, { startRange: parseFloat(tableData1[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData1.splice(index, 1)\n                                setTableData1([...tableData1])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData1.length, userInput.commissionType, error, isVoucherListLoading, needRefresh])\n    //  data-pack...\n    const column2 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={150}\n                        ClassName='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], snreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].snreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['snreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.snreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    \n                    {(error && !tableData2[index].snreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], rxreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].rxreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['rxreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.rxreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData2[index].rxreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                    </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData2[index].startRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : (+tableData2[index - 1].endRange + 0.01)}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData2[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData2[index].endRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : tableData2[index].startRange}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData2[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData2[index].startRange && tableData2[index].endRange && tableData2[index].snreward_datapack_groupid && tableData2[index].rxreward_datapack_groupid) {\n                                    setTableData2([...tableData2, { startRange: parseFloat(tableData2[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData2.splice(index, 1)\n                                setTableData2([...tableData2])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData2.length, userInput.commissionType, error, isDatapackLoading, needRefresh])\n    // point..\n    const column3 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData3[index].snAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData3[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData3[index].rxAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData3[index].startRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData3[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData3[index].endRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData3[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (\n                                    tableData3[index].snAmount && \n                                    tableData3[index].rxAmount && \n                                    tableData3[index].startRange && \n                                    tableData3[index].endRange\n                                    \n                            ) {\n                                    setTableData3([\n                                        ...tableData3, \n                                        { \n                                            startRange: parseFloat(tableData3[index].endRange) + 0.01, \n                                            isPercentage: false \n                                        }\n                                    ])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData3.splice(index, 1)\n                                setTableData3([...tableData3])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData3.length, userInput.commissionType, error, needRefresh])\n\n\n    console.log('userInput.commissionType => ', userInput.commissionType)\n    return (\n        <Fragment> \n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col sm=\"6\" >\n                                <FormGroup>\n                                    <Label for=\"commissionRuleName\">Campaign Rule Name<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"textarea\"\n                                        name=\"commissionRuleName\"\n                                        id='commissionRuleName'\n                                        rows='2'\n                                        value={userInput.commissionRuleName}\n                                        onChange={handleChange}\n                                        required\n                                        maxLength=\"100\"\n                                        placeholder=\"rule name here...\"\n                                        disabled={onlyView}\n                                    />\n                                    <p className='text-right' style={userInput.commissionRuleName.length === 100 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{100 - userInput.commissionRuleName.length} characters remaining</p>\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"6\" >\n                                <Row>\n                                    <Col sm=\"12\" > \n                                        <FormGroup>\n                                        <Label for=\"campaign-reward-type\">Campaign Reward Type <Info size={14} id='CampaignRewardType'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='CampaignRewardType'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Campaign reward type allows you to choose the type of reward for the designed campaign. The reward can be a data pack, loyalty points, cashback, or a subscription voucher. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            value={campaignRewardTypeValueOption}\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, reward_type: selected.value })\n                                                setcampaignRewardTypeValueOption(selected)\n                                            }}\n                                            options={campaignRewardType}\n                                            ref={rewardTypeRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => rewardTypeRef.current.select.focus()}\n                                            value={userInput.reward_type || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                    </Col>\n                                </Row>\n                                {\n                                    userInput.reward_type === 3 && <Row>\n                                    <Col sm=\"12\"  className='fade-in'> \n                                        <FormGroup>\n                                            <Label for=\"pointExpireDays\">Point Expire Days<span style={{ color: 'red' }}>*</span>  <Info size={14} id='pointexpirydays'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='pointexpirydays'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Points earned during the campaign will expire after a specified period. </PopoverBody>\n                                        </UncontrolledPopover>\n                                            <Input type=\"number\"\n                                                min='1'\n                                                name=\"pointExpireDays\"\n                                                id='pointExpireDays'\n                                                value={userInput.pointExpireDays}\n                                                onChange={handleChange}\n                                                required\n                                                placeholder=\"0\"\n                                                onWheel={(e) => e.target.blur()}\n                                                disabled={onlyView}\n\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                  </Row>\n                                }\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        <span>Add Transaction Reachable Target?\n                                          &nbsp; <Info size={14} id='transactionreachabletarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='transactionreachabletarget'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Set the campaign target based on the total transaction amount or count. The campaign will deactivate when the targeted transaction is reached. </PopoverBody>\n                                        </UncontrolledPopover>\n\n                                        <CustomInput\n                                            type='switch'\n                                            id='isFinBasedOffer'\n                                            name='isFinBasedOffer'\n                                            checked={userInput.isFinBasedOffer}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: true, offer_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: false, offerCount: 0, offerAmount: 0 })\n                                                }\n                                             }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isFinBasedOffer &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.offer_type > 0 ? conditionTypes.find(({ value }) => value === userInput.offer_type) : conditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, offer_type: selected.value })\n                                                        }}\n                                                        options={conditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.offer_type !== 2 && <Col md=\"6\" className={userInput.offer_type === 3 || userInput.offer_type === 4 ? 'fade-in mt-1' : 'fade-in'}>\n                                                        <FormGroup>\n                                                            <Label for=\"offerCount\">Define Number Of Transaction<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"offerCount\"\n                                                                id='offerCount'\n                                                                value={userInput.offerCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.offer_type !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"offerAmount\">Define Minimum Total Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"offerAmount\"\n                                                                    id='offerAmount'\n                                                                    value={userInput.offerAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span> Set Cumulative Target?\n                                            &nbsp; <Info size={14} id='cumulativetarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='cumulativetarget'>\n                                            <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> To set the campaign conditions i.e. amount or count or hybrif in cumulative manner. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='cumulative-target'\n                                            name='cumulative-target'\n                                            checked={userInput.target}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, target: true, target_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, target: false})\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.target &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.target_type > 0 ? cumulativeConditionTypes.find(({ value }) => value === userInput.target_type) : cumulativeConditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, target_type: selected.value })\n                                                        }}\n                                                        options={cumulativeConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.target_type !== 2 && <Col md=\"6\" className={userInput.target_type === 5 ? \"fade-in\" : \"fade-in mt-1\"}>\n                                                        <FormGroup>\n                                                            <Label for=\"terget_typeCount\">Define {userInput.target_type === 6 ? \"Top\" : null} Number Of Transactions<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"target_count\"\n                                                                id='terget_typeCount'\n                                                                value={userInput.target_count}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.target_type !== 1 && <Col md=\"6\" className=\"fade-in\">\n                                                            <FormGroup>\n                                                                <Label for=\"target_amount\">Define {userInput.target_type === 5 ? \"Per\" : \"Minimum Total\"} Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"target_amount\"\n                                                                    id='target_amount'\n                                                                    value={userInput.target_amount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                \n                                         <span>Set Campaign Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> You can set the number of rewards or the total reward amount (if it's cashback or points) for a specific campaign. When the reward limit is exceeded, the campaign will be deactivated. It's a kind of campaign budget. </PopoverBody>\n                                        </UncontrolledPopover>\n                                         <CustomInput\n                                            type='switch'\n                                            id='isQuota'\n                                            name='isQuota'\n                                            disabled={onlyView}\n                                            checked={userInput.isQuota}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isQuota: true, quotaType: quotaConditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isQuota: false, quotaCount: 0, quotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={\n                                                        //     userInput.quotaType > 0 ? quotaConditionTypes.find(({ value }) => value === userInput.quotaType) : quotaConditionTypes[0]\n                                                        // }\n                                                        value={campaignQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, quotaType: selected.value })\n                                                            setcampaignQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.quotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"quotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"quotaCount\"\n                                                                id='quotaCount'\n                                                                value={userInput.quotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.quotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"quotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"quotaAmount\"\n                                                                    id='quotaAmount'\n                                                                    value={userInput.quotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span>Set Receiver Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignreceiverrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignreceiverrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Receiver's quota means the no. of times or amount an eligible individulas will get reward under specific campaign. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='isRxQuota'\n                                            name='isRxQuota'\n                                            checked={userInput.isRxQuota}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isRxQuota: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, isRxQuota: false, rxQuotaCount: 0, rxQuotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isRxQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={quotaConditionTypes[0]}\n                                                        value={campaignReceiverQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, rxQuotaType: selected.value })\n                                                            setcampaignReceiverQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.rxQuotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"rxQuotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"rxQuotaCount\"\n                                                                id='rxQuotaCount'\n                                                                value={userInput.rxQuotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.rxQuotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"rxQuotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"rxQuotaAmount\"\n                                                                    id='rxQuotaAmount'\n                                                                    value={userInput.rxQuotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                \n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                                \n                                <span>Set Recurring Timeline?\n                                    &nbsp; <Info size={14} id='recurringtimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='recurringtimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific timeframe i.e. weekly, monthly, daily manner. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isCertainTimeline'\n                                    name='isCertainTimeline'\n                                    checked={userInput.isCertainTimeline}\n                                    disabled={onlyView}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                timelineType:'m', \n                                                staticTimeline:1,\n                                                isCertainTimeline: true, \n                                                isTimelineRange: false,\n                                                outsideHourCommissionId: 0, \n                                                returnCertainTimelineId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                returnCertainTimelineId: 0, \n                                                isCertainTimeline: false, \n                                                timelineType: ' ', \n                                                isTimelineRange: false,\n                                                staticTimeline: 0, \n                                                startTimeline: 0, \n                                                endTimeline: 0,  \n                                                outsideHourCommissionId: 0\n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isCertainTimeline && <>\n                                        <FormGroup>\n                                            <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                            { !isCommissionRuleListLoading ? <Select\n                                                ref={ref1}\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                defaultValue={\n                                                    userInput.returnCertainTimelineId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.returnCertainTimelineId)) : null\n                                                }\n                                                onChange={(selected) => {\n                                                    setUserInput({ \n                                                        ...userInput, \n                                                        returnCertainTimelineId: selected ? selected.value : 0 \n                                                    })\n                                                }}\n                                                options={commissionRuleList}\n                                                isClearable\n                                                isDisabled={onlyView}\n                                              /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                            }\n                                        </FormGroup>\n    \n                                        <FormGroup className='fade-in'>\n                                            <Label for=\"Businesses\">Recurring Type<span style={{ color: 'red' }}>*</span></Label>\n                                            <Select\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                defaultValue={\n                                                    userInput.timelineType === 'w' ? { value: 'w', label: 'Weekly' } : (userInput.timelineType === 'm' ? { value: 'm', label: 'Monthly' } : null)\n                                                }\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                onChange={(selected) => recurringTypeOnChange(selected)}\n                                                options={[\n                                                    { value: 'w', label: 'Weekly' }, \n                                                    { value: 'm', label: 'Monthly' }\n                                                ]}\n                                                isDisabled={onlyView}\n                                            />\n                                        </FormGroup>\n                                    </>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='day' id='day' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Day\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='range' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Day Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'm' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='date' id='date' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Date\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='daterange' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Date Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select day<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.staticTimeline) : null\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={weekDaysName}\n                                            ref={recurringSpecificDateRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            disabled={onlyView}\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => recurringSpecificDateRef.current.select.focus()}\n                                            value={userInput.staticTimeline || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                                \n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                                {\n                                    userInput.timelineType === 'm' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select Date<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? monthDays.find(({ value }) => value === userInput.staticTimeline) : { value: 1, label: '1' }\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={monthDays}\n                                            isDisabled={onlyView}\n\n                                        />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? monthDays.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? monthDays.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                            </CardBody>\n                        </Card>\n                        </Col>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                               \n                                <span> Include Time?\n                                    &nbsp; <Info size={14} id='includetimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='includetimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific hours of each timeframe. Also known as happy hour. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isTime'\n                                    name='isTime'\n                                    disabled={onlyView}\n                                    checked={userInput.isTime}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: true, \n                                                outsideHourCommissionId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: false, \n                                                startHour: '', \n                                                endHour: '', \n                                                outsideHourCommissionId: 0 \n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isTime && <Row className='fade-in'>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"startHour\">Start Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.startHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: Date.now(),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => {\n                                                        console.log(date)\n                                                        console.log(new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString())\n                                                        setUserInput({ ...userInput, startHour: flatpickr.formatDate(date[0], 'H : i'), endHour: new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString() })\n                                                    }}\n                                                /> */}\n                                                <Input type=\"time\"\n                                                    name=\"startHour\"\n                                                    id='startHour'\n                                                    value={userInput.startHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"endHour\">End Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.endHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: new Date(Date.now()).setHours(new Date(Date.now()).getHours() + 1),\n                                                        // minDate: new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1), \n                                                        minDate: new Date(new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1)),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => setUserInput({ ...userInput, endHour: flatpickr.formatDate(date[0], 'H : i') })}\n                                                /> */}\n                                                <Input\n                                                    type=\"time\"\n                                                    min={userInput.startHour}\n                                                    name=\"endHour\"\n                                                    id='endHour'\n                                                    value={userInput.endHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                // placeholder='0'\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        {\n                                            !userInput.isCertainTimeline && <Col sm=\"12\" >\n                                                <FormGroup>\n                                                    <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                                    { !isCommissionRuleListLoading ? <Select\n                                                        ref={ref1}\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.outsideHourCommissionId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.outsideHourCommissionId)) : null\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ \n                                                                ...userInput, \n                                                                outsideHourCommissionId: selected ? selected.value : 0 \n                                                            })\n                                                        }}\n                                                        isDisabled={onlyView}\n                                                        options={commissionRuleList}\n                                                        isClearable                                                    \n                                                     /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                    }\n                                                </FormGroup>\n                                                {/* <Input\n                                                    required\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => ref1.current.select.focus()}\n                                                    value={userInput.outsideHourCommissionId || ''}\n                                                    onChange={e => ''}\n                                                /> */}\n                                            </Col>\n                                        }\n                                    </Row>}\n                            </CardBody>\n                        </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                {/* Campaign Rule Type  */}\n                <Fragment>\n                        <Row>\n                            <Col md=\"12\">\n                              <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"12\" >\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"commissionType\">Campaign Rule Type<span style={{ color: 'red' }}>*</span><Info size={14} id='campaignruletype'/></Label>\n                                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignruletype'>\n                                                            <PopoverHeader>Details</PopoverHeader>\n                                                            <PopoverBody> To set the campaign eligibility amount to be fixed-any amount, flexible for threshold. </PopoverBody>\n                                                        </UncontrolledPopover>\n                                                        <Select\n                                                            theme={selectThemeColors}\n                                                            maxMenuHeight={200}\n                                                            className='react-select'\n                                                            classNamePrefix='select'\n                                                            defaultValue={\n                                                                userInput.commissionType === 'fixed' ? { value: 'fixed', label: 'Fixed' } : (userInput.commissionType === 'flexible' ? { value: 'flexible', label: 'Flexible' } : null)\n                                                            }\n                                                            onChange={(selected) => {\n                                                                if (selected.value === 'flexible') {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value, isPercentage: false, amount: 0 })\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                } else {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value })\n                                                                    setTableData([{}])\n                                                                    setTableData1([{}])\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                }\n                                                            }}\n                                                            isDisabled={onlyView}\n                                                            options={[{ value: 'fixed', label: 'Fixed' }, { value: 'flexible', label: 'Flexible' }]}\n                                                        />\n                                                     </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n\n                                        {\n                                            userInput.commissionType === 'fixed' && <Col sm = \"12\" md=\"12\">\n                                            {/* Cash-back reward*/}\n                                            {\n                                                userInput.reward_type === 4 && <Row>\n                                                            <Col sm=\"12\" className='mt-1'>\n                                                                <Row>\n                                                                    <Col md=\"12\">\n                                                                        <Label className='d-block'><h6>Campaign Rule Condition<span style={{ color: 'red' }}>*</span></h6></Label>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                        <FormGroup check inline  className='mt-1' >\n                                                                        {/* <Label check> */}\n                                                                            <CustomInput type='radio' name='flat' id='flat' label=\"Flat\" checked={!userInput.isPercentage}\n                                                                                onChange={() => {\n                                                                                    setUserInput({ ...userInput, isPercentage: false, min: 0, max: 0 })\n                                                                                }}\n                                                                                disabled={onlyView}\n                                                                            />\n                                                                        {/* </Label> */}\n                                                                    </FormGroup>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                            <FormGroup check inline  className='mt-1'>\n                                                                            {/* <Label check> */}\n                                                                                <CustomInput type='radio' label=\"Percentage\" name='percentage' id='percentage' checked={userInput.isPercentage}\n                                                                                    onChange={() => {\n                                                                                        setUserInput({ ...userInput, isPercentage: true })\n                                                                                    }}\n                                                                                    disabled={onlyView}\n                                                                                />\n                                                                            {/* </Label> */}\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            \n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            {\n                                                                userInput.isPercentage === true && <Row className='fade-in'>\n                                                                    <Col sm=\"6\"  className='mt-1' >\n                                                                        <FormGroup>\n                                                                            <Label for=\"min\">Minimum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"min\"\n                                                                                id='min'\n                                                                                value={userInput.min}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                    <Col sm=\"6\"  className='mt-1'>\n                                                                        <FormGroup>\n                                                                            <Label for=\"max\">Maximum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"max\"\n                                                                                id='max'\n                                                                                value={userInput.max}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            }\n                                                        </Row>\n                                            }\n                                            {/* Voucher reward*/}\n                                            {\n                                                userInput.reward_type === 1 && <Row>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_voucherid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment> <Select\n                                                                        ref={srRef}\n                                                                        theme={selectThemeColors}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.snreward_voucherid) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_voucherid: selected.value })\n                                                                        }}\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_voucherid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_voucherid: selected.value })\n                                                                        }}\n                                                                        defaultValue={\n                                                                            userInput.rxreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.rxreward_voucherid) : null\n                                                                        }\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                    }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* Data-pack reward */}\n                                            {\n                                                 userInput.reward_type === 2 && <Row>\n                                                        \n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_datapack_groupid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={srRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.snreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_datapack_groupid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.rxreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.rxreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                        disabled={onlyView}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* point reward */}\n                                            {\n                                                userInput.reward_type === 3 && <Row>\n                                                  \n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n\n                                                        </Row>\n                                            }\n                                        </Col>\n                                        }\n\n                                    </Row>\n                                </CardBody>\n                              </Card>  \n                            </Col>\n                          \n                        </Row>\n                </Fragment>\n\n                {\n                    userInput.commissionType === 'flexible' && <Fragment>\n                    <Row>\n                        <Col md=\"12\">\n                            <Card>\n                                <CardBody>\n                                    {/* Cash-Back Reward*/}\n                                    {\n                                        userInput.reward_type === 4 && <CommonDataTable column={column} TableData={tableData} />\n                                    }\n\n                                    {/* Voucher Reward*/}\n                                    {\n                                       userInput.reward_type === 1 && (!isVoucherListLoading ? <CommonDataTable column={column1} TableData={tableData1} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n\n                                    {/* Data-Pack reward*/}\n                                    {\n                                        userInput.reward_type === 2 && (!isDatapackLoading ? <CommonDataTable column={column2} TableData={tableData2} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n                                    {/* Point reward */}\n                                    {\n                                        userInput.reward_type === 3 && <CommonDataTable column={column3} TableData={tableData3} />\n                                    }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                }\n        </Fragment>\n    )\n}\n\nexport default RealTimeCommisionRuleLogic"],"sourceRoot":""}