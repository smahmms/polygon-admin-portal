{"version":3,"sources":["@core/components/wizard/index.js","views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RuleDataReFormat.js","../../../src/js/polyfill.js","../../../src/js/util.js","../../../src/js/listeners.js","../../../src/js/index.js","views/tables/data-tables/basic/AdminComponent/CampaignManagement/campaignLogic.js","views/tables/data-tables/basic/AdminComponent/CampaignManagement/online-rule.js","views/tables/data-tables/basic/AdminComponent/CampaignManagement/CreateCampaign.js","views/tables/data-tables/basic/AdminComponent/CampaignManagement/SelectOrCreateRule.js","views/viewhelper.js","views/helper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js","views/tables/data-tables/basic/AdminComponent/DataTable.js","views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RealTimeCommisionRuleLogic.js"],"names":["Wizard","forwardRef","props","ref","type","className","steps","separator","options","instance","activeIndex","setActiveIndex","useState","stepper","useEffect","Stepper","current","addEventListener","event","detail","indexStep","_jsxs","classnames","vertical","children","_jsx","map","step","index","Fragment","length","crossed","active","concat","id","icon","title","subtitle","content","defaultProps","ChevronRight","size","RuleDataReFormat","userInput","flexibleData","cashbackFlexibleData","voucherFlexibleData","datapackFlexibleData","pointFlexibleData","commissionRuleName","reward_type","isFinBasedOffer","target","isQuota","isRxQuota","isCertainTimeline","isTime","commissionType","pointExpireDays","offer_type","offerCount","offerAmount","target_type","target_count","target_amount","quotaType","quotaCount","quotaAmount","rxQuotaType","rxQuotaCount","rxQuotaAmount","timelineType","isTimelineRange","staticTimeline","startTimeline","endTimeline","startHour","endHour","outsideHourCommissionId","returnCertainTimelineId","flexibleRules","isPercentage","snAmount","rxAmount","min","max","snreward_datapack_groupid","rxreward_datapack_groupid","snreward_voucherid","rxreward_voucherid","matches","window","Element","prototype","closest","element","selector","WinEvent","inType","params","Event","createCustomEvent","eventName","CustomEvent","polyfill","msMatchesSelector","webkitMatchesSelector","document","documentElement","contains","call","parentElement","parentNode","nodeType","e","createEvent","initEvent","Boolean","bubbles","cancelable","originPreventDefault","preventDefault","evt","initCustomEvent","this","Object","defineProperty","get","MILLISECONDS_MULTIPLIER","ClassName","ACTIVE","LINEAR","BLOCK","NONE","FADE","VERTICAL","transitionEndEvent","customProperty","show","stepperNode","done","_steps","classList","_stepsContents","showEvent","from","_currentIndex","to","dispatchEvent","activeStep","filter","activeContent","defaultPrevented","remove","animation","showStep","showContent","stepList","forEach","trigger","querySelector","selectors","setAttribute","add","currentTrigger","removeAttribute","contentList","toIndex","indexOf","shownEvent","complete","removeEventListener","duration","getTransitionDurationFromElement","emulateTransitionEnd","transitionDuration","getComputedStyle","parseFloat","split","called","emulatedDuration","listener","setTimeout","detectAnimation","buildClickStepLinearListener","buildClickStepNonLinearListener","stepIndex","DEFAULT_OPTIONS","linear","_options","_this","_element","_extends","slice","querySelectorAll","hasAttribute","push","getAttribute","_setLinkListeners","value","writable","_this2","_clickStepLinearListener","_clickStepNonLinearListener","next","_this3","nextStep","previous","_this4","previousStep","stepNumber","_this5","tempIndex","reset","_this6","destroy","_this7","undefined","rewardReceiver","label","rewardPriority","CampaignLogic","_ref","setUserInput","ruleSelectType","setruleInfobackup","onlyView","setRuledataloading","setruleDetailsInfo","ruleDetailsInfo","serviceRef","useRef","groupRef","groupRef1","rulRef","crRef","groupList","setgroupList","isGroupLoading","setisGroupLoading","realtimeRuleList","setrealtimeRuleList","isrealtimeRuleLoading","setisrealtimeRuleLoading","serviceList","setserviceList","isserviceLoading","setserviceLoading","ruleInput","setruleInput","is_voucher_reward","reward_voucherid","statusFlag","isDefault","isPoint","startDate","endDate","returnCommissionId","isDailyOffer","is_datapack_reward","useJwt2","commissionListDropdown","then","res","data","payload","i","commission_id","commission_rule_name","catch","err","Error","Promise","all","getCentralGroup","allGroup","item","group_name","getServiceList","services","service_id","keyword_description","service_keyword","handleChange","name","Row","Col","md","sm","FormGroup","Label","for","style","color","Input","rows","autoFocus","campaignName","onChange","required","maxLength","placeholder","disabled","margin","CustomInput","checked","anyservice","Select","theme","selectThemeColors","maxMenuHeight","classNamePrefix","defaultValue","receiver","find","_ref2","selected","isDisabled","opacity","width","height","onFocus","select","focus","reward_priority","_ref3","BeatLoader","Card","CardHeader","CardTitle","tag","fontSize","inline","multiService","sr","serviceId","CardBody","maxHeight","newArr","includes","anysendergroup","sendergroup","_ref4","isLoading","menuPlacement","anyreceivergroup","receivergroup","_ref5","commissionId","commissionruleDetails","row","flexiblerules","startRange","endRange","console","log","handleChangeRule","_ref6","Date","toLocaleDateString","toISOString","isDynamicCamp","dynamicCampExpire","onWheel","blur","OnlineRuleCreateOrSelect","setrerender","setCreateRule","setruleSelectType","setruleInfo","isComponentLoaded","setIsComponentLoaded","handleButtonClick","setCashbackFlexibleData","setVoucherFlexibleData","setDatapackFlexibleData","setPointFlexibleData","Form","onSubmit","finalRequestData","autoComplete","class","defaultChecked","display","RealTimeCommisionRuleLogic","Button","Ripple","ArrowRight","onClick","withReactContent","Swal","CreateCampaignLogic","rerender","createRule","ruleInfo","history","useHistory","pointRuleloading","setPointRuleloading","ruleDataLoading","ruleInfobackup","scrollTo","top","behavior","onlineRuleInfo","onlineCampaignCreate","response","Success","border","Spinner","SelectOrCreateRule","setStepper","Link","ChevronLeft","marginRight","ArrowLeft","el","status","toast","error","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","ErrorMessage","errors","keys","success","year","month","day","hour","minute","formatReadableDate","date","getHumanReadableDate","datetime","endsWith","plusIndex","moment","format","validateEmail","email","String","toLowerCase","match","thousandSeparator","x","toString","replace","handle401","async","location","href","localStorage","clear","ExportCSV","array","CSVname","link","createElement","csv","result","join","ctr","key","convertArrayOfObjectsToCSV","userData","JSON","parse","getItem","filename","replaceAll","encodeURI","click","CommonDataTable","column","TableData","TableDataLoading","currentPage","setCurrentPage","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","CustomPagination","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","page","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","progressPending","progressComponent","responsive","pointerOnHover","highlightOnHover","striped","conditionTypes","rewardConditionTypes","cumulativeConditionTypes","weekDaysName","monthDays","Array","_","tableData","setTableData","tableData1","setTableData1","tableData2","setTableData2","tableData3","setTableData3","isFirstRender","rewardTypeRef","ref1","srRef","rrRef","recurringStartDateRef","recurringEndDateRef","recurringSpecificDateRef","commissionRuleList","setcommissionRuleList","isCommissionRuleListLoading","setCommissionRuleListLoading","setError","voucherList","setVoucherList","isVoucherListLoading","setVoucherListLoading","datapackList","setDatapackList","isDatapackLoading","setDatapackLoading","campaignRewardType","setcampaignRewardType","campaignRewardTypeValueOption","setcampaignRewardTypeValueOption","quotaConditionTypes","setquotaConditionTypes","campaignQuotaValue","setcampaignQuotaValue","campaignReceiverQuotaValue","setcampaignReceiverQuotaValue","needRefresh","setneedRefresh","handleChange1","handleChange2","handleChange3","handleChange4","getVoucherList","pmsVoucher","voucherid","getDatapack","datapackGroupList","group_title","resetQuotaSelectedValues","rewardTypeid","rewardTypeObj","rewardTypeFirstValue","useMemo","minWidth","cell","_tableData$index","_tableData$index2","_tableData$index3","_tableData$index4","InputGroup","borderColor","InputGroupAddon","addonType","InputGroupText","padding","bottom","_tableData$index5","Plus","cursor","Minus","splice","column1","_tableData1$index2","_tableData1$index","captureMenuScroll","closeMenuOnSelect","closeMenuOnScroll","hideSelectedOptions","_tableData1$index4","_tableData1$index3","_Fragment","column2","_tableData2$index","_ref7","_tableData2$index2","_ref8","column3","Info","UncontrolledPopover","placement","PopoverHeader","PopoverBody","_ref9","_ref10","_ref11","isClearable","recurringTypeOnChange","check","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","amount","_ref19","_ref20","_ref21","_ref22"],"mappings":"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","file":"static/js/157.b73e8de0.chunk.js","sourcesContent":["// ** React Imports\nimport { useEffect, useState, Fragment, forwardRef } from 'react'\n\n// ** Third Party Components\nimport Stepper from 'bs-stepper'\nimport classnames from 'classnames'\nimport { PropTypes } from 'prop-types'\nimport { ChevronRight } from 'react-feather'\n\n// ** Styles\nimport 'bs-stepper/dist/css/bs-stepper.min.css'\nimport '../../../@core/scss/base/plugins/forms/form-wizard.scss'\n\nconst Wizard = forwardRef((props, ref) => {\n  // ** Props\n  const { type, className, steps, separator, options, instance } = props\n\n  // ** State\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  // ** Vars\n  let stepper = null\n\n  // ** Step change listener on mount\n  useEffect(() => {\n    stepper = new Stepper(ref.current, options)\n\n    ref.current.addEventListener('shown.bs-stepper', function (event) {\n      setActiveIndex(event.detail.indexStep)\n    })\n\n    if (instance) {\n      instance(stepper)\n    }\n  }, [])\n\n  // ** Renders Wizard Header\n  const renderHeader = () => {\n    return steps.map((step, index) => {\n      return (\n        <Fragment key={step.id}>\n          {index !== 0 && index !== steps.length ? <div className='line'>{separator}</div> : null}\n          <div\n            className={classnames('step', {\n              crossed: activeIndex > index,\n              active: index === activeIndex\n            })}\n            data-target={`#${step.id}`}\n          >\n            <button type='button' className='step-trigger'>\n              <span className='bs-stepper-box'>{step.icon ? step.icon : index + 1}</span>\n              <span className='bs-stepper-label'>\n                <span className='bs-stepper-title'>{step.title}</span>\n                {step.subtitle ? <span className='bs-stepper-subtitle'>{step.subtitle}</span> : null}\n              </span>\n            </button>\n          </div>\n        </Fragment>\n      )\n    })\n  }\n\n  // ** Renders Wizard Content\n  const renderContent = () => {\n    return steps.map((step, index) => {\n      return (\n        <div\n          className={classnames('content', {\n            'active dstepper-block': activeIndex === index\n          })}\n          id={step.id}\n          key={step.id}\n        >\n          {step.content}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={classnames('bs-stepper', {\n        [className]: className,\n        vertical: type === 'vertical',\n        'vertical wizard-modern': type === 'modern-vertical',\n        'wizard-modern': type === 'modern-horizontal'\n      })}\n    >\n      <div className='bs-stepper-header'>{renderHeader()}</div>\n      <div className='bs-stepper-content'>{renderContent()}</div>\n    </div>\n  )\n})\n\nexport default Wizard\n\n// ** Default Props\nWizard.defaultProps = {\n  type: 'horizontal',\n  separator: <ChevronRight size={17} />,\n  options: {}\n}\n\n// ** PropTypes\nWizard.propTypes = {\n  type: PropTypes.string,\n  instance: PropTypes.func,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  separator: PropTypes.element,\n  steps: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      subtitle: PropTypes.string,\n      icon: PropTypes.any,\n      content: PropTypes.any.isRequired\n    })\n  ).isRequired\n}\n","\nexport const RuleDataReFormat = (userInput, flexibleData) => {\n\n    const {\n        cashbackFlexibleData,\n        voucherFlexibleData,\n        datapackFlexibleData,\n        pointFlexibleData\n    } = flexibleData\n\n    const {\n        commissionRuleName,\n        reward_type,\n\n        isFinBasedOffer,\n        target,\n        isQuota,\n        isRxQuota,\n        isCertainTimeline,\n        isTime,\n        commissionType\n\n    } = userInput\n\n    let {\n        pointExpireDays,\n\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target_type,\n        target_count,\n        target_amount,\n\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        timelineType,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n        returnCertainTimelineId,\n\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n\n    } = userInput\n\n\n    // Add Transaction Reachable Target?\n    if (!isFinBasedOffer) {\n        offer_type = 0\n        offerCount = 0\n        offerAmount = 0\n    }\n\n    // Set Cumulative Target?\n    if (!target) {\n        target_type = 0\n        target_count = 0\n        target_amount = 0\n    }\n\n    // Set Campaign Reward Quota?\n    if (!isQuota) {\n        quotaType = 0\n        quotaCount = 0\n        quotaAmount = 0\n    }\n\n    // Set Receiver Reward Quota?\n    if (!isRxQuota) {\n        rxQuotaType = 0\n        rxQuotaCount = 0\n        rxQuotaAmount = 0\n    }\n\n    /* \n       Set Recurring Timeline?\n       returnCertainTimelineId => off hour rule => optional..\n       timelineType = w/m\n       isTimelineRange = false=> Specific Day, true => Day Range\n\n       //for specific date\n       staticTimeline => 1/2/3/4/....\n      //For date range..\n       startTimeline => 1/2/3/4....\n       endTimeline => 1/2/3/4...\n    */\n    if (!isCertainTimeline) {\n        returnCertainTimelineId = 0\n        timelineType = null\n        isTimelineRange = false\n        staticTimeline = null\n        startTimeline = null\n        endTimeline = null\n    } else {\n\n        if (!isTimelineRange) {\n            startTimeline = null\n            endTimeline = null\n        } else {\n            staticTimeline = null\n        }\n    }\n\n    if (!isTime) {\n        startHour = null\n        endHour = null\n        outsideHourCommissionId = 0\n    }\n\n    if (isCertainTimeline && isTime) {\n        outsideHourCommissionId = returnCertainTimelineId\n    }\n\n    /*\n      commissionType = fixed / flexible\n      reward type => 1=voucher,2=datapck,3=point,4=cashback\n    */\n   if (commissionType === 'fixed') {\n    flexibleRules = []\n    switch (reward_type) {\n        case 1 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_datapack_groupid = 0\n            rxreward_datapack_groupid = 0\n\n            break\n\n        case 2 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_voucherid = 0\n            rxreward_voucherid = 0\n\n            break\n\n        case 3 : \n             isPercentage = false\n             min = 0\n             max = 0\n\n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n\n             break\n        \n        default :\n             pointExpireDays = 0\n             \n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n             if (!isPercentage) {\n                min = 0\n                max = 0\n             }\n      }\n   } else {\n    // For flexiable..\n    // cash-back...\n      isPercentage = false\n      snAmount = 0  //also for point\n      rxAmount = 0   //also for point\n      min = 0\n      max = 0\n\n    //voucher...\n      snreward_voucherid = 0\n      rxreward_voucherid = 0\n\n    // Data-pack...\n      snreward_datapack_groupid = 0\n      rxreward_datapack_groupid = 0\n\n      switch (reward_type) {\n        case 1 :\n            flexibleRules = voucherFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 2 :\n            flexibleRules = datapackFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 3 : \n             flexibleRules = pointFlexibleData\n             break\n        \n        default :\n             flexibleRules = cashbackFlexibleData\n             pointExpireDays = 0\n      }\n\n   }\n\n   const finalRequestData = {\n        commissionRuleName,\n        reward_type,\n        pointExpireDays,\n\n        isFinBasedOffer,\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target,\n        target_type,\n        target_count,\n        target_amount,\n\n        isQuota,\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        isRxQuota,\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        isCertainTimeline,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        timelineType,\n        startHour,\n        endHour,\n        returnCertainTimelineId,\n\n        isTime,\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n\n        commissionType,\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n   }\n\n   return finalRequestData\n}","let matches = window.Element.prototype.matches\nlet closest = (element, selector) => element.closest(selector)\nlet WinEvent = (inType, params) => new window.Event(inType, params)\nlet createCustomEvent = (eventName, params) => {\n  const cEvent = new window.CustomEvent(eventName, params)\n\n  return cEvent\n}\n\n/* istanbul ignore next */\nfunction polyfill () {\n  if (!window.Element.prototype.matches) {\n    matches = window.Element.prototype.msMatchesSelector ||\n      window.Element.prototype.webkitMatchesSelector\n  }\n\n  if (!window.Element.prototype.closest) {\n    closest = (element, selector) => {\n      if (!document.documentElement.contains(element)) {\n        return null\n      }\n\n      do {\n        if (matches.call(element, selector)) {\n          return element\n        }\n\n        element = element.parentElement || element.parentNode\n      } while (element !== null && element.nodeType === 1)\n\n      return null\n    }\n  }\n\n  if (!window.Event || typeof window.Event !== 'function') {\n    WinEvent = (inType, params) => {\n      params = params || {}\n      const e = document.createEvent('Event')\n      e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable))\n      return e\n    }\n  }\n\n  if (typeof window.CustomEvent !== 'function') {\n    const originPreventDefault = window.Event.prototype.preventDefault\n\n    createCustomEvent = (eventName, params) => {\n      const evt = document.createEvent('CustomEvent')\n\n      params = params || { bubbles: false, cancelable: false, detail: null }\n      evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail)\n      evt.preventDefault = function () {\n        if (!this.cancelable) {\n          return\n        }\n\n        originPreventDefault.call(this)\n        Object.defineProperty(this, 'defaultPrevented', {\n          get: function () { return true }\n        })\n      }\n\n      return evt\n    }\n  }\n}\n\npolyfill()\n\nexport {\n  closest,\n  WinEvent,\n  createCustomEvent\n}\n","import { WinEvent, createCustomEvent } from './polyfill'\n\nconst MILLISECONDS_MULTIPLIER = 1000\n\nconst ClassName = {\n  ACTIVE: 'active',\n  LINEAR: 'linear',\n  BLOCK: 'dstepper-block',\n  NONE: 'dstepper-none',\n  FADE: 'fade',\n  VERTICAL: 'vertical'\n}\n\nconst transitionEndEvent = 'transitionend'\nconst customProperty = 'bsStepper'\n\nconst show = (stepperNode, indexStep, options, done) => {\n  const stepper = stepperNode[customProperty]\n\n  if (stepper._steps[indexStep].classList.contains(ClassName.ACTIVE) || stepper._stepsContents[indexStep].classList.contains(ClassName.ACTIVE)) {\n    return\n  }\n\n  const showEvent = createCustomEvent('show.bs-stepper', {\n    cancelable: true,\n    detail: {\n      from: stepper._currentIndex,\n      to: indexStep,\n      indexStep\n    }\n  })\n  stepperNode.dispatchEvent(showEvent)\n\n  const activeStep = stepper._steps.filter(step => step.classList.contains(ClassName.ACTIVE))\n  const activeContent = stepper._stepsContents.filter(content => content.classList.contains(ClassName.ACTIVE))\n\n  if (showEvent.defaultPrevented) {\n    return\n  }\n\n  if (activeStep.length) {\n    activeStep[0].classList.remove(ClassName.ACTIVE)\n  }\n  if (activeContent.length) {\n    activeContent[0].classList.remove(ClassName.ACTIVE)\n\n    if (!stepperNode.classList.contains(ClassName.VERTICAL) && !stepper.options.animation) {\n      activeContent[0].classList.remove(ClassName.BLOCK)\n    }\n  }\n\n  showStep(stepperNode, stepper._steps[indexStep], stepper._steps, options)\n  showContent(stepperNode, stepper._stepsContents[indexStep], stepper._stepsContents, activeContent, done)\n}\n\nconst showStep = (stepperNode, step, stepList, options) => {\n  stepList.forEach(step => {\n    const trigger = step.querySelector(options.selectors.trigger)\n\n    trigger.setAttribute('aria-selected', 'false')\n    // if stepper is in linear mode, set disabled attribute on the trigger\n    if (stepperNode.classList.contains(ClassName.LINEAR)) {\n      trigger.setAttribute('disabled', 'disabled')\n    }\n  })\n\n  step.classList.add(ClassName.ACTIVE)\n  const currentTrigger = step.querySelector(options.selectors.trigger)\n\n  currentTrigger.setAttribute('aria-selected', 'true')\n  // if stepper is in linear mode, remove disabled attribute on current\n  if (stepperNode.classList.contains(ClassName.LINEAR)) {\n    currentTrigger.removeAttribute('disabled')\n  }\n}\n\nconst showContent = (stepperNode, content, contentList, activeContent, done) => {\n  const stepper = stepperNode[customProperty]\n  const toIndex = contentList.indexOf(content)\n  const shownEvent = createCustomEvent('shown.bs-stepper', {\n    cancelable: true,\n    detail: {\n      from: stepper._currentIndex,\n      to: toIndex,\n      indexStep: toIndex\n    }\n  })\n\n  function complete () {\n    content.classList.add(ClassName.BLOCK)\n    content.removeEventListener(transitionEndEvent, complete)\n    stepperNode.dispatchEvent(shownEvent)\n    done()\n  }\n\n  if (content.classList.contains(ClassName.FADE)) {\n    content.classList.remove(ClassName.NONE)\n    const duration = getTransitionDurationFromElement(content)\n\n    content.addEventListener(transitionEndEvent, complete)\n    if (activeContent.length) {\n      activeContent[0].classList.add(ClassName.NONE)\n    }\n\n    content.classList.add(ClassName.ACTIVE)\n    emulateTransitionEnd(content, duration)\n  } else {\n    content.classList.add(ClassName.ACTIVE)\n    content.classList.add(ClassName.BLOCK)\n    stepperNode.dispatchEvent(shownEvent)\n    done()\n  }\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let transitionDuration = window.getComputedStyle(element).transitionDuration\n  const floatTransitionDuration = parseFloat(transitionDuration)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n\n  return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER\n}\n\nconst emulateTransitionEnd = (element, duration) => {\n  let called = false\n  const durationPadding = 5\n  const emulatedDuration = duration + durationPadding\n  function listener () {\n    called = true\n    element.removeEventListener(transitionEndEvent, listener)\n  }\n\n  element.addEventListener(transitionEndEvent, listener)\n  window.setTimeout(() => {\n    if (!called) {\n      element.dispatchEvent(WinEvent(transitionEndEvent))\n    }\n\n    element.removeEventListener(transitionEndEvent, listener)\n  }, emulatedDuration)\n}\n\nconst detectAnimation = (contentList, options) => {\n  if (options.animation) {\n    contentList.forEach(content => {\n      content.classList.add(ClassName.FADE)\n      content.classList.add(ClassName.NONE)\n    })\n  }\n}\n\nexport {\n  show,\n  ClassName,\n  customProperty,\n  detectAnimation\n}\n","import { closest } from './polyfill'\r\nimport { customProperty, show } from './util'\r\n\r\nconst buildClickStepLinearListener = () => function clickStepLinearListener (event) {\r\n  event.preventDefault()\r\n}\r\n\r\nconst buildClickStepNonLinearListener = options => function clickStepNonLinearListener (event) {\r\n  event.preventDefault()\r\n\r\n  const step = closest(event.target, options.selectors.steps)\r\n  const stepperNode = closest(step, options.selectors.stepper)\r\n  const stepper = stepperNode[customProperty]\r\n  const stepIndex = stepper._steps.indexOf(step)\r\n\r\n  show(stepperNode, stepIndex, options, () => {\r\n    stepper._currentIndex = stepIndex\r\n  })\r\n}\r\n\r\nexport {\r\n  buildClickStepLinearListener,\r\n  buildClickStepNonLinearListener\r\n}\r\n","import { show, customProperty, detectAnimation, ClassName } from './util'\r\nimport { buildClickStepLinearListener, buildClickStepNonLinearListener } from './listeners'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  linear: true,\r\n  animation: false,\r\n  selectors: {\r\n    steps: '.step',\r\n    trigger: '.step-trigger',\r\n    stepper: '.bs-stepper'\r\n  }\r\n}\r\n\r\nclass Stepper {\r\n  constructor (element, _options = {}) {\r\n    this._element = element\r\n    this._currentIndex = 0\r\n    this._stepsContents = []\r\n\r\n    this.options = {\r\n      ...DEFAULT_OPTIONS,\r\n      ..._options\r\n    }\r\n\r\n    this.options.selectors = {\r\n      ...DEFAULT_OPTIONS.selectors,\r\n      ...this.options.selectors\r\n    }\r\n\r\n    if (this.options.linear) {\r\n      this._element.classList.add(ClassName.LINEAR)\r\n    }\r\n\r\n    this._steps = [].slice.call(this._element.querySelectorAll(this.options.selectors.steps))\r\n\r\n    this._steps.filter(step => step.hasAttribute('data-target'))\r\n      .forEach(step => {\r\n        this._stepsContents.push(\r\n          this._element.querySelector(step.getAttribute('data-target'))\r\n        )\r\n      })\r\n\r\n    detectAnimation(this._stepsContents, this.options)\r\n    this._setLinkListeners()\r\n    Object.defineProperty(this._element, customProperty, {\r\n      value: this,\r\n      writable: true\r\n    })\r\n\r\n    if (this._steps.length) {\r\n      show(this._element, this._currentIndex, this.options, () => {})\r\n    }\r\n  }\r\n\r\n  // Private\r\n\r\n  _setLinkListeners () {\r\n    this._steps.forEach(step => {\r\n      const trigger = step.querySelector(this.options.selectors.trigger)\r\n\r\n      if (this.options.linear) {\r\n        this._clickStepLinearListener = buildClickStepLinearListener(this.options)\r\n        trigger.addEventListener('click', this._clickStepLinearListener)\r\n      } else {\r\n        this._clickStepNonLinearListener = buildClickStepNonLinearListener(this.options)\r\n        trigger.addEventListener('click', this._clickStepNonLinearListener)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Public\r\n\r\n  next () {\r\n    const nextStep = (this._currentIndex + 1) <= this._steps.length - 1 ? this._currentIndex + 1 : (this._steps.length - 1)\r\n\r\n    show(this._element, nextStep, this.options, () => {\r\n      this._currentIndex = nextStep\r\n    })\r\n  }\r\n\r\n  previous () {\r\n    const previousStep = (this._currentIndex - 1) >= 0 ? this._currentIndex - 1 : 0\r\n\r\n    show(this._element, previousStep, this.options, () => {\r\n      this._currentIndex = previousStep\r\n    })\r\n  }\r\n\r\n  to (stepNumber) {\r\n    const tempIndex = stepNumber - 1\r\n    const nextStep = tempIndex >= 0 && tempIndex < this._steps.length\r\n      ? tempIndex\r\n      : 0\r\n\r\n    show(this._element, nextStep, this.options, () => {\r\n      this._currentIndex = nextStep\r\n    })\r\n  }\r\n\r\n  reset () {\r\n    show(this._element, 0, this.options, () => {\r\n      this._currentIndex = 0\r\n    })\r\n  }\r\n\r\n  destroy () {\r\n    this._steps.forEach(step => {\r\n      const trigger = step.querySelector(this.options.selectors.trigger)\r\n\r\n      if (this.options.linear) {\r\n        trigger.removeEventListener('click', this._clickStepLinearListener)\r\n      } else {\r\n        trigger.removeEventListener('click', this._clickStepNonLinearListener)\r\n      }\r\n    })\r\n\r\n    this._element[customProperty] = undefined\r\n    this._element = undefined\r\n    this._currentIndex = undefined\r\n    this._steps = undefined\r\n    this._stepsContents = undefined\r\n    this._clickStepLinearListener = undefined\r\n    this._clickStepNonLinearListener = undefined\r\n  }\r\n}\r\n\r\nexport default Stepper\r\n","import useJwt2 from '@src/auth/jwt/useJwt2'\n\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useRef, useState } from 'react'\nimport Select from 'react-select'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport { Error, Success } from '../../../../../viewhelper'\nimport {BeatLoader} from \"react-spinners\"   \n\nconst rewardReceiver = [{value:'s', label:'Sender'}, {value:'r', label:'Receiver'}, {value:'b', label:'both'}]\nconst rewardPriority = [{value:'s', label:'Sender'}, {value:'r', label:'Receiver'}]\n\nconst CampaignLogic = ({\n    setUserInput,\n    userInput,\n    ruleSelectType,\n    setruleInfobackup,\n    onlyView,\n    setRuledataloading,\n    setruleDetailsInfo,\n    ruleDetailsInfo\n\n}) => {\n\n    const serviceRef = useRef()\n    const groupRef = useRef()\n    const groupRef1 = useRef()\n    const rulRef = useRef()\n    const crRef = useRef()\n\n    const [groupList, setgroupList] = useState([])\n    const [isGroupLoading, setisGroupLoading] = useState(true)\n    const [realtimeRuleList, setrealtimeRuleList] = useState([])\n    const [isrealtimeRuleLoading, setisrealtimeRuleLoading] = useState(true)\n    const [serviceList, setserviceList] = useState([])\n    const [isserviceLoading, setserviceLoading] = useState(true)\n\n    const [ruleInput, setruleInput] = useState({\n\n        commissionRuleName: '',\n        reward_type: 0,\n        pointExpireDays: 365,\n\n        isFinBasedOffer: false,\n        offer_type: 1,\n        offerCount: 0,\n        offerAmount: 0,\n\n        target: false,\n        target_type: 1,\n        target_count: 0,\n        target_amount: 0,\n\n        isQuota: false,\n        quotaType: 0,\n        quotaCount: 0,\n        quotaAmount: 0,\n\n        isRxQuota: false,\n        rxQuotaType: 0,\n        rxQuotaCount: 0,\n        rxQuotaAmount: 0,\n\n        isTime: false,\n        startHour: ' ',\n        endHour: ' ',\n\n        is_voucher_reward: false,\n        reward_voucherid: null,\n        statusFlag: false,\n        isDefault: false,\n        isPoint: false,\n        startDate: '',\n        endDate: '',\n        isCertainTimeline: false,\n        timelineType: ' ',\n        isTimelineRange: false,\n        staticTimeline: 0,\n        startTimeline: 0,\n        endTimeline: 0,\n        commissionType: 'fixed',\n        snAmount: 0,\n        rxAmount: 0,\n        isPercentage: false,\n        min: 0,\n        max: 0,\n \n        flexibleRules: [],\n        returnCommissionId: 0,\n        outsideHourCommissionId: 0,\n        returnCertainTimelineId: 0,\n        isDailyOffer: false,\n        is_voucher_reward: false,\n        snreward_voucherid : \"\",\n        rxreward_voucherid : \"\",\n        is_datapack_reward: false,\n        snreward_datapack_groupid : \"\",\n        rxreward_datapack_groupid : \"\"\n    })\n\n    useEffect(() => {\n        if (ruleSelectType === 1 && !realtimeRuleList.length) {\n            // Fetch Campaign rule..\n            useJwt2.commissionListDropdown().then(res => {\n                setrealtimeRuleList(res.data.payload.map(i => { return {value: i.commission_id, label: i.commission_rule_name} }))\n                setisrealtimeRuleLoading(false)\n            }).catch(err => {\n                Error(err)\n            })\n        }\n    }, [ruleSelectType])\n\n    useEffect(() => {\n        Promise.all([\n            useJwt2.getCentralGroup().then(res => {\n                const allGroup = res.data.payload.map(item => {\n                    return {value: item.id, label: item.group_name}\n                })\n                setgroupList(allGroup)\n                setisGroupLoading(false)\n            }).catch(err => {\n                Error(err)\n            }),\n            useJwt2.getServiceList().then(res => {\n                const services = res.data.payload.map(item => {\n                    return {value: item.service_id, label: item.keyword_description || item.service_keyword}\n                })\n                setserviceList(services)\n                setserviceLoading(false)\n            }).catch(err => {\n                Error(err)        \n            })\n        ])\n    }, [])\n\n    const handleChange = (e) => {\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n\n    const handleChangeRule = (selected) => {\n        setruleDetailsInfo(ruleInput)\n        setUserInput({ ...userInput, commissionId: selected.value})\n        setRuledataloading(true)\n        useJwt2.commissionruleDetails({commission_id: selected.value}).then(res => {\n            const row = res.data.payload\n            row.flexiblerules = row.flexiblerules && row.flexiblerules.length ? row.flexiblerules : []\n            const flexibleRules = row.flexiblerules.map(item => {\n                return {\n                    startRange: item['start_range'], \n                    snAmount: item['sn_amount'], \n                    rxAmount: item['rx_amount'], \n                    endRange: item['end_range'],\n    \n                    isPercentage: item['is_percentage'],\n                    max: item['max'],\n                    min: item['min'],\n    \n                    snreward_datapack_groupid: item['snreward_datapack_groupid'], \n                    rxreward_datapack_groupid: item['rxreward_datapack_groupid'], \n    \n                    snreward_voucherid: item['snreward_voucherid'], \n                    rxreward_voucherid: item['rxreward_voucherid']\n                }\n            })\n            const data = {\n    \n                commissionRuleName: row['commission_rule_name'],\n                reward_type: +row['reward_type'],\n                pointExpireDays: +row['point_expire_days'],\n        \n                isFinBasedOffer: row['is_fin_based_offer'],\n                offer_type: +row['offer_type'],\n                offerCount: +row['offer_count'],\n                offerAmount: +row['offer_amount'],\n        \n                target: row['is_target'],\n                target_type: +row['target_type'],\n                target_count: +row['target_count'],\n                target_amount: +row['target_amount'],\n        \n                isQuota: row['is_quota'],\n                quotaType: +row['quota_type'],\n                quotaCount: +row['quota_count'],\n                quotaAmount: +row['quota_amount'],\n        \n                isRxQuota: row['is_rx_quota'],\n                rxQuotaType: +row['rx_quota_type'],\n                rxQuotaCount: +row['rx_quota_count'],\n                rxQuotaAmount: +row['rx_quota_amount'],\n        \n                isCertainTimeline: row['is_certain_timeline'],\n                returnCertainTimelineId: +row['return_certain_timeline_id'],\n                timelineType: row['timeline_type'],\n                isTimelineRange: row['is_timeline_range'],\n                staticTimeline: row['static_timeline'],\n                startTimeline: row['start_timeline'],\n                endTimeline: row['end_timeline'],\n        \n                isTime: row['is_time'],\n                outsideHourCommissionId: row['outside_hour_commission_id'],\n                startHour: row['start_hour'],\n                endHour: row['end_hour'],\n        \n                commissionType: row['commission_type'],\n                isPercentage: row['is_percentage'],\n                snAmount: row['sn_amount'],\n                rxAmount: row['rx_amount'],\n                min: row['min'],\n                max: row['max'],\n                \n                snreward_datapack_groupid: row['snreward_datapack_groupid'],\n                rxreward_datapack_groupid: row['rxreward_datapack_groupid'],\n        \n                snreward_voucherid : row['snreward_voucherid'],\n                rxreward_voucherid : row['rxreward_voucherid'],\n              \n                flexibleRules\n            }\n            console.log('datadatadata => ', data)\n            setruleDetailsInfo(data)\n            setRuledataloading(false)\n\n        }).catch(err => {\n            Error(err)\n        })\n    }\n\n    return (\n        <Fragment>\n               <Row>\n                   <Col md=\"6\">\n                     <Row>\n                        <Col sm=\"8\" >\n                            <FormGroup>\n                                <Label for=\"campaignName\">Campaign Name<span style={{ color: 'red' }}>*</span></Label>\n                                <Input type=\"textarea\"\n                                    rows={2}\n                                    autoFocus={true}\n                                    name=\"campaignName\"\n                                    id='campaignName'\n                                    value={userInput.campaignName}\n                                    onChange={handleChange}\n                                    required\n                                    maxLength='100'\n                                    placeholder=\"name here...\"\n                                    disabled={onlyView}\n                                />\n                                <p className='text-right' style={userInput.campaignName.length === 100 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{100 - userInput.campaignName.length} characters remaining</p>\n                            </FormGroup>\n                        </Col>\n\n                        <Col sm='4' className='mt-2 mb-1'>\n                                    <CustomInput \n                                        type='switch'\n                                        label='Any Service?'\n                                        id='anyservice'\n                                        checked={userInput.anyservice}\n                                        disabled={onlyView}\n                                        onChange= {e => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, anyservice: true})\n                                            } else {\n                                                setUserInput({ ...userInput, anyservice: false})\n                                            }\n                                        }}\n                                    />\n                        </Col>\n                     </Row>\n                  \n                     <Row>\n                     <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"receiver\">Reward Receiver<span style={{ color: 'red' }}>*</span></Label>\n                                <Select\n                                    ref={crRef}\n                                    theme={selectThemeColors}\n                                    maxMenuHeight={200}\n                                    className='react-select'\n                                    classNamePrefix='select'\n                                    defaultValue={\n                                        userInput.receiver ? rewardReceiver.find(({ value }) => (value) === userInput.receiver) : rewardReceiver[0]\n                                    }\n                                    onChange={(selected) => {\n                                            setUserInput({...userInput, receiver: selected.value})\n                                    }}\n                                    isDisabled={onlyView}\n                                    options={rewardReceiver}\n                                />\n                            </FormGroup>\n                            <Input\n                                required\n                                disabled={onlyView}\n                                style={{\n                                    opacity: 0,\n                                    width: \"100%\",\n                                    height: 0\n                                    // position: \"absolute\"\n                                }}\n                                onFocus={e => crRef.current.select.focus()}\n                                value={userInput.receiver || ''}\n                                onChange={e => ''}\n                            />\n                        </Col>\n\n                        {\n                            userInput.receiver === 'b' && <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"receiver\">Reward Priority</Label>\n                                <Select\n                                    isDisabled={onlyView}\n                                    theme={selectThemeColors}\n                                    maxMenuHeight={200}\n                                    className='react-select'\n                                    classNamePrefix='select'\n                                    defaultValue={\n                                        userInput.reward_priority ? rewardPriority.find(({ value }) => (value) === userInput.reward_priority) : rewardPriority[0]\n                                    }\n                                    onChange={(selected) => {\n                                            setUserInput({...userInput, reward_priority: selected.value})\n                                    }}\n                                    options={rewardPriority}\n                                />\n                            </FormGroup>\n                        </Col>\n                        }\n                     </Row>\n                   </Col>\n                    {\n                        !userInput.anyservice && <Col sm=\"6\" >\n                        <FormGroup>\n                            {\n                            !isserviceLoading ? <Card className=\"border p-1\">\n                                 <CardHeader className='border-bottom'>\n                                    <CardTitle tag='h6' style={{fontSize:14}}>Select Services<span style={{ color: 'red' }}>*</span></CardTitle>\n                                    <CardTitle tag='h6'><CustomInput\n                                        type='checkbox'\n                                        id={'All'}\n                                        label={'Select All'}\n                                        disabled={onlyView}\n                                        inline\n                                        checked={userInput.multiService.length === serviceList.length}\n                                        onChange={e => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, multiService: serviceList.map(sr => sr.value), serviceId: serviceList[0]['value']})\n                                            } else {\n                                                setUserInput({ ...userInput, multiService: [], serviceId: null})\n                                            }\n                                        }}\n                                    /></CardTitle>\n                                </CardHeader>\n                                <CardBody className='pt-1 pb-0 overflow-auto' style={{maxHeight: '130px'}}>\n                                {\n                                    serviceList.map(item => <CustomInput\n                                            type='checkbox'\n                                            id={item.value}\n                                            label={item.label}\n                                            disabled={onlyView}\n                                            onChange={ e => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, multiService: [...userInput.multiService, item.value], serviceId: item['value']})\n                                                } else {\n                                                    const newArr = userInput.multiService.filter(i => i !== item.value)\n                                                    setUserInput({ ...userInput, multiService: [...newArr]})\n                                                }\n                                            }}\n                                            checked={userInput.multiService.includes(item.value)}\n                                        />)\n                                }\n                                </CardBody>\n                            </Card> : <BeatLoader color=\"#6610f2\" size={10}/>\n                            }\n                           \n                              <Input\n                                required\n                                disabled={onlyView}\n                                style={{\n                                    opacity: 0,\n                                    width: \"100%\",\n                                    height: 0\n                                    // position: \"absolute\"\n                                }}\n                                onFocus={e => serviceRef.current.select.focus()}\n                                value={userInput.multiService || []}\n                                onChange={e => ''}\n                            />\n                        </FormGroup>\n                    </Col>\n                    }\n\n                        <Col md=\"12\">\n                            <Row>\n                            {\n                            (userInput.receiver === 's' || userInput.receiver === 'b') &&  <Col md=\"6\">\n                            <Card>\n                                <CardHeader>\n                                    <h5>Reward Sender Group</h5>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                    <Col sm='4' className='mt-1 mb-1'>\n                                    <CustomInput \n                                        type='switch'\n                                        label='Any One?'\n                                        id='anygroup'\n                                        checked={userInput.anysendergroup}\n                                        onChange= {e => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, anysendergroup: true})\n                                            } else {\n                                                setUserInput({ ...userInput, anysendergroup: false})\n                                            }\n                                        }}\n                                        disabled={onlyView}\n                                    />\n                                </Col>\n                                {\n                                    !userInput.anysendergroup && <Col sm=\"8\" >\n                                    <FormGroup>\n                                        <Label for=\"Businesses\">Select Sender Group <span style={{ color: 'red' }}>*</span></Label>\n                                       { !isGroupLoading ? <Select\n                                            ref={groupRef}\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            defaultValue={\n                                                userInput.sendergroup ? groupList.find(({ value }) => (+value) === (+userInput.sendergroup)) : null\n                                            }\n                                            classNamePrefix='select'\n                                            onChange={(selected) => {\n                                                if (selected) {\n                                                    setUserInput({...userInput, sendergroup: selected.value})\n                                                } else {\n                                                    setUserInput({...userInput, sendergroup: 0})\n                                                }\n                                            }}\n                                            isDisabled={onlyView}\n                                            options={groupList}\n                                            isLoading={isGroupLoading}\n                                            menuPlacement='top'\n        \n                                        /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                       }\n                                    </FormGroup>\n                                   <Input\n                                         required\n                                         disabled={onlyView}\n                                         style={{\n                                             opacity: 0,\n                                             width: \"100%\",\n                                             height: 0\n                                             // position: \"absolute\"\n                                         }}\n                                         onFocus={e => groupRef.current.select.focus()}\n                                         value={userInput.sendergroup || ''}\n                                         onChange={e => ''}\n        \n                                     />\n                                    \n                                    </Col>\n                                }\n                                \n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        \n                        }\n                          {\n                            (userInput.receiver === 'r' || userInput.receiver === 'b') &&  <Col md=\"6\">\n                            <Card>\n                                <CardHeader>\n                                    <h5>Reward Receiver Group</h5>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                    <Col sm='4' className='mt-1 mb-1'>\n                                    <CustomInput \n                                        type='switch'\n                                        label='Any One?'\n                                        id='anyreceivergroup'\n                                        checked={userInput.anyreceivergroup}\n                                        disabled={onlyView}\n                                        onChange= {e => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, anyreceivergroup: true})\n                                            } else {\n                                                setUserInput({ ...userInput, anyreceivergroup: false})\n                                            }\n                                        }}\n                                    />\n                                </Col>\n                                {\n                                    !userInput.anyreceivergroup && <Col sm=\"8\" >\n                                    <FormGroup>\n                                     <Label for=\"Businesses\">Select Receiver Group <span style={{ color: 'red' }}>*</span></Label>\n                                     {\n                                     !isGroupLoading ? <Select\n                                         ref={groupRef1}\n                                         theme={selectThemeColors}\n                                         maxMenuHeight={200}\n                                         className='react-select'\n                                         classNamePrefix='select'\n                                         defaultValue={\n                                            userInput.receivergroup ? groupList.find(({ value }) => (+value) === (+userInput.receivergroup)) : null\n                                        }\n                                         onChange={(selected) => {\n                                             if (selected) {\n                                                setUserInput({...userInput, receivergroup: selected.value})\n                                             } else {\n                                                setUserInput({...userInput, receivergroup: 0})\n                                             }\n                                         }}\n                                         isDisabled={onlyView}\n                                         options={groupList}\n                                         isLoading={isGroupLoading}\n                                         menuPlacement='top'\n     \n                                     /> : <BeatLoader color=\"#6610f2\" size={10}/> \n                                    }\n                                 </FormGroup>\n                                   <Input\n                                         required\n                                         disabled={onlyView}\n                                         style={{\n                                             opacity: 0,\n                                             width: \"100%\",\n                                             height: 0\n                                             // position: \"absolute\"\n                                         }}\n                                         onFocus={e => groupRef1.current.select.focus()}\n                                         value={userInput.receivergroup || ''}\n                                         onChange={e => ''}\n                                     />\n                             </Col>\n                                }\n                                \n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        \n                        }\n\n                         {\n                                    ruleSelectType === 1 &&  <Col sm=\"6\" >\n                                    <FormGroup>\n                                   <Label for=\"Businesses\">Campaign Rule<span style={{ color: 'red' }}>*</span></Label>\n                                   {\n                                    !isrealtimeRuleLoading ? <Select\n                                       ref={rulRef}\n                                       theme={selectThemeColors}\n                                       maxMenuHeight={200}\n                                       className='react-select'\n                                       classNamePrefix='select'\n                                       onChange={(selected) => handleChangeRule(selected)}\n                                       options={realtimeRuleList}\n                                       isLoading={isrealtimeRuleLoading}\n                                       menuPlacement='top'\n                                       isDisabled={onlyView}\n                                       defaultValue={\n                                        userInput.commissionId ? realtimeRuleList.find(({ value }) => (+value) === (+userInput.commissionId)) : null\n                                       }\n                                   /> : <BeatLoader color=\"#6610f2\" size={10}/> \n                                   }\n                               </FormGroup>\n                               <Input\n                                   required\n                                   disabled={onlyView}\n                                   style={{\n                                       opacity: 0,\n                                       width: \"100%\",\n                                       height: 0\n                                       // position: \"absolute\"\n                                   }}\n                                   onFocus={e => rulRef.current.select.focus()}\n                                   value={userInput.commissionId || ''}\n                                   onChange={e => ''}\n                               />\n                           </Col>\n                        }\n                         <Col md=\"12\">\n                            <Row>\n                            <Col sm='6'>\n                                <Card>\n                                    <CardHeader>SET EXPIRY</CardHeader>\n                                    <CardBody>\n                                        <Row>\n                                        <Col md='6' >\n                                            <FormGroup>\n                                                <Label for=\"startDate\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Input type=\"datetime-local\"\n                                                    min={new Date().toLocaleDateString('fr-CA')}\n                                                    name=\"startDate\"\n                                                    id='startDate'\n                                                    value={userInput.startDate}\n                                                    onChange={e => {\n                                                        const startDate = e.target.value\n                                                        setUserInput({\n                                                            ...userInput,\n                                                            startDate,\n                                                            // Reset endDate if it's before the new startDate\n                                                            endDate: new Date(userInput.endDate) > new Date(startDate) ? userInput.endDate : ''\n                                                        })\n                                                    }}\n                                                    required\n                                                    placeholder='0'\n                                                    disabled={onlyView}\n\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col md='6' >\n                                            <FormGroup>\n                                                <Label for=\"endDate\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Input type=\"datetime-local\"\n                                                    min={new Date().toISOString().slice(0, 16)}\n                                                    name=\"endDate\"\n                                                    id='endDate'\n                                                    value={userInput.endDate}\n                                                    onChange={e => {\n                                                        const endDate = e.target.value\n                                                        setUserInput({\n                                                            ...userInput,\n                                                            endDate,\n                                                            // Reset endDate if it's before the new startDate\n                                                            startDate: new Date(endDate) > new Date(userInput.startDate) ? userInput.startDate : ''\n                                                        })\n                                                    }}\n                                                    required\n                                                    placeholder='0'\n                                                    disabled={onlyView}\n\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n\n                            <Col md=\"6\">\n                            <Card>\n                                <CardHeader>\n                                    <h5>Dynamic Campaign</h5>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                    <Col sm='6' className='mt-1 mb-1'>\n                                    <CustomInput \n                                        type='switch'\n                                        label='Is Dynamic Campaign?'\n                                        id='dynamiccampaign'\n                                        checked={userInput.isDynamicCamp}\n                                        onChange= {e => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, isDynamicCamp: true})\n                                            } else {\n                                                setUserInput({ ...userInput, isDynamicCamp: false})\n                                            }\n                                        }}\n                                        disabled={onlyView}\n\n                                    />\n                                </Col>\n                                {\n                                    userInput.isDynamicCamp && <Col sm=\"6\" >\n                                         <FormGroup>\n                                        <Label for=\"Businesses\">Enter Campaign Expire(Days) <span style={{ color: 'red' }}>*</span></Label>\n                                        <Input type=\"number\"\n                                            name=\"dynamicCampExpire\"\n                                            id=\"dynamicCampExpire\"\n                                            value={userInput.dynamicCampExpire}\n                                            onChange={handleChange}\n                                            required\n                                            placeholder='0'\n                                            onWheel={(e) => e.target.blur()}\n                                            disabled={onlyView}\n\n                                        />\n                                        </FormGroup>\n                                    </Col>\n                                }\n                                \n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                            </Row>\n                         </Col>\n\n                            </Row>\n                        </Col>\n                      \n                    \n        </Row>\n        </Fragment>\n    )\n    \n}\n\nexport default CampaignLogic","import { Fragment, useState } from 'react'\nimport { ArrowLeft, ArrowRight } from 'react-feather'\nimport { Label, FormGroup, Row, Col, CustomInput,  Input, Form, Button, Card, CardBody } from 'reactstrap'\nimport RealTimeCommisionRuleLogic from '../RealTimeCommisionRule/RealTimeCommisionRuleLogic'\nimport { RuleDataReFormat } from '../RealTimeCommisionRule/RuleDataReFormat'\n\nconst OnlineRuleCreateOrSelect = ({ setrerender, setCreateRule, stepper, type, setruleSelectType, ruleSelectType, setruleInfo }) => {\n\n    const [isComponentLoaded, setIsComponentLoaded] = useState(false)\n\n    const handleButtonClick = (id) => {\n        setruleSelectType(id)\n        if (!isComponentLoaded) {\n          setIsComponentLoaded(true)\n        }\n\n        if (id === 1) {\n          setCreateRule(false)\n        }\n    }\n\n    // const [userInput, setUserInput] = useState({\n\n    //     reward_type: 0,\n\n    //     isFinBasedOffer: false,\n    //     offer_type: 1,\n    //     offerCount: 0,\n    //     offerAmount: 0,\n\n    //     target: false,\n    //     target_type: 1,\n    //     target_count: 0,\n    //     target_amount: 0,\n\n    //     isQuota: false,\n    //     quotaType: 0,\n    //     quotaCount: 0,\n    //     quotaAmount: 0,\n\n\n    //     is_voucher_reward: false,\n    //     reward_voucherid: null,\n    //     commissionRuleName: '',\n    //     statusFlag: false,\n    //     isDefault: false,\n    //     isPoint: false,\n    //     startDate: '',\n    //     endDate: '',\n    //     isCertainTimeline: false,\n    //     timelineType: ' ',\n    //     isTimelineRange: false,\n    //     staticTimeline: 0,\n    //     startTimeline: 0,\n    //     endTimeline: 0,\n    //     isTime: false,\n    //     startHour: ' ',\n    //     endHour: ' ',\n    //     commissionType: 'fixed',\n    //     snAmount: 0,\n    //     rxAmount: 0,\n    //     isPercentage: false,\n    //     min: 0,\n    //     max: 0,\n \n    //     isRxQuota: false,\n    //     rxQuotaType: 0,\n    //     rxQuotaCount: 0,\n    //     rxQuotaAmount: 0,\n    //     flexibleRules: [],\n    //     returnCommissionId: 0,\n    //     outsideHourCommissionId: 0,\n    //     returnCertainTimelineId: 0,\n    //     isDailyOffer: false,\n    //     pointExpireDays: 365,\n    //     is_voucher_reward: false,\n    //     snreward_voucherid : \"\",\n    //     rxreward_voucherid : \"\",\n    //     is_datapack_reward: false,\n    //     snreward_datapack_groupid : \"\",\n    //     rxreward_datapack_groupid : \"\"\n    // })\n    const [cashbackFlexibleData, setCashbackFlexibleData] = useState([{ startRange: 0, isPercentage: false }])\n    const [voucherFlexibleData, setVoucherFlexibleData] = useState([{ startRange: 0 }])\n    const [datapackFlexibleData, setDatapackFlexibleData] = useState([{ startRange: 0 }])\n    const [pointFlexibleData, setPointFlexibleData] = useState([{ startRange: 0 }])\n\n    const [userInput, setUserInput] = useState({\n\n        commissionRuleName: '',\n        reward_type: 0,\n        pointExpireDays: 365,\n\n        isFinBasedOffer: false,\n        offer_type: 1,\n        offerCount: 0,\n        offerAmount: 0,\n\n        target: false,\n        target_type: 1,\n        target_count: 0,\n        target_amount: 0,\n\n        isQuota: false,\n        quotaType: 0,\n        quotaCount: 0,\n        quotaAmount: 0,\n\n        isRxQuota: false,\n        rxQuotaType: 0,\n        rxQuotaCount: 0,\n        rxQuotaAmount: 0,\n\n        isTime: false,\n        startHour: ' ',\n        endHour: ' ',\n\n        is_voucher_reward: false,\n        reward_voucherid: null,\n        statusFlag: false,\n        isDefault: false,\n        isPoint: false,\n        startDate: '',\n        endDate: '',\n        isCertainTimeline: false,\n        timelineType: ' ',\n        isTimelineRange: false,\n        staticTimeline: 0,\n        startTimeline: 0,\n        endTimeline: 0,\n        commissionType: 'fixed',\n        snAmount: 0,\n        rxAmount: 0,\n        isPercentage: false,\n        min: 0,\n        max: 0,\n \n        flexibleRules: [],\n        returnCommissionId: 0,\n        outsideHourCommissionId: 0,\n        returnCertainTimelineId: 0,\n        isDailyOffer: false,\n        is_voucher_reward: false,\n        snreward_voucherid : \"\",\n        rxreward_voucherid : \"\",\n        is_datapack_reward: false,\n        snreward_datapack_groupid : \"\",\n        rxreward_datapack_groupid : \"\"\n    })\n\n    const onSubmit = (e) => {\n      const flexibleData = {\n        cashbackFlexibleData,\n        voucherFlexibleData,\n        datapackFlexibleData,\n        pointFlexibleData\n      }\n      const finalRequestData = RuleDataReFormat(userInput, flexibleData)\n\n        e.preventDefault()\n        setruleInfo(finalRequestData)\n        setCreateRule(true)\n        setrerender(true)\n        stepper.next()\n    }\n\n    console.log('ruleSelectType ==> ', ruleSelectType)\n  return (\n    <Fragment>\n      <Form onSubmit={onSubmit} autoComplete=\"off\">\n        \n        <Card>\n            <CardBody>\n              <div class=\"row onlineruleselectorcreate\">\n                <div class=\"col-md mb-md-0 mb-2\">\n                    <div class=\"form-check custom-option custom-option-basic checked\">\n                    <label class=\"form-check-label custom-option-content\" for=\"customRadioTemp1\">\n                       <CustomInput \n                        type='radio' \n                        id='customRadioTemp1' \n                        name='customRadioTemp' \n                        inline \n                        label='Online-Rule' \n                        defaultChecked \n                        onChange={() => handleButtonClick(1)}\n                       />\n\n                        {/* <input name=\"customRadioTemp\" class=\"form-check-input\" type=\"radio\" value=\"\" id=\"customRadioTemp1\" checked=\"true\" /> */}\n                        <span class=\"custom-option-header\">\n                        {/* <span class=\"h6 mb-0\">Online-Rule</span> */}\n                        </span>\n                        <span class=\"custom-option-body\">\n                        <small>Online Rule From Created List</small>\n                        </span>\n                    </label>\n                    </div>\n                </div>\n                <div class=\"col-md\">\n                    <div class=\"form-check custom-option custom-option-basic\">\n                    <label class=\"form-check-label custom-option-content\" for=\"customRadioTemp2\">\n                        <CustomInput \n                            type='radio' \n                            id='customRadioTemp2' \n                            name='customRadioTemp' \n                            inline \n                            label='Create Online-Rule' \n                            onChange={() => handleButtonClick(2)}\n\n                        />\n                        {/* <input name=\"customRadioTemp\" class=\"form-check-input\" type=\"radio\" value=\"\" id=\"customRadioTemp2\" /> */}\n                        <span class=\"custom-option-header\">\n                        {/* <span class=\"h6 mb-0\">Create Online-Rule</span> */}\n                        </span>\n                        <span class=\"custom-option-body\">\n                        <small>Create New Online-Rule From Here</small>\n                        </span>\n                    </label>\n                    </div>\n                </div>\n                </div>\n            </CardBody>\n        </Card>\n\n        {isComponentLoaded && (\n            <div style={{ display: ruleSelectType === 2 ? 'block' : 'none' }}>\n                 <RealTimeCommisionRuleLogic \n                    userInput={userInput}\n                    setUserInput={setUserInput}\n                    cashbackFlexibleData={cashbackFlexibleData}\n                    setCashbackFlexibleData={setCashbackFlexibleData}\n                    voucherFlexibleData={voucherFlexibleData}\n                    setVoucherFlexibleData={setVoucherFlexibleData}\n\n                    datapackFlexibleData={datapackFlexibleData}\n                    setDatapackFlexibleData={setDatapackFlexibleData}\n                    pointFlexibleData={pointFlexibleData}\n                    setPointFlexibleData={setPointFlexibleData}\n                    onlyView={false}\n                />\n            </div>\n        )}\n    \n        <div className='d-flex justify-content-between'>\n          {/* <Button.Ripple color='secondary' className='btn-prev' outline disabled>\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\n          </Button.Ripple> */}\n          <div></div>\n          {\n            ruleSelectType === 2 ? <Button.Ripple color='primary' className='btn-next' type=\"submit\" >\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\n          </Button.Ripple> :  <Button.Ripple color='primary' className='btn-next' onClick={() => {\n            setrerender(true)\n            stepper.next()\n          }} type=\"button\" >\n            <span className='align-middle d-sm-inline-block d-none'>Next</span>\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\n          </Button.Ripple>\n          }\n        </div>\n      </Form>\n    </Fragment>\n  )\n}\n\nexport default OnlineRuleCreateOrSelect","import useJwt from '@src/auth/jwt/useJwt'\nimport useJwt2 from '@src/auth/jwt/useJwt2'\n\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useRef, useState } from 'react'\nimport { ArrowLeft, ArrowRight } from 'react-feather'\nimport { Link, useHistory } from 'react-router-dom'\nimport Select from 'react-select'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport jwtDefaultConfig from '../../../../../../@core/auth/jwt/jwtDefaultConfig'\nimport { BMS_PASS1, BMS_USER1 } from \"../../../../../../Configurables\"\nimport { formatReadableDate } from '../../../../../helper'\nimport { Error, Success } from '../../../../../viewhelper'\nimport CommonDataTable from '../ClientSideDataTable'\nimport CampaignLogic from './campaignLogic'\nimport RealTimeCommisionRuleLogic from '../RealTimeCommisionRule/RealTimeCommisionRuleLogic'\nimport {BeatLoader} from \"react-spinners\"   \n\nconst MySwal = withReactContent(Swal)\n\n\nconst CreateCampaignLogic = ({ setrerender, rerender, setruleDetailsInfo, ruleDetailsInfo, stepper, createRule, setCreateRule, type, ruleInfo, setruleInfo, ruleSelectType }) => {\n\n    const history = useHistory()\n\n    const [pointRuleloading, setPointRuleloading] = useState(false)\n    const [ruleDataLoading, setRuledataloading] = useState(false)\n\n    const [cashbackFlexibleData, setCashbackFlexibleData] = useState([{ startRange: 0, isPercentage: false }])\n    const [voucherFlexibleData, setVoucherFlexibleData] = useState([{ startRange: 0 }])\n    const [datapackFlexibleData, setDatapackFlexibleData] = useState([{ startRange: 0 }])\n    const [pointFlexibleData, setPointFlexibleData] = useState([{ startRange: 0 }])\n    const [ruleInfobackup, setruleInfobackup] = useState({...ruleInfo})\n    /**\n     * anyservice = true then multiService = [1]\n     * anysendergroup = true then sendergroup = 1\n     * anyreceivergroup = true then receivergroup = 1\n     * / startDate = startDate.replace(/T/, ' ')\n    //     // endDate = endDate.replace(/T/, ' ')\n     */\n\n    const [userInput, setUserInput] = useState({\n        campaignName: '',\n        anyservice: false,\n        multiService: [],\n\n        receiver: 's',\n        anysendergroup: false,\n        sendergroup: 0,\n        anyreceivergroup: false,\n        receivergroup: 0,\n\n        reward_priority:'s',\n\n        commissionId: 0,\n\n        startDate: \"\",\n        endDate: \"\",\n\n        isDynamicCamp: false,\n        dynamicCampExpire: 0\n    })\n\n    // const [userInput, setUserInput] = useState({\n    //     campaignName: 'test camp',\n    //     anyservice: true,\n    //     multiService:  ['133127', '369820'],\n\n    //     receiver: 'b',\n    //     anysendergroup: true,\n    //     sendergroup: 101,\n    //     anyreceivergroup: true,\n    //     receivergroup: 101,\n\n    //     reward_priority:'r',\n\n    //     commissionId: 43,\n\n    //     startDate: \"2024-05-29T15:49\",\n    //     endDate: \"2024-05-31T15:49\",\n\n    //     isDynamicCamp: true,\n    //     dynamicCampExpire: 110\n    // })\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n\n        /**\n         * ruleSelectType = 1 => select from created rule ruleSelectType = 2 => create rule with campaign\n         */\n        const data = {\n            ruleSelectType,\n            onlineRuleInfo: ruleSelectType === 1 ? {} : ruleInfo,\n            campaignName: userInput.campaignName,\n            anyservice : userInput.anyservice,\n            multiService: userInput.anyservice ? [1] : userInput.multiService,\n\n            receiver: userInput.receiver,\n            anysendergroup: userInput.anysendergroup,\n            sendergroup: userInput.anysendergroup ? 1 : userInput.sendergroup,\n            anyreceivergroup: userInput.anyreceivergroup,\n            receivergroup: userInput.anyreceivergroup ? 1 : userInput.receivergroup,\n    \n            reward_priority: userInput.reward_priority,\n    \n            commissionId: ruleSelectType === 1 ? userInput.commissionId : 0,\n    \n            startDate: userInput.startDate,\n            endDate: userInput.endDate,\n    \n            isDynamicCamp: userInput.isDynamicCamp,\n            dynamicCampExpire: userInput.dynamicCampExpire\n        }\n        setPointRuleloading(true)\n        useJwt2.onlineCampaignCreate(data).then(response => {\n\n            setPointRuleloading(false)\n            Success(response)\n            history.push('/allCampaigns')\n\n        }).catch(err => {\n                Error(err)\n                setPointRuleloading(false)\n            })\n    }\n\n    useEffect(() => {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth'\n          })    \n    }, [rerender])\n\n  return (\n    <Fragment>\n      <div className='content-header'>\n        <h5 className='mb-0'>Campaign Details</h5>\n        <small className='text-muted'>Enter Your Campaign Details.</small>\n      </div>\n      <Form onSubmit={onSubmit} autoComplete=\"off\">\n\n        <CampaignLogic \n           userInput={userInput}\n           setUserInput={setUserInput}\n           ruleSelectType={ruleSelectType}\n           onlyView={false}\n           setruleInfobackup={setruleInfobackup}\n           setRuledataloading={setRuledataloading}\n           setruleDetailsInfo={setruleDetailsInfo}\n           ruleDetailsInfo={ruleDetailsInfo}\n        />\n        {\n            rerender ? <Fragment>\n                { (ruleSelectType === 2 && createRule) || (userInput.commissionId && !ruleDataLoading) ? <Card style={{border: '2px solid #f2b9b9'}} className=\"RealTimeCommisionRuleLogicViewInCampaignPage\">\n                    <CardBody className=\"cardBody\">\n                        <CardHeader className=\"cardHeader\" >\n                            <CardTitle>\n                                Online Rule Info\n                            </CardTitle>\n                        </CardHeader>\n                        <RealTimeCommisionRuleLogic \n                            userInput={ruleSelectType === 2 && createRule ? ruleInfo : ruleDetailsInfo}\n                            setUserInput={setruleInfobackup}\n                            cashbackFlexibleData={cashbackFlexibleData}\n                            setCashbackFlexibleData={setCashbackFlexibleData}\n                            voucherFlexibleData={voucherFlexibleData}\n                            setVoucherFlexibleData={setVoucherFlexibleData}\n\n                            datapackFlexibleData={datapackFlexibleData}\n                            setDatapackFlexibleData={setDatapackFlexibleData}\n                            pointFlexibleData={pointFlexibleData}\n                            setPointFlexibleData={setPointFlexibleData}\n                            onlyView={true}\n                        />\n                    \n                    </CardBody>\n                </Card> :  null\n                }\n            </Fragment> : null\n        }\n        {\n            ruleDataLoading && <BeatLoader color=\"#6610f2\" size={10}/>\n        }\n        \n        <div className='d-flex justify-content-between'>\n          {/* <Button.Ripple color='primary' className='btn-prev' onClick={() => {\n                setCreateRule(false)\n                setrerender(false)\n                stepper.previous()\n            }}>\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\n          </Button.Ripple> */}\n          <div></div>\n          {\n            pointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                <Spinner color='white' size='sm' />\n                <span className='ml-50'>Loading...</span>\n            </Button.Ripple> :  <Button.Ripple color='primary' className='btn-next' type=\"submit\">\n            <span className='align-middle d-sm-inline-block d-none'>Submit</span>\n            <ArrowRight size={14} className='align-middle ml-sm-25 ml-0'></ArrowRight>\n          </Button.Ripple>\n          }\n         \n        </div>\n\n      </Form>\n    </Fragment>\n  )\n}\n\nexport default CreateCampaignLogic","\nimport React, { Fragment, useEffect, useRef, useState } from 'react'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport Wizard from '@components/wizard'\nimport { Link, useHistory } from 'react-router-dom'\nimport { ChevronLeft, ArrowLeft } from 'react-feather'\nimport OnlineRuleCreateOrSelect from './online-rule'\nimport CreateCampaignLogic from './CreateCampaign'\n\nconst SelectOrCreateRule = () => {\n\n    const history = useHistory()\n    const [stepper, setStepper] = useState(null)\n    const ref = useRef(null)\n    const ref2 = useRef(null)\n\n    const [rerender, setrerender] = useState(false)\n    const [ruleSelectType, setruleSelectType] = useState(1)\n    const [createRule, setCreateRule] = useState(false)\n    const [ruleInfo, setruleInfo] = useState({\n\n      commissionRuleName: '',\n      reward_type: 0,\n      pointExpireDays: 365,\n\n      isFinBasedOffer: false,\n      offer_type: 1,\n      offerCount: 0,\n      offerAmount: 0,\n\n      target: false,\n      target_type: 1,\n      target_count: 0,\n      target_amount: 0,\n\n      isQuota: false,\n      quotaType: 0,\n      quotaCount: 0,\n      quotaAmount: 0,\n\n      isRxQuota: false,\n      rxQuotaType: 0,\n      rxQuotaCount: 0,\n      rxQuotaAmount: 0,\n\n      isTime: false,\n      startHour: ' ',\n      endHour: ' ',\n\n      is_voucher_reward: false,\n      reward_voucherid: null,\n      statusFlag: false,\n      isDefault: false,\n      isPoint: false,\n      startDate: '',\n      endDate: '',\n      isCertainTimeline: false,\n      timelineType: ' ',\n      isTimelineRange: false,\n      staticTimeline: 0,\n      startTimeline: 0,\n      endTimeline: 0,\n      commissionType: 'fixed',\n      snAmount: 0,\n      rxAmount: 0,\n      isPercentage: false,\n      min: 0,\n      max: 0,\n\n      flexibleRules: [],\n      returnCommissionId: 0,\n      outsideHourCommissionId: 0,\n      returnCertainTimelineId: 0,\n      isDailyOffer: false,\n      is_voucher_reward: false,\n      snreward_voucherid : \"\",\n      rxreward_voucherid : \"\",\n      is_datapack_reward: false,\n      snreward_datapack_groupid : \"\",\n      rxreward_datapack_groupid : \"\"\n    })\n    const [ruleDetailsInfo, setruleDetailsInfo] = useState(ruleInfo)\n\n\n    const steps = [\n        {\n          id: 'select-rule',\n          title: 'Online Rule Info',\n          subtitle: 'Select or create online rule',\n          content: <OnlineRuleCreateOrSelect \n            stepper={stepper} \n            type='wizard-horizontal' \n            setruleSelectType={setruleSelectType} \n            ruleSelectType={ruleSelectType}\n            setruleInfo={setruleInfo}\n            setCreateRule={setCreateRule}\n            setrerender={setrerender}\n          />\n        },\n        {\n          id: 'campaign-info',\n          title: 'Campaign Info',\n          subtitle: 'Add Campaign Info',\n          content: <CreateCampaignLogic \n            stepper={stepper} \n            type='wizard-horizontal' \n            setruleSelectType={setruleSelectType} \n            ruleSelectType={ruleSelectType} \n            ruleInfo={ruleInfo}\n            setruleInfo={setruleInfo}\n            createRule={createRule}\n            setruleDetailsInfo={setruleDetailsInfo}\n            ruleDetailsInfo={ruleDetailsInfo}\n            setCreateRule={setCreateRule}\n            setrerender={setrerender}\n            rerender={rerender}\n          />\n        }\n    ]\n     \n\n    return (\n        <Fragment>\n          {\n            (stepper?._currentIndex || 0) === 0 ?  <Button.Ripple className='mb-1' color='primary' tag={Link} to='/allCampaigns' >\n            <div className='d-flex align-items-center'>\n                <ChevronLeft size={17} style={{marginRight:'5px'}}/>\n                <span >Back</span>\n            </div>\n        </Button.Ripple> :  <Button.Ripple color='primary' className='btn-prev mb-1' onClick={() => {\n                setCreateRule(false)\n                setrerender(false)\n                stepper.previous()\n            }}>\n            <ArrowLeft size={14} className='align-middle mr-sm-25 mr-0'></ArrowLeft>\n            <span className='align-middle d-sm-inline-block d-none'>Previous</span>\n          </Button.Ripple>\n          }\n           \n          <Row>\n              <Col sm='12'>\n                  <div className='horizontal-wizard'>\n                    <Wizard \n                      instance={el => setStepper(el)} \n                      ref={ref} \n                      steps={steps} \n                      options={{ linear: true }}\n                    />\n                  </div>\n              </Col>\n          </Row>\n        </Fragment>\n    )\n}\n\nexport default SelectOrCreateRule","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import moment from 'moment'\n\n//Ex-> '1234567891' to '1234 567 891'\nexport const FormatePhoneNo = (phone) => {\n    const phonenoinstring = String(phone)\n    return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\n}\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\n\nexport const getHumanReadableDate = (datetime) => { \n    // let datetime = '2024-06-18T23:25:06.754Z'\n    // let datetime = '2024-07-25 00:05:57.358246+06'\n\n    // Remove the 'Z' at the end if it exists\n    if (datetime.endsWith('Z')) {\n        datetime = datetime.slice(0, -1)\n    }\n    // Find the position of the '+' sign\n    const plusIndex = datetime.indexOf('+')\n\n    // Remove the time zone offset if it exists\n    if (plusIndex !== -1) {\n        datetime = datetime.slice(0, plusIndex)\n    }\n\n    return moment(datetime).format('MMMM D, YYYY [at] h:mm A')\n }\n\nexport const validateEmail = (email) => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n}\n\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }\n\nexport const handle401 = async (status) => {\n    if (status === 401) {\n        window.location.href = '/Adminlogin'\n        await localStorage.clear()\n    }\n}\n\nexport const ExportCSV = (array, keys, CSVname) => {\n    // ** Downloads CSV\n    // const keys = ['name', 'email', 'mobile']\n    // ** Converts table to CSV\n    function convertArrayOfObjectsToCSV(array) {\n        let result\n        const columnDelimiter = ','\n        const lineDelimiter = '\\n'\n        result = ''\n        result += keys.join(columnDelimiter)\n        result += lineDelimiter\n\n        array.forEach(item => {\n            let ctr = 0\n            keys.forEach(key => {\n                if (ctr > 0) result += columnDelimiter\n                result += item[key]\n                ctr++\n            })\n            result += lineDelimiter\n        })\n        return result\n    }\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n    const userData = JSON.parse(localStorage.getItem('userData'))\n    const filename = `${CSVname}_${new Date().toISOString()}_${userData['fullname'].replaceAll(/\\s/g, '')}.csv`\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n}","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n\n            <DataTable\n                noHeader\n                pagination\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n                pointerOnHover\n                highlightOnHover\n                striped\n            />\n             \n        </Fragment>\n    )\n}\n\nexport default CommonDataTable","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                columns={column}\n                className='react-dataTable realtimecomissionflaxiabletable'\n                sortIcon={<ChevronDown size={10} />}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable","import useJwt2 from '@src/auth/jwt/useJwt2'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useMemo, useRef, useState } from 'react'\nimport { ChevronLeft, Minus, Plus, Info } from 'react-feather'\nimport Select from 'react-select'\nimport { UncontrolledPopover, PopoverHeader, PopoverBody, Button, Card, CardBody, InputGroup, InputGroupAddon, InputGroupText, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport { Error, Success } from '../../../../../viewhelper'\nimport {BeatLoader} from \"react-spinners\"   \nimport CommonDataTable from '../DataTable'\nimport './rStyle.css'\n\nconst conditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst rewardConditionTypes = [\n    { value: 1, label: 'On Reward Count' }, \n    { value: 2, label: 'On Reward Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst cumulativeConditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' },\n    { value: 5, label: 'Per Transaction' },\n    { value: 6, label: 'Top Transaction' }\n]\n\nconst weekDaysName = [\n    { value: 1, label: 'Monday' }, \n    { value: 2, label: 'Tuesday' }, \n    { value: 3, label: 'Wednesday' }, \n    { value: 4, label: 'Thursday' }, \n    { value: 5, label: 'Friday' },\n    { value: 6, label: 'Saturday' }, \n    { value: 7, label: 'Sunday' }\n]\n\nconst monthDays = [...Array(31)].map((_, i) => {\n    return {value: i + 1, label: `${i + 1}`}\n})\n\nconst RealTimeCommisionRuleLogic = ({\n    setUserInput, \n    userInput,\n\n    cashbackFlexibleData:tableData,\n    setCashbackFlexibleData:setTableData,\n    voucherFlexibleData:tableData1,\n    setVoucherFlexibleData:setTableData1,\n\n    datapackFlexibleData:tableData2,\n    setDatapackFlexibleData:setTableData2,\n    pointFlexibleData:tableData3,\n    setPointFlexibleData:setTableData3,\n\n    onlyView\n\n}) => {\n\n    const isFirstRender = useRef(true)\n\n    const rewardTypeRef = useRef()\n    const ref1 = useRef()\n    const srRef = useRef()\n    const rrRef = useRef()\n\n    const recurringStartDateRef = useRef()\n    const recurringEndDateRef = useRef()\n    const recurringSpecificDateRef = useRef()\n\n\n    // const [tableData, setTableData] = useState([{ startRange: 0, isPercentage: false }])\n    // const [tableData1, setTableData1] = useState([{ startRange: 0 }])\n    // const [tableData2, setTableData2] = useState([{ startRange: 0 }])\n    // const [tableData3, setTableData3] = useState([{ startRange: 0 }])\n\n    const [commissionRuleList, setcommissionRuleList] = useState([])\n    const [isCommissionRuleListLoading, setCommissionRuleListLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [voucherList, setVoucherList] = useState([])\n    const [isVoucherListLoading, setVoucherListLoading] = useState(true)\n    const [datapackList, setDatapackList] = useState([])\n    const [isDatapackLoading, setDatapackLoading] = useState(true)\n    const [campaignRewardType, setcampaignRewardType] = useState([])\n    const [campaignRewardTypeValueOption, setcampaignRewardTypeValueOption] = useState({})\n    const [quotaConditionTypes, setquotaConditionTypes] = useState(rewardConditionTypes)\n    const [campaignQuotaValue, setcampaignQuotaValue] = useState({})\n    const [campaignReceiverQuotaValue, setcampaignReceiverQuotaValue] = useState({})\n\n    const [needRefresh, setneedRefresh] = useState(0)\n\n    console.log('isVoucherListLoading => ', isVoucherListLoading)\n\n    const handleChange = (e) => {\n        // console.log(e.target.value)\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n    const handleChange1 = (e, index) => {\n        tableData[index] = { ...tableData[index], [e.target.name]: e.target.value }\n        setTableData([...tableData])\n    }\n    const handleChange2 = (e, index) => {\n        tableData1[index] = { ...tableData1[index], [e.target.name]: e.target.value }\n        setTableData1([...tableData1])\n    }\n    const handleChange3 = (e, index) => {\n        tableData2[index] = { ...tableData2[index], [e.target.name]: e.target.value }\n        setTableData2([...tableData2])\n    }\n    const handleChange4 = (e, index) => {\n        tableData3[index] = { ...tableData3[index], [e.target.name]: e.target.value }\n        setTableData3([...tableData3])\n    }\n\n    const getVoucherList = () => {\n        useJwt2.pmsVoucher().then(res => {\n            setVoucherList(res.data.payload.map(i => { return {value: i.voucherid, label: i.title} }))\n            setVoucherListLoading(false)\n        }).catch(err => {\n            setVoucherListLoading(false)\n            Error(err)\n        })\n    }\n\n    const getDatapack = () => {\n        useJwt2.datapackGroupList().then(res => {\n            setDatapackList(res.data.payload.map(i => { return {value: i.id, label: i.group_title} }))\n            setDatapackLoading(false)\n        }).catch(err => {\n            setDatapackLoading(false)\n            Error(err)\n        })\n    }\n\n    const getCampaignRule = () => {\n        // campaignListDropdown\n        useJwt2.commissionListDropdown().then(res => {\n            setcommissionRuleList(res.data.payload.map(i => { return {value: i.commission_id, label: i.commission_rule_name} }))\n            setCommissionRuleListLoading(false)\n        }).catch(err => {\n            setCommissionRuleListLoading(false)\n            Error(err)\n        })\n    }\n\n    const resetQuotaSelectedValues = () => {\n        setcampaignQuotaValue(rewardConditionTypes[0])\n        setcampaignReceiverQuotaValue(rewardConditionTypes[0])\n        setUserInput({...userInput, quotaType: 1, rxQuotaType: 1})\n    }\n    const recurringTypeOnChange = (selected) => {\n        let staticTimeline = null, startTimeline = null, endTimeline = null\n        if (selected.value === 'm') {\n           if (!userInput.isTimelineRange) {\n            staticTimeline = 1\n            startTimeline = null\n            endTimeline = null\n           } else {\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n           }\n            \n        } else {\n\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n        }\n\n        setUserInput({ \n            ...userInput, \n            timelineType: selected.value,\n            staticTimeline,\n            startTimeline,\n            endTimeline\n        })\n    }\n\n    // rewardlist....\n    useEffect(() => {\n        const rewardTypeid = userInput.reward_type\n        if (isFirstRender.current) {\n            // Skip the effect on the initial render\n            isFirstRender.current = false\n            switch (rewardTypeid) {\n                // Voucher...\n                case 1 :\n                    getVoucherList()\n                    break\n    \n                // Data-pack....\n                case 2 :\n                    getDatapack()\n                    break\n            }\n            return\n        }\n        switch (rewardTypeid) {\n            // Voucher...\n            case 1 :\n                if (!voucherList.length) {\n                    getVoucherList()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Data-pack....\n            case 2 :\n                if (!datapackList.length) {\n                    getDatapack()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Point....\n            case 3 :\n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // cash-back..\n            case 4 : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // There have no other option..\n            default : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n        }\n    }, [userInput.reward_type])\n\n    useEffect(() => {\n        useJwt2.campaignRewardType().then(res => {\n            const data = res.data.payload.map(item => {\n                return { value: item['reward_id'], label:item['reward_type_name']}\n            })\n            setcampaignRewardType(data)\n            if (data.length) {\n                if (userInput.reward_type > 0) {\n                    const rewardTypeObj = data.find(({ value }) => value === userInput.reward_type)\n                    if (rewardTypeObj) {\n                        setcampaignRewardTypeValueOption(rewardTypeObj)\n                    } else {\n                        setUserInput({ ...userInput, reward_type: 0})\n                    }\n                } else {\n                    const rewardTypeFirstValue = data[0].value \n                    setUserInput({ ...userInput, reward_type: rewardTypeFirstValue})\n                    setcampaignRewardTypeValueOption(data[0])\n                }\n            }\n\n          }).catch(err => {\n            Error(err)\n        })\n\n        // Set some default values...\n        if (userInput.quotaType > 0) {\n            setcampaignQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.quotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n        // setcampaignReceiverQuotaValue\n        if (userInput.rxQuotaType > 0) {\n            setcampaignReceiverQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.rxQuotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n\n        console.log('userInput.flexibleRulesuserInput.flexibleRules ==>>', userInput.flexibleRules)\n        switch (userInput.reward_type) {\n            case 1 :\n                setTableData1(userInput.flexibleRules)\n                break\n\n            case 2 :\n                setTableData2(userInput.flexibleRules)\n                break\n\n            case 3 :\n                setTableData3(userInput.flexibleRules)\n                break\n\n            case 4 :\n                setTableData(userInput.flexibleRules)\n                break\n        }\n        setneedRefresh(needRefresh + 1)\n    }, [])\n\n    useEffect(() => {\n        if (!commissionRuleList.length && (userInput.isCertainTimeline || userInput.isTime)) {\n            getCampaignRule()\n        }\n    }, [userInput.isCertainTimeline, userInput.isTime])\n\n    // Cash-back\n    const column = useMemo(() => [\n        {\n            name: 'Reward Condition',\n            minWidth: '150px',\n            cell: (Row, index) => {\n                return <Select ClassName='wid-100'\n                    theme={selectThemeColors}\n                    maxMenuHeight={200}\n                    className='react-select'\n                    classNamePrefix='select'\n                    value={{ value: tableData[index]?.isPercentage, label: tableData[index]?.isPercentage ? 'Percentage' : tableData[index]?.isPercentage === undefined ? 'select' : 'Flat' }}\n                    onChange={(selected) => {\n                        if (selected.value) {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value }\n                            setTableData([...tableData])\n                        } else {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value, min: 0.00, max: 0.00 }\n                            setTableData([...tableData])\n                        }\n\n                    }}\n                    isDisabled={onlyView}\n                    options={[{ value: true, label: 'Percentage' }, { value: false, label: 'Flat' }]}\n                />\n            }\n        },\n        {\n            name: 'Sender Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                    <InputGroup>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData[index].snAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n\n                    /> \n                    {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                      \n                    </InputGroup>\n                    {(error && !tableData[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                     <InputGroup>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData[index].rxAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n                    />\n                     {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                    </InputGroup>\n                    {(error && !tableData[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData[index].startRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData[index].endRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Minimum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"min\"\n                        id={`${index}min`}\n                        value={tableData[index].min}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].min) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].min) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Min commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Maximum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"max\"\n                        id={`${index}max`}\n                        value={tableData[index].max}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].max) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={tableData[index].min || 0.01}\n                        step={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].max) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Max commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <Fragment>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData[index].snAmount && tableData[index].rxAmount && tableData[index].startRange && tableData[index].endRange && ((!tableData[index].isPercentage && (!tableData[index].min && !tableData[index].max)) || (tableData[index].isPercentage && (tableData[index].min && tableData[index].max)))) {\n                                    setTableData([...tableData, { startRange: parseFloat(tableData[index].endRange) + 0.01, isPercentage: false }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData.splice(index, 1)\n                                setTableData([...tableData])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </Fragment>\n            }\n        }\n    ], [tableData.length, userInput.commissionType, error, needRefresh])\n    // Voucher..\n    const column1 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                console.log('jjjjjjj000000')\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                            name=\"country\"\n                            title=\"Country\"\n\n                            theme={selectThemeColors}\n                            className='react-select wid-100'\n                            classNamePrefix='select'\n                            value={ voucherList.find(i => i.value === tableData1[index]?.snreward_voucherid) }\n                            onChange={(e) => {\n                                tableData1[index] = { ...tableData1[index], snreward_voucherid: e.value }\n                                setTableData1([...tableData1])\n                            }}\n                            style={(error && !tableData1[index].snreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                            options={voucherList}\n                            menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                            captureMenuScroll={true}\n                            closeMenuOnSelect={true}\n                            closeMenuOnScroll={true}\n                            hideSelectedOptions={true}\n                            defaultValue={\n                                tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['snreward_voucherid'])) : null\n                            }\n                            isDisabled={onlyView}\n                         />\n                         <Input\n                            required\n                            disabled={onlyView}\n                            style={{\n                                opacity: 0,\n                                width: \"100\",\n                                height: 0\n                                // position: \"absolute\"\n                            }}\n                            value={tableData1[index]?.snreward_voucherid || ''}\n                            onChange={e => ''}\n                        />\n                        {(error && !tableData1[index].snreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='react-select'\n                        ClassName='wid-100'\n                        classNamePrefix='select'\n                        value={ voucherList.find(i => i.value === tableData1[index]?.rxreward_voucherid) }\n                        onChange={(e) => {\n                            tableData1[index] = { ...tableData1[index], rxreward_voucherid: e.value }\n                            setTableData1([...tableData1])\n                        }}\n                        style={(error && !tableData1[index].rxreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={voucherList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['rxreward_voucherid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData1[index]?.rxreward_voucherid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData1[index].rxreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData1[index].startRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData1[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData1[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData1[index].endRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData1[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData1[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData1[index].startRange && tableData1[index].endRange && tableData1[index].snreward_voucherid && tableData1[index].rxreward_voucherid) {\n                                    setTableData1([...tableData1, { startRange: parseFloat(tableData1[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData1.splice(index, 1)\n                                setTableData1([...tableData1])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData1.length, userInput.commissionType, error, isVoucherListLoading, needRefresh])\n    //  data-pack...\n    const column2 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={150}\n                        ClassName='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], snreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].snreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['snreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.snreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    \n                    {(error && !tableData2[index].snreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], rxreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].rxreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['rxreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.rxreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData2[index].rxreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                    </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData2[index].startRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : (+tableData2[index - 1].endRange + 0.01)}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData2[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData2[index].endRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : tableData2[index].startRange}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData2[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData2[index].startRange && tableData2[index].endRange && tableData2[index].snreward_datapack_groupid && tableData2[index].rxreward_datapack_groupid) {\n                                    setTableData2([...tableData2, { startRange: parseFloat(tableData2[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData2.splice(index, 1)\n                                setTableData2([...tableData2])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData2.length, userInput.commissionType, error, isDatapackLoading, needRefresh])\n    // point..\n    const column3 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData3[index].snAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData3[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData3[index].rxAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData3[index].startRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData3[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData3[index].endRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData3[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (\n                                    tableData3[index].snAmount && \n                                    tableData3[index].rxAmount && \n                                    tableData3[index].startRange && \n                                    tableData3[index].endRange\n                                    \n                            ) {\n                                    setTableData3([\n                                        ...tableData3, \n                                        { \n                                            startRange: parseFloat(tableData3[index].endRange) + 0.01, \n                                            isPercentage: false \n                                        }\n                                    ])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData3.splice(index, 1)\n                                setTableData3([...tableData3])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData3.length, userInput.commissionType, error, needRefresh])\n\n\n    console.log('userInput.commissionType => ', userInput.commissionType)\n    return (\n        <Fragment> \n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col sm=\"6\" >\n                                <FormGroup>\n                                    <Label for=\"commissionRuleName\">Campaign Rule Name<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"textarea\"\n                                        name=\"commissionRuleName\"\n                                        id='commissionRuleName'\n                                        rows='2'\n                                        value={userInput.commissionRuleName}\n                                        onChange={handleChange}\n                                        required\n                                        maxLength=\"100\"\n                                        placeholder=\"rule name here...\"\n                                        disabled={onlyView}\n                                    />\n                                    <p className='text-right' style={userInput.commissionRuleName.length === 100 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{100 - userInput.commissionRuleName.length} characters remaining</p>\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"6\" >\n                                <Row>\n                                    <Col sm=\"12\" > \n                                        <FormGroup>\n                                        <Label for=\"campaign-reward-type\">Campaign Reward Type <Info size={14} id='CampaignRewardType'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='CampaignRewardType'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Campaign reward type allows you to choose the type of reward for the designed campaign. The reward can be a data pack, loyalty points, cashback, or a subscription voucher. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            value={campaignRewardTypeValueOption}\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, reward_type: selected.value })\n                                                setcampaignRewardTypeValueOption(selected)\n                                            }}\n                                            options={campaignRewardType}\n                                            ref={rewardTypeRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => rewardTypeRef.current.select.focus()}\n                                            value={userInput.reward_type || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                    </Col>\n                                </Row>\n                                {\n                                    userInput.reward_type === 3 && <Row>\n                                    <Col sm=\"12\"  className='fade-in'> \n                                        <FormGroup>\n                                            <Label for=\"pointExpireDays\">Point Expire Days<span style={{ color: 'red' }}>*</span>  <Info size={14} id='pointexpirydays'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='pointexpirydays'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Points earned during the campaign will expire after a specified period. </PopoverBody>\n                                        </UncontrolledPopover>\n                                            <Input type=\"number\"\n                                                min='1'\n                                                name=\"pointExpireDays\"\n                                                id='pointExpireDays'\n                                                value={userInput.pointExpireDays}\n                                                onChange={handleChange}\n                                                required\n                                                placeholder=\"0\"\n                                                onWheel={(e) => e.target.blur()}\n                                                disabled={onlyView}\n\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                  </Row>\n                                }\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        <span>Add Transaction Reachable Target?\n                                          &nbsp; <Info size={14} id='transactionreachabletarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='transactionreachabletarget'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Set the campaign target based on the total transaction amount or count. The campaign will deactivate when the targeted transaction is reached. </PopoverBody>\n                                        </UncontrolledPopover>\n\n                                        <CustomInput\n                                            type='switch'\n                                            id='isFinBasedOffer'\n                                            name='isFinBasedOffer'\n                                            checked={userInput.isFinBasedOffer}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: true, offer_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: false, offerCount: 0, offerAmount: 0 })\n                                                }\n                                             }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isFinBasedOffer &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.offer_type > 0 ? conditionTypes.find(({ value }) => value === userInput.offer_type) : conditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, offer_type: selected.value })\n                                                        }}\n                                                        options={conditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.offer_type !== 2 && <Col md=\"6\" className={userInput.offer_type === 3 || userInput.offer_type === 4 ? 'fade-in mt-1' : 'fade-in'}>\n                                                        <FormGroup>\n                                                            <Label for=\"offerCount\">Define Number Of Transaction<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"offerCount\"\n                                                                id='offerCount'\n                                                                value={userInput.offerCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.offer_type !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"offerAmount\">Define Minimum Total Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"offerAmount\"\n                                                                    id='offerAmount'\n                                                                    value={userInput.offerAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span> Set Cumulative Target?\n                                            &nbsp; <Info size={14} id='cumulativetarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='cumulativetarget'>\n                                            <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> To set the campaign conditions i.e. amount or count or hybrif in cumulative manner. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='cumulative-target'\n                                            name='cumulative-target'\n                                            checked={userInput.target}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, target: true, target_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, target: false})\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.target &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.target_type > 0 ? cumulativeConditionTypes.find(({ value }) => value === userInput.target_type) : cumulativeConditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, target_type: selected.value })\n                                                        }}\n                                                        options={cumulativeConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.target_type !== 2 && <Col md=\"6\" className={userInput.target_type === 5 ? \"fade-in\" : \"fade-in mt-1\"}>\n                                                        <FormGroup>\n                                                            <Label for=\"terget_typeCount\">Define {userInput.target_type === 6 ? \"Top\" : null} Number Of Transactions<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"target_count\"\n                                                                id='terget_typeCount'\n                                                                value={userInput.target_count}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.target_type !== 1 && <Col md=\"6\" className=\"fade-in\">\n                                                            <FormGroup>\n                                                                <Label for=\"target_amount\">Define {userInput.target_type === 5 ? \"Per\" : \"Minimum Total\"} Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"target_amount\"\n                                                                    id='target_amount'\n                                                                    value={userInput.target_amount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                \n                                         <span>Set Campaign Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> You can set the number of rewards or the total reward amount (if it's cashback or points) for a specific campaign. When the reward limit is exceeded, the campaign will be deactivated. It's a kind of campaign budget. </PopoverBody>\n                                        </UncontrolledPopover>\n                                         <CustomInput\n                                            type='switch'\n                                            id='isQuota'\n                                            name='isQuota'\n                                            disabled={onlyView}\n                                            checked={userInput.isQuota}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isQuota: true, quotaType: quotaConditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isQuota: false, quotaCount: 0, quotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={\n                                                        //     userInput.quotaType > 0 ? quotaConditionTypes.find(({ value }) => value === userInput.quotaType) : quotaConditionTypes[0]\n                                                        // }\n                                                        value={campaignQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, quotaType: selected.value })\n                                                            setcampaignQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.quotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"quotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"quotaCount\"\n                                                                id='quotaCount'\n                                                                value={userInput.quotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.quotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"quotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"quotaAmount\"\n                                                                    id='quotaAmount'\n                                                                    value={userInput.quotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span>Set Receiver Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignreceiverrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignreceiverrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Receiver's quota means the no. of times or amount an eligible individulas will get reward under specific campaign. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='isRxQuota'\n                                            name='isRxQuota'\n                                            checked={userInput.isRxQuota}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isRxQuota: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, isRxQuota: false, rxQuotaCount: 0, rxQuotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isRxQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={quotaConditionTypes[0]}\n                                                        value={campaignReceiverQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, rxQuotaType: selected.value })\n                                                            setcampaignReceiverQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.rxQuotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"rxQuotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"rxQuotaCount\"\n                                                                id='rxQuotaCount'\n                                                                value={userInput.rxQuotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.rxQuotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"rxQuotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"rxQuotaAmount\"\n                                                                    id='rxQuotaAmount'\n                                                                    value={userInput.rxQuotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                \n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                                \n                                <span>Set Recurring Timeline?\n                                    &nbsp; <Info size={14} id='recurringtimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='recurringtimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific timeframe i.e. weekly, monthly, daily manner. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isCertainTimeline'\n                                    name='isCertainTimeline'\n                                    checked={userInput.isCertainTimeline}\n                                    disabled={onlyView}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                timelineType:'m', \n                                                staticTimeline:1,\n                                                isCertainTimeline: true, \n                                                isTimelineRange: false,\n                                                outsideHourCommissionId: 0, \n                                                returnCertainTimelineId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                returnCertainTimelineId: 0, \n                                                isCertainTimeline: false, \n                                                timelineType: ' ', \n                                                isTimelineRange: false,\n                                                staticTimeline: 0, \n                                                startTimeline: 0, \n                                                endTimeline: 0,  \n                                                outsideHourCommissionId: 0\n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isCertainTimeline && <>\n                                        <FormGroup>\n                                            <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                            { !isCommissionRuleListLoading ? <Select\n                                                ref={ref1}\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                defaultValue={\n                                                    userInput.returnCertainTimelineId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.returnCertainTimelineId)) : null\n                                                }\n                                                onChange={(selected) => {\n                                                    setUserInput({ \n                                                        ...userInput, \n                                                        returnCertainTimelineId: selected ? selected.value : 0 \n                                                    })\n                                                }}\n                                                options={commissionRuleList}\n                                                isClearable\n                                                isDisabled={onlyView}\n                                              /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                            }\n                                        </FormGroup>\n    \n                                        <FormGroup className='fade-in'>\n                                            <Label for=\"Businesses\">Recurring Type<span style={{ color: 'red' }}>*</span></Label>\n                                            <Select\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                defaultValue={\n                                                    userInput.timelineType === 'w' ? { value: 'w', label: 'Weekly' } : (userInput.timelineType === 'm' ? { value: 'm', label: 'Monthly' } : null)\n                                                }\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                onChange={(selected) => recurringTypeOnChange(selected)}\n                                                options={[\n                                                    { value: 'w', label: 'Weekly' }, \n                                                    { value: 'm', label: 'Monthly' }\n                                                ]}\n                                                isDisabled={onlyView}\n                                            />\n                                        </FormGroup>\n                                    </>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='day' id='day' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Day\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='range' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Day Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'm' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='date' id='date' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Date\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='daterange' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Date Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select day<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.staticTimeline) : null\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={weekDaysName}\n                                            ref={recurringSpecificDateRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            disabled={onlyView}\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => recurringSpecificDateRef.current.select.focus()}\n                                            value={userInput.staticTimeline || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                                \n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                                {\n                                    userInput.timelineType === 'm' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select Date<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? monthDays.find(({ value }) => value === userInput.staticTimeline) : { value: 1, label: '1' }\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={monthDays}\n                                            isDisabled={onlyView}\n\n                                        />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? monthDays.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? monthDays.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                            </CardBody>\n                        </Card>\n                        </Col>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                               \n                                <span> Include Time?\n                                    &nbsp; <Info size={14} id='includetimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='includetimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific hours of each timeframe. Also known as happy hour. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isTime'\n                                    name='isTime'\n                                    disabled={onlyView}\n                                    checked={userInput.isTime}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: true, \n                                                outsideHourCommissionId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: false, \n                                                startHour: '', \n                                                endHour: '', \n                                                outsideHourCommissionId: 0 \n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isTime && <Row className='fade-in'>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"startHour\">Start Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.startHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: Date.now(),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => {\n                                                        console.log(date)\n                                                        console.log(new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString())\n                                                        setUserInput({ ...userInput, startHour: flatpickr.formatDate(date[0], 'H : i'), endHour: new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString() })\n                                                    }}\n                                                /> */}\n                                                <Input type=\"time\"\n                                                    name=\"startHour\"\n                                                    id='startHour'\n                                                    value={userInput.startHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"endHour\">End Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.endHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: new Date(Date.now()).setHours(new Date(Date.now()).getHours() + 1),\n                                                        // minDate: new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1), \n                                                        minDate: new Date(new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1)),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => setUserInput({ ...userInput, endHour: flatpickr.formatDate(date[0], 'H : i') })}\n                                                /> */}\n                                                <Input\n                                                    type=\"time\"\n                                                    min={userInput.startHour}\n                                                    name=\"endHour\"\n                                                    id='endHour'\n                                                    value={userInput.endHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                // placeholder='0'\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        {\n                                            !userInput.isCertainTimeline && <Col sm=\"12\" >\n                                                <FormGroup>\n                                                    <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                                    { !isCommissionRuleListLoading ? <Select\n                                                        ref={ref1}\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.outsideHourCommissionId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.outsideHourCommissionId)) : null\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ \n                                                                ...userInput, \n                                                                outsideHourCommissionId: selected ? selected.value : 0 \n                                                            })\n                                                        }}\n                                                        isDisabled={onlyView}\n                                                        options={commissionRuleList}\n                                                        isClearable                                                    \n                                                     /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                    }\n                                                </FormGroup>\n                                                {/* <Input\n                                                    required\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => ref1.current.select.focus()}\n                                                    value={userInput.outsideHourCommissionId || ''}\n                                                    onChange={e => ''}\n                                                /> */}\n                                            </Col>\n                                        }\n                                    </Row>}\n                            </CardBody>\n                        </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                {/* Campaign Rule Type  */}\n                <Fragment>\n                        <Row>\n                            <Col md=\"12\">\n                              <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"12\" >\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"commissionType\">Campaign Rule Type<span style={{ color: 'red' }}>*</span><Info size={14} id='campaignruletype'/></Label>\n                                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignruletype'>\n                                                            <PopoverHeader>Details</PopoverHeader>\n                                                            <PopoverBody> To set the campaign eligibility amount to be fixed-any amount, flexible for threshold. </PopoverBody>\n                                                        </UncontrolledPopover>\n                                                        <Select\n                                                            theme={selectThemeColors}\n                                                            maxMenuHeight={200}\n                                                            className='react-select'\n                                                            classNamePrefix='select'\n                                                            defaultValue={\n                                                                userInput.commissionType === 'fixed' ? { value: 'fixed', label: 'Fixed' } : (userInput.commissionType === 'flexible' ? { value: 'flexible', label: 'Flexible' } : null)\n                                                            }\n                                                            onChange={(selected) => {\n                                                                if (selected.value === 'flexible') {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value, isPercentage: false, amount: 0 })\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                } else {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value })\n                                                                    setTableData([{}])\n                                                                    setTableData1([{}])\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                }\n                                                            }}\n                                                            isDisabled={onlyView}\n                                                            options={[{ value: 'fixed', label: 'Fixed' }, { value: 'flexible', label: 'Flexible' }]}\n                                                        />\n                                                     </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n\n                                        {\n                                            userInput.commissionType === 'fixed' && <Col sm = \"12\" md=\"12\">\n                                            {/* Cash-back reward*/}\n                                            {\n                                                userInput.reward_type === 4 && <Row>\n                                                            <Col sm=\"12\" className='mt-1'>\n                                                                <Row>\n                                                                    <Col md=\"12\">\n                                                                        <Label className='d-block'><h6>Campaign Rule Condition<span style={{ color: 'red' }}>*</span></h6></Label>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                        <FormGroup check inline  className='mt-1' >\n                                                                        {/* <Label check> */}\n                                                                            <CustomInput type='radio' name='flat' id='flat' label=\"Flat\" checked={!userInput.isPercentage}\n                                                                                onChange={() => {\n                                                                                    setUserInput({ ...userInput, isPercentage: false, min: 0, max: 0 })\n                                                                                }}\n                                                                                disabled={onlyView}\n                                                                            />\n                                                                        {/* </Label> */}\n                                                                    </FormGroup>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                            <FormGroup check inline  className='mt-1'>\n                                                                            {/* <Label check> */}\n                                                                                <CustomInput type='radio' label=\"Percentage\" name='percentage' id='percentage' checked={userInput.isPercentage}\n                                                                                    onChange={() => {\n                                                                                        setUserInput({ ...userInput, isPercentage: true })\n                                                                                    }}\n                                                                                    disabled={onlyView}\n                                                                                />\n                                                                            {/* </Label> */}\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            \n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            {\n                                                                userInput.isPercentage === true && <Row className='fade-in'>\n                                                                    <Col sm=\"6\"  className='mt-1' >\n                                                                        <FormGroup>\n                                                                            <Label for=\"min\">Minimum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"min\"\n                                                                                id='min'\n                                                                                value={userInput.min}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                    <Col sm=\"6\"  className='mt-1'>\n                                                                        <FormGroup>\n                                                                            <Label for=\"max\">Maximum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"max\"\n                                                                                id='max'\n                                                                                value={userInput.max}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            }\n                                                        </Row>\n                                            }\n                                            {/* Voucher reward*/}\n                                            {\n                                                userInput.reward_type === 1 && <Row>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_voucherid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment> <Select\n                                                                        ref={srRef}\n                                                                        theme={selectThemeColors}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.snreward_voucherid) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_voucherid: selected.value })\n                                                                        }}\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_voucherid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_voucherid: selected.value })\n                                                                        }}\n                                                                        defaultValue={\n                                                                            userInput.rxreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.rxreward_voucherid) : null\n                                                                        }\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                    }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* Data-pack reward */}\n                                            {\n                                                 userInput.reward_type === 2 && <Row>\n                                                        \n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_datapack_groupid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={srRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.snreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_datapack_groupid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.rxreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.rxreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                        disabled={onlyView}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* point reward */}\n                                            {\n                                                userInput.reward_type === 3 && <Row>\n                                                  \n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n\n                                                        </Row>\n                                            }\n                                        </Col>\n                                        }\n\n                                    </Row>\n                                </CardBody>\n                              </Card>  \n                            </Col>\n                          \n                        </Row>\n                </Fragment>\n\n                {\n                    userInput.commissionType === 'flexible' && <Fragment>\n                    <Row>\n                        <Col md=\"12\">\n                            <Card>\n                                <CardBody>\n                                    {/* Cash-Back Reward*/}\n                                    {\n                                        userInput.reward_type === 4 && <CommonDataTable column={column} TableData={tableData} />\n                                    }\n\n                                    {/* Voucher Reward*/}\n                                    {\n                                       userInput.reward_type === 1 && (!isVoucherListLoading ? <CommonDataTable column={column1} TableData={tableData1} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n\n                                    {/* Data-Pack reward*/}\n                                    {\n                                        userInput.reward_type === 2 && (!isDatapackLoading ? <CommonDataTable column={column2} TableData={tableData2} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n                                    {/* Point reward */}\n                                    {\n                                        userInput.reward_type === 3 && <CommonDataTable column={column3} TableData={tableData3} />\n                                    }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                }\n        </Fragment>\n    )\n}\n\nexport default RealTimeCommisionRuleLogic"],"sourceRoot":""}