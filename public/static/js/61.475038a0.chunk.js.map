{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/BulkNotification/CreateBulkNotification.js","views/viewhelper.js"],"names":["CreateBulkNotification","accessToken","localStorage","getItem","history","useHistory","catRef","useRef","RuleRef","GrpRef","DayRef","MonthRef","RptRef","EmailBodyRef","editorState","setEditorState","useState","EditorState","createEmpty","pointRuleloading","setPointRuleloading","groupList","setGroupList","channelList","setChannelList","file","setFile","emailfilePrevw","setEmailFilePrevw","pushfilePrevw","setPushFilePrevw","fbfilePrevw","setFbFilePrevw","instafilePrevw","setInstaFilePrevw","selectedGroup","setSelectedGroup","selectedQuota","setSelectedQuota","selectedAdRule","setSelectedAdRule","selectedCampaignRule","setSelectedCampaignRule","user","JSON","parse","quotaList","setQuotaList","adRuleList","setAdRuleList","campaignList","setCampaignList","businesscategorylist","setbusinesscategorylist","subCategory","setSubCategory","BlackList","setBlackList","userInput","setUserInput","fb_page_post_body","fb_page_post_image","sms_body","push_notification_title","push_notification_body","push_notification_image","email_title","email_body","email_attachment","instagram_body","instagram_image","rule_id","group_id","qouta_id","adRule_id","effective_date","expiry_date","isScheduled","isRepeat","repeat_type","repeat_time","is_rule_base_notification","is_Ad","isAdScheduled","startDate","endDate","repeat_start_date","repeat_day","repeat_month_day","fb_page_post_category_ids","facebookpage_subcategory_localuids","black_list_group_id","handleChange","e","target","name","value","useEffect","async","useJwt2","runningcampaignList","then","res","data","payload","catch","err","Error","useJwt","getCampaignChannelList","console","log","getCentralGroup","allGroup","q","is_approved","push","response","getQuotaList","allQuotas","allAdRule","getFbpageCategory","map","item","id","uid","subcategory","label","allBlackList","uploadImg","fieldName","setFunc","formData1","FormData","append","singleFileupload","image_url","URL","createObjectURL","uploadImageCallBack","Promise","resolve","reject","xhr","XMLHttpRequest","open","concat","API_BASE_URL","setRequestHeader","send","addEventListener","responseText","link","type","split","error","countCharacters","str","englishLetterCount","unicodeCount","numberCount","specialCharacterCount","char","test","finalV","_jsxs","Fragment","children","role","_jsx","Button","Ripple","className","color","tag","Link","to","ChevronLeft","size","style","marginRight","Card","CardHeader","CardTitle","CardBody","paddingTop","Form","width","onSubmit","preventDefault","parseInt","facebookpage_subcategory_ids","createBulkNotification","Success","autoComplete","length","c","bulk_notification","Col","sm","key_name","replace","toUpperCase","CustomInput","onChange","checked","channel_name","Row","FormGroup","Label","for","Input","sms_from","required","placeholder","maxlength","margin","Editor","ref","toolbar","blockType","inDropdown","dropdownClassName","image","uploadCallback","inputAccept","alt","present","mandatory","onEditorStateChange","draftToHtml","convertToRaw","getCurrentContent","opacity","height","onFocus","_EmailBodyRef$current","current","select","focus","md","border","backgroundColor","Plus","position","left","top","cursor","accept","files","src","push_from","Select","theme","selectThemeColors","classNamePrefix","options","selected","dataPush","item2","handleChangeFBCategory","isMulti","isClearable","Spinner","maxMenuHeight","handleChangeFBSubCategory","rl","campaign_name","g","group_name","min","Date","toLocaleDateString","a","ee","toString","menuPlacement","disabled","marginTop","status","toast","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success"],"mappings":"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","file":"static/js/61.475038a0.chunk.js","sourcesContent":["import useJwt from '@src/auth/jwt/useJwt'\nimport useJwt2 from '@src/auth/jwt/useJwt2'\n\nimport React, { Fragment, useEffect, useRef, useState } from 'react'\nimport { ChevronLeft, Plus } from 'react-feather'\nimport { Link, useHistory } from 'react-router-dom'\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport { BMS_PASS, BMS_USER, API_BASE_URL } from '../../../../../../Configurables'\nimport { Error, Success } from '../../../../../viewhelper'\nimport { EditorState, convertToRaw  } from 'draft-js'\nimport { Editor } from 'react-draft-wysiwyg'\nimport draftToHtml from 'draftjs-to-html'\nimport '@styles/react/libs/editor/editor.scss'\n\nconst CreateBulkNotification = () => {\n    const accessToken = localStorage.getItem(\"accessToken\")\n    const history = useHistory()\n    const catRef = useRef()\n    const RuleRef = useRef()\n    const GrpRef = useRef()\n    const BudgetRef = useRef()\n    const AdRef = useRef()\n    const DayRef = useRef()\n    const MonthRef = useRef()\n    const RptRef = useRef()\n    const EmailBodyRef = useRef()\n    const [editorState, setEditorState] = useState(() => EditorState.createEmpty())\n    const [pointRuleloading, setPointRuleloading] = useState(false)\n    const [groupList, setGroupList] = useState([])\n    const [channelList, setChannelList] = useState([])\n    const [file, setFile] = useState(null)\n    const [emailfilePrevw, setEmailFilePrevw] = useState(null)\n    const [pushfilePrevw, setPushFilePrevw] = useState(null)\n    const [fbfilePrevw, setFbFilePrevw] = useState(null)\n    const [instafilePrevw, setInstaFilePrevw] = useState(null)\n    const [selectedGroup, setSelectedGroup] = useState({})\n    const [selectedQuota, setSelectedQuota] = useState({})\n    const [selectedAdRule, setSelectedAdRule] = useState({})\n    const [selectedCampaignRule, setSelectedCampaignRule] = useState({})\n    const user = JSON.parse(localStorage.getItem('userData'))\n    const [quotaList, setQuotaList] = useState([])\n    const [adRuleList, setAdRuleList] = useState([])\n    const [campaignList, setCampaignList] = useState([])\n    const [businesscategorylist, setbusinesscategorylist] = useState([])\n    const [subCategory, setSubCategory] = useState([])\n    const [BlackList, setBlackList] = useState([])\n    const blackListRef = useRef()\n    const [userInput, setUserInput] = useState({\n        fb_page_post_body: '',\n        fb_page_post_image: '',\n        sms_body: '',\n        push_notification_title: '',\n        push_notification_body: '',\n        push_notification_image: '',\n        email_title: '',\n        email_body: '',\n        email_attachment: '',\n        instagram_body: '',\n        instagram_image: '',\n        rule_id: 0,\n        group_id: 0,\n        qouta_id: 0,\n        adRule_id: 0,\n        effective_date: null,\n        expiry_date: null,\n        isScheduled: false,\n        isRepeat: false,\n        repeat_type: '',\n        repeat_time: 0,\n        is_rule_base_notification: false,\n        is_Ad: false,\n        isAdScheduled: false,\n        startDate: '',\n        endDate: '',\n        repeat_start_date: null,\n        repeat_day: '',\n        repeat_month_day: '',\n        fb_page_post_category_ids: [],\n        facebookpage_subcategory_localuids: [],\n        black_list_group_id: []\n    })\n\n    const handleChangeFBCategory = (selected) => {\n        const dataPush = [], fb_page_post_category_ids = []\n        console.log('selected ', selected)\n        if (selected.length && selected[selected.length - 1].value.subcategory) {\n            selected.map(item => {\n                item.value.subcategory.map(item2 => {\n                    dataPush.push(item2)\n                })\n                fb_page_post_category_ids.push(item.value.id)\n            })\n        }\n\n        if (selected.length === 0) {\n            setSubCategory([])\n            setUserInput({...userInput, fb_page_post_category_ids: []})\n\n        } else {\n            setSubCategory(dataPush.length ? dataPush : subCategory)\n            setUserInput({...userInput, fb_page_post_category_ids})\n        }\n       \n    }\n\n    const handleChangeFBSubCategory = (selected) => {\n        setUserInput({...userInput, facebookpage_subcategory_localuids: selected.map(item => item.value)})\n    }\n\n    const handleChange = (e) => {\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n    useEffect(async () => {\n        useJwt2.runningcampaignList().then(res => {\n            setCampaignList(res.data.payload)\n         }).catch(err => {\n            Error(err)\n        })\n    \n        useJwt.getCampaignChannelList().then(res => {\n            console.log(res)\n            setChannelList(res.data.payload)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n        })\n        useJwt.getCentralGroup().then(res => {\n            console.log(res)\n            const allGroup = []\n            for (const q of res.data.payload) {\n                if (q.is_approved === true) {\n                    allGroup.push(q)\n                }\n            }\n            setGroupList(allGroup)\n        }).catch(err => {\n            Error(err)\n            console.log(err.response)\n        })\n        useJwt.getQuotaList().then(res => {\n            console.log(res)\n            const allQuotas = []\n            for (const q of res.data.payload) {\n                if (q.is_approved === true) {\n                    allQuotas.push(q)\n                }\n            }\n            setQuotaList(allQuotas)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n        })\n        useJwt.adRuleList().then(res => {\n            console.log(res)\n            const allAdRule = []\n            for (const q of res.data.payload) {\n                if (q.is_approved === true) {\n                    allAdRule.push(q)\n                }\n            }\n            setAdRuleList(allAdRule)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n        })\n        useJwt.getFbpageCategory().then(res => {\n            setbusinesscategorylist(res.data.payload.map(item => { return { value: {id: item.uid, subcategory: item.subcategory }, label: item?.name } }))\n        }).catch(err => {\n            console.log(err.response)\n            Error(err)\n        })\n\n        useJwt.allBlackList().then(res => {\n            console.log(res)\n            setBlackList(res.data.payload)\n          }).catch(err => {\n            Error(err)\n            console.log(err)\n          })\n    }, [])\n\n    const uploadImg = async (file, fieldName, setFunc) => {\n        const formData1 = new FormData()\n        formData1.append('image', file)\n        await useJwt.singleFileupload(formData1).then(async res => {\n            console.log(res)\n            userInput[fieldName] = await res.data.payload.image_url\n            setUserInput({ ...userInput })\n            if (file) {\n                setFunc(URL.createObjectURL(file))\n            }\n        }).catch(e => {\n            console.log(e.response)\n        })\n    }\n    const onSubmit = (e) => {\n        e.preventDefault()\n        let { group_id, qouta_id, adRule_id, rule_id } = userInput\n        group_id = parseInt(selectedGroup.value)\n        // qouta_id = parseInt(selectedQuota.value)\n        qouta_id = 1\n        adRule_id = parseInt(selectedAdRule.value)\n        rule_id = parseInt(selectedCampaignRule.value)\n        console.log({ ...userInput, group_id, qouta_id, adRule_id, rule_id, facebookpage_subcategory_ids: userInput.facebookpage_subcategory_localuids })\n        setPointRuleloading(true)\n        useJwt.createBulkNotification({ ...userInput, group_id, qouta_id, adRule_id, rule_id, facebookpage_subcategory_ids: userInput.facebookpage_subcategory_localuids }).then((response) => {\n            console.log(response)\n            setPointRuleloading(false)\n            Success(response)\n            history.push('/allBulkNotifications')\n        }).catch((error) => {\n            setPointRuleloading(false)\n            console.log(error)\n            Error(error)\n            console.log(error)\n        })\n    }\n    async function uploadImageCallBack(file) {\n        return new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest() // eslint-disable-line no-undef\n          xhr.open(\"POST\", `${API_BASE_URL}/fileupload`)\n          xhr.setRequestHeader(\"Authorization\", `Bearer ${accessToken}`)\n          xhr.setRequestHeader(\"Module\", \"JW9tc0ByZWRsdGQl\")\n          const data = new FormData() // eslint-disable-line no-undef\n          data.append(\"image\", file)\n          xhr.send(data)\n          xhr.addEventListener(\"load\", () => {\n            console.log(xhr.responseText)\n            const response = {\n                data: {\n                    link: JSON.parse(xhr.responseText).payload,\n                    type: `image/${JSON.parse(xhr.responseText).payload.split('.')[1]}`\n                }\n            }\n            console.log(response)\n            resolve(response)\n          })\n          xhr.addEventListener(\"error\", () => {\n            const error = JSON.parse(xhr.responseText)\n            reject(error)\n          })\n        })\n      }\n\n      function countCharacters(str) {\n        let englishLetterCount = 0\n        let unicodeCount = 0\n        let numberCount = 0\n        let specialCharacterCount = 0\n      \n        for (const char of str) {\n          if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {\n            englishLetterCount++\n          } else if (char >= '0' && char <= '9') {\n            numberCount++\n          } else if (/[\\u{4E00}-\\u{9FFF}\\u{3400}-\\u{4DBF}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B73F}\\u{2B740}-\\u{2B81F}\\u{2B820}-\\u{2CEAF}\\u{2CEB0}-\\u{2EBEF}\\u{2F800}-\\u{2FA1F}]/u.test(char)) {\n            unicodeCount++\n          } else {\n            specialCharacterCount++\n          }\n        }\n        const finalV = englishLetterCount + numberCount + (unicodeCount * 2) + specialCharacterCount\n        console.log(englishLetterCount, numberCount, unicodeCount, specialCharacterCount, finalV)\n        return finalV\n      }\n    return (\n        <Fragment>\n            {\n                user.role === 'vendor' ? <Button.Ripple className='mb-1' color='primary' tag={Link} to='/allBulkNotificationsVendor' >\n                    <div className='d-flex align-items-center'>\n                        <ChevronLeft size={17} style={{ marginRight: '5px' }} />\n                        <span >Back</span>\n                    </div>\n                </Button.Ripple> : <Button.Ripple className='mb-1' color='primary' tag={Link} to='/allBulkNotifications' >\n                    <div className='d-flex align-items-center'>\n                        <ChevronLeft size={17} style={{ marginRight: '5px' }} />\n                        <span >Back</span>\n                    </div>\n                </Button.Ripple>\n            }\n\n            <Card>\n                <CardHeader className='border-bottom'>\n                    <CardTitle tag='h4'>Create Bulk Notification</CardTitle>\n                </CardHeader>\n                <CardBody style={{ paddingTop: '15px' }}>\n                    <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\n                        {\n                            channelList.length !== 0 ? channelList.map(c => c.bulk_notification && <Col key={c.id} sm=\"12\" className='mb-1'>\n                                <Card>\n                                    <CardHeader className='border-bottom'>\n                                        <CardTitle tag='h6'>{c.key_name.replace(/_/g, ' ').toUpperCase()}</CardTitle>\n                                        <CustomInput type='switch' onChange={(e) => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, [c.key_name]: true })\n                                            } else {\n                                                setUserInput({ ...userInput, [c.key_name]: false })\n                                            }\n                                        }\n                                        } id={c.channel_name} />\n                                    </CardHeader>\n                                    {\n                                        (userInput[c.key_name] && c.key_name === 'sms') && <CardBody style={{ paddingTop: '15px' }}>\n                                            <Row>\n                                                <Col sm=\"6\" >\n                                                    <FormGroup>\n                                                        <Label for=\"sms_from\">From<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"text\"\n                                                            name=\"sms_from\"\n                                                            id='sms_from'\n                                                            value={userInput.sms_from}\n                                                            onChange={handleChange}\n                                                            required\n                                                            placeholder=\"from here...\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"12\" >\n                                                    <FormGroup>\n                                                        <Label for=\"body\">body<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"textarea\"\n                                                            name=\"sms_body\"\n                                                            id='sms_body'\n                                                            value={userInput.sms_body}\n                                                            onChange={handleChange}\n                                                            maxlength=\"160\"\n                                                            required\n                                                            placeholder=\"your message\"\n                                                        />\n                                                        <p className='text-right' style={userInput.sms_body.length === 160 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{160 - countCharacters(userInput.sms_body)} characters remaining</p>\n                                                    </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    }\n                                    {\n                                        (userInput[c.key_name] && c.key_name === 'email') && <CardBody style={{ paddingTop: '15px' }}>\n                                            <Row>\n                                                <Col sm=\"6\" >\n                                                    <FormGroup>\n                                                        <Label for=\"title\">Subject<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"text\"\n                                                            name=\"email_title\"\n                                                            id='email_title'\n                                                            value={userInput.email_title}\n                                                            onChange={handleChange}\n                                                            required\n                                                            placeholder=\"subject here...\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"12\" >\n                                                    <FormGroup>\n                                                        <Label for=\"body\">body<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Editor \n                                                          editorState={editorState} \n                                                          ref={EmailBodyRef}\n                                                          toolbar={{\n                                                            // options: [\"blockType\", \"image\"],\n                                                            blockType: {\n                                                              inDropdown: false,\n                                                            //   options: [\"H1\", \"H2\"],\n                                                              className: 'blockText',\n                                                              dropdownClassName: 'blockTextDown'\n                                                            },\n                                                            image: {\n                                                              uploadCallback: uploadImageCallBack,\n                                                              inputAccept: \"image/gif,image/jpeg,image/jpg,image/png,image/svg\",\n                                                              alt: { present: true, mandatory: false }\n                                                            }\n                                                          }}\n                                                          onEditorStateChange={data => {\n                                                            setUserInput({...userInput, email_body: draftToHtml(convertToRaw(data.getCurrentContent()))}) \n                                                            setEditorState(data)\n                                                            // console.log(draftToHtml(convertToRaw(data.getCurrentContent())))\n                                                            }} \n                                                        />\n                                                        <Input\n                                                            required\n                                                            style={{\n                                                                opacity: 0,\n                                                                width: \"100%\",\n                                                                height: 0\n                                                                // position: \"absolute\"\n                                                            }}\n                                                            onFocus={e => EmailBodyRef.current.select?.focus()}\n                                                            value={userInput?.email_body || ''}\n                                                            onChange={e => ''}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md='12' className='mb-2'>\n                                                    <Label for=\"voucherImage\">Upload Attachment</Label>\n                                                    <div className='d-flex'>\n                                                        <div className=\"file position-relative overflow-hidden mr-2\">\n                                                            <div className='text-center p-1' style={{\n                                                                height: '102px',\n                                                                width: '102px',\n                                                                border: '1px dashed #d9d9d9',\n                                                                backgroundColor: \"#fafafa\"\n                                                            }}>\n                                                                <span ><Plus size={20} className='my-1' /></span> <br />\n                                                                <span>Upload</span>\n                                                            </div>\n                                                            <Input\n                                                                // style={{ width: '300px' }}\n                                                                style={{\n                                                                    position: 'absolute',\n                                                                    opacity: '0',\n                                                                    left: '0',\n                                                                    top: '0',\n                                                                    height: '102px',\n                                                                    width: '102px',\n                                                                    cursor: 'pointer'\n                                                                }}\n                                                                type=\"file\"\n                                                                accept=\"image/png, image/jpeg\"\n                                                                // required\n                                                                name=\"voucherImage\"\n                                                                id='voucherImage'\n                                                                onChange={e => {\n                                                                    uploadImg(e.target.files[0], 'email_attachment', setEmailFilePrevw)\n                                                                }}\n                                                            />\n                                                        </div>\n                                                        {emailfilePrevw && <img src={emailfilePrevw} alt='voucher img' height='100px'></img>}\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    }\n                                    {\n                                        (userInput[c.key_name] && c.key_name === 'push_notification') && <CardBody style={{ paddingTop: '15px' }}>\n                                            <Row>\n                                                <Col sm=\"6\" >\n                                                    <FormGroup>\n                                                        <Label for=\"push_from\">From<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"text\"\n                                                            name=\"push_from\"\n                                                            id='push_from'\n                                                            value={userInput.push_from}\n                                                            onChange={handleChange}\n                                                            required\n                                                            placeholder=\"from here...\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"6\" >\n                                                    <FormGroup>\n                                                        <Label for=\"title\">Title<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"text\"\n                                                            name=\"push_notification_title\"\n                                                            id='push_notification_title'\n                                                            value={userInput.push_notification_title}\n                                                            onChange={handleChange}\n                                                            required\n                                                            placeholder=\"your title\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col sm=\"12\" >\n                                                    <FormGroup>\n                                                        <Label for=\"body\">body<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"textarea\"\n                                                            name=\"push_notification_body\"\n                                                            id='push_notification_body'\n                                                            value={userInput.push_notification_body}\n                                                            onChange={handleChange}\n                                                            maxlength=\"160\"\n                                                            required\n                                                            placeholder=\"your message\"\n                                                        />\n                                                        <p className='text-right' style={userInput.push_notification_body.length === 160 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{160 - userInput.push_notification_body.length} characters remaining</p>\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md='12' className='mb-1'>\n                                                    <Label for=\"voucherImage\">Upload Image</Label>\n                                                    <div className='d-flex'>\n                                                        <div className=\"file position-relative overflow-hidden mr-2\">\n                                                            <div className='text-center p-1' style={{\n                                                                height: '102px',\n                                                                width: '102px',\n                                                                border: '1px dashed #d9d9d9',\n                                                                backgroundColor: \"#fafafa\"\n                                                            }}>\n                                                                <span ><Plus size={20} className='my-1' /></span> <br />\n                                                                <span>Upload</span>\n                                                            </div>\n                                                            <Input\n                                                                // style={{ width: '300px' }}\n                                                                style={{\n                                                                    position: 'absolute',\n                                                                    opacity: '0',\n                                                                    left: '0',\n                                                                    top: '0',\n                                                                    height: '102px',\n                                                                    width: '102px',\n                                                                    cursor: 'pointer'\n                                                                }}\n                                                                type=\"file\"\n                                                                accept=\"image/png, image/jpeg\"\n                                                                // required\n                                                                name=\"voucherImage\"\n                                                                id='voucherImage'\n                                                                onChange={e => {\n                                                                    uploadImg(e.target.files[0], 'push_notification_image', setPushFilePrevw)\n                                                                }}\n                                                            />\n                                                        </div>\n                                                        {pushfilePrevw && <img src={pushfilePrevw} alt='voucher img' height='100px'></img>}\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    }\n                                    {\n                                        (userInput[c.key_name] && (c.key_name === 'fb_page_post' || c.key_name === 'instagram')) && <CardBody style={{ paddingTop: '15px' }}>\n                                            <Row>\n                                                <Col sm=\"12\" >\n                                                    <FormGroup>\n                                                        <Label for=\"body\">body<span style={{ color: 'red' }}>*</span></Label>\n                                                        <Input type=\"textarea\"\n                                                            name={c.key_name === 'fb_page_post' ? \"fb_page_post_body\" : \"instagram_body\"}\n                                                            id='fb_page_post_body'\n                                                            value={c.key_name === 'fb_page_post' ? userInput.fb_page_post_body : userInput.instagram_body}\n                                                            onChange={handleChange}\n                                                            required\n                                                            placeholder=\"your message\"\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col md='6' sm='6'>\n                                                    <FormGroup>\n                                                        <Label for='fb_page_post_category_ids'>Facebook Page Category <span style={{ color: 'red' }}>*</span></Label>\n                                                        {\n                                                            businesscategorylist.length ? <Select\n                                                                ref={catRef}\n                                                                theme={selectThemeColors}\n                                                                className='basic-multi-select'\n                                                                classNamePrefix='select'\n                                                                name=\"businesscategories\"\n                                                                // defaultValue={businesscategorylist[0]}\n                                                                options={businesscategorylist}\n                                                                onChange={(selected) => handleChangeFBCategory(selected)}\n                                                                isMulti\n                                                                isClearable={false}\n                                                            \n                                                            /> : <Spinner color='primary' />\n                                                        }\n                                                        <Input\n                                                            required\n                                                            style={{\n                                                                opacity: 0,\n                                                                width: \"100%\",\n                                                                height: 0\n                                                                // position: \"absolute\"\n                                                            }}\n                                                            onFocus={e => catRef.current.select.focus()}\n                                                            value={userInput.fb_page_post_category_ids || ''}\n                                                            onChange={e => ''}\n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n\n                                                {\n                                                    (subCategory?.length !== 0) && <Col sm=\"4\" >\n                                                    <FormGroup>\n                                                        <Label for=\"facebookpage_subcategory_localuid\">Facebook Page Sub Category</Label>\n                                                        <Select\n                                                            theme={selectThemeColors}\n                                                            maxMenuHeight={200}\n                                                            className='react-select'\n                                                            classNamePrefix='select'\n                                                            onChange={(selected) => handleChangeFBSubCategory(selected)}\n                                                            isMulti\n                                                            isClearable={false}\n                                                            options={subCategory?.map(item => { return { value: item.uid, label: item.name } })}\n                                                            \n                                                        />\n                                                    </FormGroup>\n                                                </Col>\n                                                }\n\n                                                <Col md='12' className='mb-1'>\n                                                    <Label for=\"voucherImage\">Upload Image</Label>\n                                                    <div className='d-flex'>\n                                                        <div className=\"file position-relative overflow-hidden mr-2\">\n                                                            <div className='text-center p-1' style={{\n                                                                height: '102px',\n                                                                width: '102px',\n                                                                border: '1px dashed #d9d9d9',\n                                                                backgroundColor: \"#fafafa\"\n                                                            }}>\n                                                                <span ><Plus size={20} className='my-1' /></span> <br />\n                                                                <span>Upload</span>\n                                                            </div>\n                                                            <Input\n                                                                // style={{ width: '300px' }}\n                                                                style={{\n                                                                    position: 'absolute',\n                                                                    opacity: '0',\n                                                                    left: '0',\n                                                                    top: '0',\n                                                                    height: '102px',\n                                                                    width: '102px',\n                                                                    cursor: 'pointer'\n                                                                }}\n                                                                type=\"file\"\n                                                                accept=\"image/png, image/jpeg\"\n                                                                // required\n                                                                name=\"voucherImage\"\n                                                                id='voucherImage'\n                                                                onChange={e => {\n                                                                    uploadImg(e.target.files[0], c.key_name === 'fb_page_post' ? 'fb_page_post_image' : 'instagram_image', c.key_name === 'fb_page_post' ? setFbFilePrevw : setInstaFilePrevw)\n                                                                }}\n                                                            />\n                                                        </div>\n                                                        {(fbfilePrevw && c.key_name === 'fb_page_post') ? <img src={fbfilePrevw} alt='voucher img' height='100px'></img> : (instafilePrevw && c.key_name === 'instagram') ? <img src={instafilePrevw} alt='voucher img' height='100px'></img> : null}\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    }\n                                </Card>\n                            </Col>\n                            ) : <Col sm='12' className='text-center'><Spinner color='blue' size='md' className='m-3' /></Col>}\n                        <Col sm=\"3\" className='mb-2 mt-1'>\n                            <FormGroup>\n                                <CustomInput type='switch' onChange={(e) => {\n                                    if (e.target.checked) {\n                                        setUserInput({ ...userInput, is_rule_base_notification: true })\n                                        setSelectedGroup({})\n                                    } else {\n                                        setUserInput({ ...userInput, is_rule_base_notification: false })\n                                        setSelectedCampaignRule({})\n                                    }\n                                }\n                                } id='is_rule_base_notification' label='Is Campaign Base Notification?' />\n                            </FormGroup>\n                        </Col>\n                        {\n                            userInput.is_rule_base_notification && <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"groups\">Select Campaign<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        id='group'\n                                        classNamePrefix='select'\n                                        value={{ value: selectedCampaignRule.value, label: selectedCampaignRule.label ? selectedCampaignRule.label : 'select...' }}\n                                        onChange={(selected) => {\n                                            setSelectedCampaignRule({ value: selected.value, label: selected.label })\n                                        }}\n                                        options={campaignList?.map(rl => { return { value: rl.id, label: rl.campaign_name } })}\n                                        ref={RuleRef}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => RuleRef.current.select.focus()}\n                                        value={selectedCampaignRule?.value || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            !userInput.is_rule_base_notification && <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"groups\">Group<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        id='group'\n                                        classNamePrefix='select'\n                                        value={{ value: selectedGroup.value, label: selectedGroup.label ? selectedGroup.label : 'select...' }}\n                                        onChange={(selected) => {\n                                            setSelectedGroup({ value: selected.value, label: selected.label })\n                                        }}\n                                        options={groupList?.map(g => { return { value: g.id, label: g.group_name } })}\n                                        ref={GrpRef}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => GrpRef.current.select.focus()}\n                                        value={selectedGroup?.value || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                         {/* <Col sm=\"3\" >\n                            <FormGroup>\n                                <Label for=\"\">Select Black List group</Label>\n                                <Select\n                                    theme={selectThemeColors}\n                                    maxMenuHeight={200}\n                                    className='react-select'\n                                    id='black_list_group_id'\n                                    classNamePrefix='select'\n                                    // value={{ value: selectedCampaignRule.value, label: selectedCampaignRule.label ? selectedCampaignRule.label : 'select...' }}\n                                    onChange={(selected) => {\n                                        setUserInput({...userInput, black_list_group_id: [...userInput.black_list_group_id, ...selected.map(i => i.value)]})\n                                    }}\n                                    options={BlackList?.map(rl => { return { value: rl.id, label: rl.group_name } })}\n                                    ref={blackListRef}\n                                    isMulti\n                                />\n                                <Input\n                                    \n                                    style={{\n                                        opacity: 0,\n                                        width: \"100%\",\n                                        height: 0\n                                        // position: \"absolute\"\n                                    }}\n                                    onFocus={e => blackListRef.current.select.focus()}\n                                    value={userInput.black_list_group_id || ''}\n                                    onChange={e => ''}\n                                />\n                            </FormGroup>\n                        </Col> */}\n\n                        {/* <Col sm=\"3\" >\n                            <FormGroup>\n                                <Label for=\"quota\">Select Budget<span style={{ color: 'red' }}>*</span></Label>\n                                <Select\n                                    theme={selectThemeColors}\n                                    maxMenuHeight={200}\n                                    className='react-select'\n                                    id='budget'\n                                    classNamePrefix='select'\n                                    value={{ value: selectedQuota.value, label: selectedQuota.label ? selectedQuota.label : 'select...' }}\n                                    onChange={(selected) => {\n                                        setSelectedQuota({ value: selected.value, label: selected.label })\n                                    }}\n                                    options={quotaList?.map(q => { return { value: q.id, label: q.title } })}\n                                    ref={BudgetRef}\n                                />\n                                <Input\n                                    required\n                                    style={{\n                                        opacity: 0,\n                                        width: \"100%\",\n                                        height: 0\n                                        // position: \"absolute\"\n                                    }}\n                                    onFocus={e => BudgetRef.current.select.focus()}\n                                    value={selectedQuota?.value || ''}\n                                    onChange={e => ''}\n                                />\n                            </FormGroup>\n                        </Col> */}\n                        <Col sm='12' />\n                        {/* <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"title\">Title<span style={{ color: 'red' }}>*</span></Label>\n                                <Input type=\"text\"\n                                    name=\"title\"\n                                    id='title'\n                                    value={userInput.title}\n                                    onChange={handleChange}\n                                    required\n                                    placeholder=\"your title\"\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"body\">body<span style={{ color: 'red' }}>*</span></Label>\n                                <Input type=\"textarea\"\n                                    name=\"body\"\n                                    id='body'\n                                    value={userInput.body}\n                                    onChange={handleChange}\n                                    maxlength=\"160\"\n                                    required\n                                    placeholder=\"your message\"\n                                />\n                                <p className='text-right' style={userInput.body.length === 160 ? {margin: '2px', color: 'red'} : {margin:'2px', color: 'blue'}}>{160 - userInput.body.length} characters remaining</p>\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"remarks\">Remarks</Label>\n                                <Input type=\"text\"\n                                    name=\"remarks\"\n                                    id='remarks'\n                                    value={userInput.remarks}\n                                    onChange={handleChange}\n                                    required\n                                    placeholder=\"remarks\"\n                                />\n                            </FormGroup>\n                        </Col> */}\n                        <Col sm=\"3\" className='mb-1 mt-1'>\n                            <FormGroup>\n                                <CustomInput type='switch' onChange={(e) => {\n                                    if (e.target.checked) {\n                                        setUserInput({ ...userInput, is_Ad: true, isScheduled: false, isRepeat: false })\n                                    } else {\n                                        setUserInput({ ...userInput, is_Ad: false, isAdScheduled: false })\n                                        setSelectedAdRule({})\n                                    }\n                                }\n                                } id='is_Ad' label='Is AD?' />\n                            </FormGroup>\n                        </Col>\n                        {userInput.is_Ad && false && <Col sm=\"4\">\n                            <FormGroup>\n                                <Label for=\"ad_rule\">Select Ad Rule<span style={{ color: 'red' }}>*</span></Label>\n                                <Select\n                                    theme={selectThemeColors}\n                                    maxMenuHeight={200}\n                                    className='react-select'\n                                    classNamePrefix='select'\n                                    value={{ value: selectedAdRule.value, label: selectedAdRule.label ? selectedAdRule.label : 'select...' }}\n                                    onChange={(selected) => {\n                                        setSelectedAdRule({ value: selected.value, label: selected.label })\n                                    }}\n                                    options={adRuleList?.map(g => { return { value: g.id, label: g.rule_name } })}\n                                    ref={AdRef}\n                                />\n                                <Input\n                                    required\n                                    style={{\n                                        opacity: 0,\n                                        width: \"100%\",\n                                        height: 0\n                                        // position: \"absolute\"\n                                    }}\n                                    onFocus={e => AdRef.current.select.focus()}\n                                    value={selectedAdRule?.value || ''}\n                                    onChange={e => ''}\n                                />\n                            </FormGroup>\n                        </Col>}\n                        <Col sm='12' />\n                        {userInput.is_Ad && <Col sm=\"3\" className='mb-1 mt-1'>\n                            <FormGroup>\n                                <CustomInput type='switch' onChange={(e) => {\n                                    if (e.target.checked) {\n                                        setUserInput({ ...userInput, isAdScheduled: true })\n                                    } else {\n                                        setUserInput({ ...userInput, isAdScheduled: false, startDate: null, endDate: null })\n                                    }\n                                }\n                                } id='isAdScheduled' label='Is Ad Scheduled?' />\n                            </FormGroup>\n                        </Col>}\n                        {\n                            userInput.isAdScheduled && <Col md='4' >\n                                <FormGroup>\n                                    <Label for=\"startDate\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"datetime-local\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"startDate\"\n                                        id='startDate'\n                                        value={userInput.startDate}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            userInput.isAdScheduled && <Col md='4' >\n                                <FormGroup>\n                                    <Label for=\"endDate\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"datetime-local\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"endDate\"\n                                        id='endDate'\n                                        value={userInput.endDate}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        <Col sm=\"3\" className='mb-1 mt-1'>\n                            <FormGroup>\n                                <CustomInput type='switch' onChange={(e) => {\n                                    if (e.target.checked) {\n                                        setUserInput({ ...userInput, isScheduled: true, isRepeat: false })\n                                    } else {\n                                        setUserInput({ ...userInput, isScheduled: false, effective_date: null })\n                                    }\n                                }\n                                } id='isScheduled' checked={userInput.isScheduled} label='Is Scheduled?' />\n                            </FormGroup>\n                        </Col>\n                        {\n                            userInput.isScheduled && <Col md='4' >\n                                <FormGroup>\n                                    <Label for=\"effective_date\">Scheduled Date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"datetime-local\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"effective_date\"\n                                        id='effective_date'\n                                        value={userInput.effective_date}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        <Col sm='12' />\n                        <Col sm=\"3\" className='mb-1 mt-1'>\n                            <FormGroup>\n                                <CustomInput type='switch' onChange={(e) => {\n                                    if (e.target.checked) {\n                                        setUserInput({ ...userInput, isRepeat: true, isScheduled: false })\n                                    } else {\n                                        setUserInput({ ...userInput, isRepeat: false, expiry_date: null, repeat_type: '', repeat_time: null })\n                                    }\n                                }\n                                } id='isRepeat' checked={userInput.isRepeat} label='Is Repeat?' />\n                            </FormGroup>\n                        </Col>\n                        {\n                            userInput.isRepeat && <Col md='4' >\n                                <FormGroup>\n                                    <Label for=\"startDate\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"date\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"repeat_start_date\"\n                                        id='repeat_start_date'\n                                        value={userInput.repeat_start_date}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            userInput.isRepeat && <Col md='4' >\n                                <FormGroup>\n                                    <Label for=\"expiry_Date\">Expiry Date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"date\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"expiry_date\"\n                                        id='expiry_date'\n                                        value={userInput.expiry_date}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            userInput.isRepeat && <Col sm='4'>\n                                <FormGroup>\n                                    <Label for=\"repeat_type\">Repeat Type<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, repeat_type: selected.value })\n                                        }}\n                                        options={[{ value: 'Daily', label: 'Daily' }, { value: 'Weekly', label: 'Weekly' }, { value: 'Monthly', label: 'Monthly' }]}\n                                        ref={RptRef}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => RptRef.current.select.focus()}\n                                        value={userInput?.repeat_type || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            (userInput.isRepeat && userInput.repeat_type === 'Monthly') && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"startDate\">Date of Month<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        // defaultValue={{ value: 1, label: '1' }}\n                                        onChange={(e) => {\n                                            if (!e) {\n                                                setUserInput({ ...userInput, repeat_month_day: '' })\n                                            } else {\n                                                const a = e.map(ee => ee.label)\n                                                setUserInput({ ...userInput, repeat_month_day: a.toString() })\n                                          }\n                                        }}\n                                        options={[\n                                            { value: 1, label: '1' }, { value: 2, label: '2' }, { value: 3, label: '3' }, { value: 4, label: '4' }, { value: 5, label: '5' }, { value: 6, label: '6' }, { value: 7, label: '7' },\n                                            { value: 8, label: '8' }, { value: 9, label: '9' }, { value: 10, label: '10' }, { value: 11, label: '11' }, { value: 12, label: '12' }, { value: 13, label: '13' }, { value: 14, label: '14' },\n                                            { value: 15, label: '15' }, { value: 16, label: '16' }, { value: 17, label: '17' }, { value: 18, label: '18' }, { value: 19, label: '19' }, { value: 20, label: '20' }, { value: 21, label: '21' },\n                                            { value: 22, label: '22' }, { value: 23, label: '23' }, { value: 24, label: '24' }, { value: 25, label: '25' }, { value: 26, label: '26' }, { value: 27, label: '27' }, { value: 28, label: '28' }, { value: 29, label: '29' }, { value: 30, label: '30' }, { value: 31, label: '31' }\n                                        ]}\n                                        menuPlacement='auto'\n                                        ref={MonthRef}\n                                        isMulti\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => MonthRef.current.select.focus()}\n                                        value={userInput?.repeat_month_day || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            (userInput.isRepeat && userInput.repeat_type === 'Weekly') && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"startDate\">Day<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(e) => {\n                                            if (!e) {\n                                                setUserInput({ ...userInput, repeat_day: '' })\n                                            } else {\n                                                const a = e.map(ee => ee.label)\n                                                setUserInput({ ...userInput, repeat_day: a.toString() })\n                                          }\n                                        }}\n                                        options={[{ value: 'Saturday', label: 'Saturday' }, { value: 'Sunday', label: 'Sunday' }, { value: 'Monday', label: 'Monday' }, { value: 'Tuesday', label: 'Tuesday' }, { value: 'Wednesday', label: 'Wednesday' }, { value: 'Thursday', label: 'Thursday' }, { value: 'Friday', label: 'Friday' }]}\n                                        menuPlacement='auto'\n                                        ref={DayRef}\n                                        isMulti\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => DayRef.current.select.focus()}\n                                        value={userInput?.repeat_day || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {\n                            (userInput.isRepeat && (userInput.repeat_type === 'Daily' || userInput.repeat_type === 'Weekly' || userInput.repeat_type === 'Monthly')) && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"startDate\">Time<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"time\"\n                                        min={new Date().toLocaleDateString('fr-CA')}\n                                        name=\"repeat_time\"\n                                        id='repeat_time'\n                                        value={userInput.repeat_time}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder='0'\n                                    />\n                                </FormGroup>\n                            </Col>\n                        }\n                        {/* <Col md='12' className='mb-2'>\n                            <Label for=\"voucherImage\">Upload Image</Label>\n                            <div className='d-flex'>\n                                <div className=\"file position-relative overflow-hidden mr-2\">\n                                    <div className='text-center p-1' style={{\n                                        height: '102px',\n                                        width: '102px',\n                                        border: '1px dashed #d9d9d9',\n                                        backgroundColor: \"#fafafa\"\n                                    }}>\n                                        <span ><Plus size={20} className='my-1' /></span> <br />\n                                        <span>Upload</span>\n                                    </div>\n                                    <Input\n                                        // style={{ width: '300px' }}\n                                        style={{\n                                            position: 'absolute',\n                                            opacity: '0',\n                                            left: '0',\n                                            top: '0',\n                                            height: '102px',\n                                            width: '102px',\n                                            cursor: 'pointer'\n                                        }}\n                                        type=\"file\"\n                                        accept=\"image/png, image/jpeg\"\n                                        // required\n                                        name=\"voucherImage\"\n                                        id='voucherImage'\n                                        onChange={e => {\n                                            if (e.target.files.length !== 0) {\n                                                setFilePrevw(URL.createObjectURL(e.target.files[0]))\n                                            }\n                                            setFile(e.target.files[0])\n                                        }}\n                                    />\n                                </div>\n                                {filePrevw && <img src={filePrevw} alt='voucher img' height='100px'></img>}\n                            </div>\n                        </Col>\n                        {\n                            channelList.map(c => c.bulk_notification && <Col key={c.id} sm=\"3\" className='mb-1'>\n                                    <FormGroup>\n                                        <CustomInput type='switch' onChange={(e) => {\n                                                if (e.target.checked) { \n                                                    setUserInput({ ...userInput, [c.key_name]: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, [c.key_name]: false })\n                                                }\n                                            }\n                                        } id={c.channel_name} label={c.channel_name} />\n                                    </FormGroup>\n                                </Col>\n                                \n                            \n                        )} */}\n                        <Col sm=\"12\" className='text-center'>\n                            {\n                                pointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                    <Spinner color='white' size='sm' />\n                                    <span className='ml-50'>Loading...</span>\n                                </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\n                                    <span >Submit</span>\n                                </Button.Ripple>\n                            }\n                        </Col>\n                    </Form>\n                </CardBody>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default CreateBulkNotification","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n"],"sourceRoot":""}