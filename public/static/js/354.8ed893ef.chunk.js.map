{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/OfflineCommisionRule/CreateOfflineCommisionRule.js","views/viewhelper.js"],"names":["withReactContent","Swal","CreateOfflineCommisionRule","history","useHistory","serviceTypeRef","useRef","RuleTenureRef","CommRcvrRef","RuleTypeRef","skdTimeRef","pointRuleloading","setPointRuleloading","useState","serviceList","setserviceList","userInput","setUserInput","offlineRuleName","serviceId","offlineRuleMsg","noOfTran","minPerTran","isTotalTran","tranOpsType","tranDays","userType","bonusAmount","isPercentage","min","max","startDate","endDate","isExpiry","isActive","isPerTranBonus","isSkdDatetime","skdHour","skdTime","handleChange","e","target","name","value","useEffect","localStorage","setItem","useJwt","getServiceList","then","res","console","log","data","payload","catch","err","Error","charLimit","field","charCount","actualCharReduce","tempField","match","_userInput$offlineRul","_userInput$offlineRul2","replace","length","_jsxs","Fragment","children","_jsx","Button","Ripple","className","color","tag","Link","to","ChevronLeft","size","style","marginRight","Card","CardHeader","CardTitle","Form","width","onSubmit","preventDefault","createOfflineRule","response","Success","push","error","autoComplete","CardBody","Row","Col","sm","FormGroup","Label","for","Input","type","id","onChange","required","maxLength","placeholder","margin","toString","Select","ref","theme","selectThemeColors","maxMenuHeight","classNamePrefix","selected","options","map","d","service_id","label","service_keyword","opacity","height","onFocus","current","select","focus","defaultValue","CustomInput","checked","md","check","inline","Date","toLocaleDateString","disabled","marginTop","Spinner","status","toast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success"],"mappings":"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","file":"static/js/354.8ed893ef.chunk.js","sourcesContent":["import useJwt from '@src/auth/jwt/useJwt'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useRef, useState } from 'react'\nimport { ChevronLeft } from 'react-feather'\nimport { Link, useHistory } from 'react-router-dom'\nimport Select from 'react-select'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { Error, Success } from '../../../../../viewhelper'\nconst MySwal = withReactContent(Swal)\n\nconst CreateOfflineCommisionRule = () => {\n    const history = useHistory()\n    const serviceTypeRef = useRef()\n    const RuleTenureRef = useRef()\n    const CommRcvrRef = useRef()\n    const RuleTypeRef = useRef()\n    const skdTimeRef = useRef()\n\n    const [pointRuleloading, setPointRuleloading] = useState(false)\n    const [serviceList, setserviceList] = useState([])\n    const [userInput, setUserInput] = useState({\n        offlineRuleName: \"\",\n        serviceId: \"\",\n        offlineRuleMsg: '',\n        noOfTran: 0,\n        minPerTran: 0,\n        isTotalTran: false,\n        tranOpsType: 0,\n        tranDays: 1,\n        userType: \"\",\n        bonusAmount: 0,\n        isPercentage: false,\n        min: 0,\n        max: 0,\n        startDate: \"\",\n        endDate: \"\",\n        isExpiry: true,\n        isActive: false,\n        isPerTranBonus: false,\n        isSkdDatetime: false,\n        skdHour: 0,\n        skdTime: 0\n    })\n    const handleChange = (e) => {\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n    useEffect(() => {\n        localStorage.setItem('useBMStoken', false)\n        useJwt.getServiceList().then(res => {\n            console.log(res)\n            setserviceList(res.data.payload)\n            localStorage.setItem('useBMStoken', false)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n            localStorage.setItem('useBMStoken', false)\n        })\n    }, [])\n    const onSubmit = (e) => {\n        e.preventDefault()\n        localStorage.setItem('useBMStoken', true)\n        let {startDate, endDate} = userInput\n        startDate = startDate ? startDate.replace(/T/, ' ') : startDate\n        endDate = endDate ? endDate.replace(/T/, ' ') : endDate\n\n        setPointRuleloading(true)\n        console.log({ ...userInput, startDate, endDate })\n        useJwt.createOfflineRule({ ...userInput, startDate, endDate }).then((response) => {\n            setPointRuleloading(false)\n            localStorage.setItem('useBMStoken', false)\n            Success(response)\n            history.push('/allOfflineRules')\n        }).catch((error) => {\n            setPointRuleloading(false)\n            localStorage.setItem('useBMStoken', false)\n            Error(error)\n            console.log(error.response)\n        })\n    }\n    const charLimit = (field) => {\n        let charCount = 0\n        let actualCharReduce = 0\n        let tempField = field\n        while (tempField.match(/<TransactionTime>/) || tempField.match(/<TransactionId>/) || tempField.match(/<RewordAmount>/) || tempField.match(/<Msisdn>/) || tempField.match(/<TransactionAmount>/) || tempField.match(/<CampaignName>/)) {\n            if (tempField.match(/<TransactionTime>/)) { \n                charCount += 19\n                actualCharReduce += 2\n                tempField = tempField.replace(/<TransactionTime>/, '') \n            }\n            if (tempField.match(/<TransactionId>/)) { \n                charCount += 30\n                actualCharReduce += 15 \n                tempField = tempField.replace(/<TransactionId>/, '') \n            }\n            if (tempField.match(/<RewordAmount>/)) {  \n                charCount += 10\n                actualCharReduce -= 4 \n                tempField = tempField.replace(/<RewordAmount>/, '') \n            }\n            if (tempField.match(/<Msisdn>/)) { \n                charCount += 11\n                actualCharReduce -= 3 \n                tempField = tempField.replace(/<Msisdn>/, '')  \n            }\n            if (tempField.match(/<TransactionAmount>/)) {  \n                charCount += 10\n                actualCharReduce -= 9 \n                tempField = tempField.replace(/<TransactionAmount>/, '')  \n            }\n            if (tempField.match(/<CampaignName>/)) { \n                actualCharReduce += (userInput?.offlineRuleName?.length - 14)\n                charCount += userInput?.offlineRuleName?.length \n                tempField = tempField.replace(/<CampaignName>/, '')  \n            }\n        }\n        charCount += tempField.length\n        return {charCount, actualCharReduce}\n    }\n    return (\n        <Fragment>\n            <Button.Ripple className='mb-1' color='primary' tag={Link} to='/allOfflineRules' >\n                <div className='d-flex align-items-center'>\n                    <ChevronLeft size={17} style={{ marginRight: '5px' }} />\n                    <span >Back</span>\n                </div>\n            </Button.Ripple>\n            <Card>\n                <CardHeader className='border-bottom'>\n                    <CardTitle tag='h4'>Add Offline Campaign Rule</CardTitle>\n                </CardHeader>\n           </Card>\n          <Form style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\n              <Card>\n                  <CardBody>\n                    <Row>\n                        <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"offlineRuleName\">Campaign Rule Name<span style={{ color: 'red' }}>*</span></Label>\n                                <Input type=\"text\"\n                                    name=\"offlineRuleName\"\n                                    id='offlineRuleName'\n                                    value={userInput.offlineRuleName}\n                                    onChange={handleChange}\n                                    required\n                                    maxLength='20'\n                                    placeholder=\"description here...\"\n                                />\n                                <p className='text-right' style={userInput.offlineRuleName.length === 20 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{20 - userInput.offlineRuleName.length} characters remaining</p>\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"offlineRuleMsg\">Offline Rule Message<span style={{ color: 'red' }}>*</span></Label>\n                                <Input type=\"textarea\"\n                                    name=\"offlineRuleMsg\"\n                                    id='offlineRuleMsg'\n                                    value={userInput.offlineRuleMsg}\n                                    onChange={handleChange}\n                                    required\n                                    placeholder=\"message here...\"\n                                    maxLength={(160 - charLimit(userInput.offlineRuleMsg).actualCharReduce).toString()}\n                                />\n                                    <p className='text-right' style={charLimit(userInput.offlineRuleMsg).charCount === 160 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{160 - charLimit(userInput.offlineRuleMsg).charCount} characters remaining</p>\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"5\">\n                                <FormGroup>\n                                    <Label for=\"serviceId\">Service Type<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={serviceTypeRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, serviceId: selected.value })\n                                        }}\n                                        options={serviceList?.map(d => { return { value: d.service_id, label: d.service_keyword } })}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => serviceTypeRef.current.select.focus()}\n                                        value={userInput.serviceId || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"4\" >\n                                <FormGroup>\n                                    <Label for=\"userType\">Reward Receiver<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={CommRcvrRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, userType: selected.value })\n                                        }}\n                                        options={[{ value: 's', label: 'Sender' }, { value: 'r', label: 'Receiver' }]}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => CommRcvrRef.current.select.focus()}\n                                        value={userInput.userType || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"3\">\n                                <FormGroup>\n                                    <Label for=\"tranDays\">Rule Tenure<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={RuleTenureRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        defaultValue={{ value: 1, label: 'Daily' }}\n                                        onChange={(selected) => {\n                                            if (selected.value === 1) {\n                                                setUserInput({ ...userInput, skdTime: 0, tranDays: selected.value })\n                                            } else {\n                                                setUserInput({ ...userInput, tranDays: selected.value })\n                                            }\n                                        }}\n                                        options={[{ value: 1, label: 'Daily' }, { value: 7, label: 'Weekly' }, { value: 30, label: 'Monthly' }]}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                            // position: \"absolute\"\n                                        }}\n                                        onFocus={e => RuleTenureRef.current.select.focus()}\n                                        value={userInput.tranDays || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"3\" className='mt-2' >\n                                <FormGroup>\n                                    <CustomInput\n                                    type='switch'\n                                    id='isSkdDatetime'\n                                    name='isSkdDatetime'\n                                    label='Is Schedule?'\n                                    onChange={(e) => {\n                                            if (e.target.checked) { \n                                                setUserInput({ ...userInput, isSkdDatetime: true })\n                                            } else {\n                                                setUserInput({ ...userInput, isSkdDatetime: false, skdTime: 0, skdHour: 0 })\n                                            }\n                                        }\n                                    }\n                                    />\n                                </FormGroup>\n                            </Col>\n                            {\n                                (userInput.isSkdDatetime && userInput.tranDays === 30) && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"endTimeline\">Select a date<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={skdTimeRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, skdTime: selected.value })\n                                        }}\n                                        options={[\n                                            { value: 1, label: '1' }, { value: 2, label: '2' }, { value: 3, label: '3' }, { value: 4, label: '4' }, { value: 5, label: '5' }, { value: 6, label: '6' }, { value: 7, label: '7' },\n                                            { value: 8, label: '8' }, { value: 9, label: '9' }, { value: 10, label: '10' }, { value: 11, label: '11' }, { value: 12, label: '12' }, { value: 13, label: '13' }, { value: 14, label: '14' },\n                                            { value: 15, label: '15' }, { value: 16, label: '16' }, { value: 17, label: '17' }, { value: 18, label: '18' }, { value: 19, label: '19' }, { value: 20, label: '20' }, { value: 21, label: '21' },\n                                            { value: 22, label: '22' }, { value: 23, label: '23' }, { value: 24, label: '24' }, { value: 25, label: '25' }, { value: 26, label: '26' }, { value: 27, label: '27' }, { value: 28, label: '28' }, { value: 29, label: '29' }, { value: 30, label: '30' }, { value: 31, label: '31' }\n                                        ]}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                        }}\n                                        onFocus={e => skdTimeRef.current.select.focus()}\n                                        value={userInput.skdTime || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            }\n                            {\n                                (userInput.isSkdDatetime && userInput.tranDays === 7) && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"skdHour\">Select a day<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={skdTimeRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, skdTime: selected.value })\n                                        }}\n                                        options={[{ value: 6, label: 'Saturday' }, { value: 7, label: 'Sunday' }, { value: 1, label: 'Monday' }, { value: 2, label: 'Tuesday' }, { value: 3, label: 'Wednesday' }, { value: 4, label: 'Thursday' }, { value: 5, label: 'Friday' }]}\n                                    />\n                                    <Input\n                                        required\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                        }}\n                                        onFocus={e => skdTimeRef.current.select.focus()}\n                                        value={userInput.skdTime || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            }\n                            {\n                                userInput.isSkdDatetime && <Col md='3' >\n                                <FormGroup>\n                                    <Label for=\"skdHour\">Hour<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"number\"\n                                        name=\"skdHour\"\n                                        min='0'\n                                        max='24'\n                                        id='skdHour'\n                                        value={userInput.skdHour}\n                                        onChange={handleChange}\n                                        required\n                                        placeholder=\"0\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            }\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col sm='6'>\n                                <FormGroup>\n                                    <Label for=\"tranOpsType\">Rule Type<span style={{ color: 'red' }}>*</span></Label>\n                                    <Select\n                                        ref={RuleTypeRef}\n                                        theme={selectThemeColors}\n                                        maxMenuHeight={200}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        onChange={(selected) => {\n                                            setUserInput({ ...userInput, tranOpsType: selected.value })\n                                        }}\n                                        options={[{ value: 1, label: 'Apply Rule on Transaction Count' }, { value: 0, label: 'Apply Rule on Transaction Amount Limit' }, { value: 2, label: 'Apply Rule on Both Transaction Count & Amount' }]}\n                                    />\n                                    <Input\n                                        required\n                                        type='number'\n                                        style={{\n                                            opacity: 0,\n                                            width: \"100%\",\n                                            height: 0\n                                        }}\n                                        onFocus={e => RuleTypeRef.current.select.focus()}\n                                        // value={userInput.tranOpsType || ''}\n                                        value={userInput.tranOpsType === 0 ? 1 : userInput.tranOpsType || ''}\n                                        onChange={e => ''}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"6\" className='mt-1' >\n                                    <FormGroup>\n                                        <CustomInput\n                                        type='switch'\n                                        id='isPerTranBonus'\n                                        name='isPerTranBonus'\n                                        label='Is Bonus Per Transaction?'\n                                        onChange={(e) => {\n                                                if (e.target.checked) { \n                                                    setUserInput({ ...userInput, isPerTranBonus: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, isPerTranBonus: false })\n                                                }\n                                            }\n                                        }\n                                        />\n                                    </FormGroup>\n                                </Col>\n                        </Row>\n                        <Row className='mt-2'>\n                            {\n                                (userInput.tranOpsType === 1 || userInput.tranOpsType === 2) && <Col sm=\"3\" >\n                                    <FormGroup>\n                                        <Label for=\"noOfTran\">MIN TXN Count<span style={{ color: 'red' }}>*</span></Label>\n                                        <Input type=\"number\"\n                                            name=\"noOfTran\"\n                                            id='noOfTran'\n                                            value={userInput.noOfTran}\n                                            onChange={handleChange}\n                                            required\n                                            placeholder=\"0\"\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            }\n                            {\n                                (userInput.tranOpsType === 0 || userInput.tranOpsType === 2) && <Col sm=\"3\" >\n                                    <FormGroup>\n                                        <Label for=\"minPerTran\">MIN Amount(TK)/TXN<span style={{ color: 'red' }}>*</span></Label>\n                                        <Input type=\"number\"\n                                            name=\"minPerTran\"\n                                            id='minPerTran'\n                                            value={userInput.minPerTran}\n                                            onChange={handleChange}\n                                            required\n                                            placeholder=\"0\"\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            }\n                            {\n                                (userInput.tranOpsType === 2) && <Col sm=\"3\" className='pt-2'>\n                                    <FormGroup check>\n                                        <CustomInput onChange={(e) => {\n                                            if (e.target.checked) {\n                                                setUserInput({ ...userInput, isTotalTran: true })\n                                            } else {\n                                                setUserInput({ ...userInput, isTotalTran: false })\n                                            }\n                                        }\n                                        } label='On Total Amount?' type='checkbox' id='isTotalTran' />\n                                    </FormGroup>\n                                </Col>\n                            }\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Row>\n                    <Col sm='6'>\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col sm=\"12\" className='mb-1'>\n                                        <Label className='d-block'><h6>Type</h6></Label>\n                                        <FormGroup check inline className='mr-3'>\n                                            <Label check>\n                                                <CustomInput type='radio' id='flat' name='flat' checked={!userInput.isPercentage}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isPercentage: false, min: 0, max: 0 })\n                                                    }}\n                                                /> Flat\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' id='percentage' name='percentage' checked={userInput.isPercentage}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isPercentage: true })\n                                                    }}\n                                                /> Percentage\n                                            </Label>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col sm=\"4\" >\n                                        <FormGroup>\n                                            <Label for=\"bonusAmount\">Amount<span style={{ color: 'red' }}>*</span></Label>\n                                            <Input type=\"number\"\n                                                name=\"bonusAmount\"\n                                                id='bonusAmount'\n                                                value={userInput.bonusAmount}\n                                                onChange={handleChange}\n                                                required\n                                                placeholder=\"0\"\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    {\n                                        userInput.isPercentage && <Col sm=\"4\" >\n                                            <FormGroup>\n                                                <Label for=\"min\">Min<span style={{ color: 'red' }}>*</span></Label>\n                                                <Input type=\"number\"\n                                                    name=\"min\"\n                                                    id='min'\n                                                    value={userInput.min}\n                                                    onChange={handleChange}\n                                                    required\n                                                    placeholder=\"0\"\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.isPercentage && <Col sm=\"4\" >\n                                            <FormGroup>\n                                                <Label for=\"max\">Max<span style={{ color: 'red' }}>*</span></Label>\n                                                <Input type=\"number\"\n                                                    name=\"max\"\n                                                    id='max'\n                                                    value={userInput.max}\n                                                    onChange={handleChange}\n                                                    required\n                                                    placeholder=\"0\"\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col sm='6'>\n                        <Card>\n                            <CardBody>\n                                <Row>\n                                    <Col md='6' >\n                                        <FormGroup>\n                                            <Label for=\"startDate\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                            <Input type=\"datetime-local\"\n                                                min={new Date().toLocaleDateString('fr-CA')}\n                                                name=\"startDate\"\n                                                id='startDate'\n                                                value={userInput.startDate}\n                                                onChange={e => {\n                                                    setUserInput({...userInput, startDate: e.target.value})\n                                                }}\n                                                required\n                                                placeholder='0'\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md='6' >\n                                        <FormGroup>\n                                            <Label for=\"endDate\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                            <Input type=\"datetime-local\"\n                                                min={new Date().toLocaleDateString('fr-CA')}\n                                                name=\"endDate\"\n                                                id='endDate'\n                                                value={userInput.endDate}\n                                                onChange={e => {\n                                                    setUserInput({...userInput, endDate: e.target.value})\n                                                }}\n                                                required\n                                                placeholder='0'\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                                <Col sm=\"4\" className='mt-1' >\n                                    <FormGroup>\n                                        <CustomInput\n                                            type='switch'\n                                            id='isActive'\n                                            name='isActive'\n                                            label='isActive?'\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isActive: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, isActive: false })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n                <Col sm=\"12\" className='text-center'>\n                    {\n                        pointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                            <Spinner color='white' size='sm' />\n                            <span className='ml-50'>Loading...</span>\n                        </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\n                            <span >Submit</span>\n                        </Button.Ripple>\n                    }\n                </Col>\n            </Form>\n        </Fragment>\n    )\n}\n\nexport default CreateOfflineCommisionRule","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n"],"sourceRoot":""}