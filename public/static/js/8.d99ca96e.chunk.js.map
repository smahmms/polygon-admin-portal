{"version":3,"sources":["../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/Form.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/logic/attachEventListeners.ts","../../src/utils/onDomRemove.ts","../../src/useFormContext.tsx","../../src/useController.ts","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","size","order","offset","propTypes","children","node","hidden","check","for","tag","tagPropType","className","cssModule","object","xs","sm","md","lg","xl","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Label","props","Tag","htmlFor","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","i","columnProp","colClass","isObject","_classNames","colSizeInterfix","push","mapToCssModules","classNames","classes","length","React","createElement","_extends","inline","innerRef","func","Form","_Component","_this","call","this","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","ref","render","_this$props","Component","isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","path","index","tempPath","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","arguments","undefined","isUndefined","val","get","obj","defaultValue","result","reduce","focusOnErrorField","fields","fieldErrors","field","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","previous","option","checked","getMultipleSelectValue","_ref2","selected","map","_ref3","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","concat","defaultResult","validResult","getCheckboxValue","values","_ref4","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","Object","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","target","source","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","assign","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","isErrorStateChanged","_ref5","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","types","validateField","async","_ref6","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","_ref7","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","isWeb","window","document","cloneObject","copy","File","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","_ref8","radioRef","selectRef","includes","_ref9","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","_ref10","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","setFieldArrayDefaultValues","payload","_ref11","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","_ref","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","_ref12","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","createContext","displayName","useFormContext","useContext","useController","_ref14","rules","onFocus","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","_ref15","event","getInputValue","registerField","shouldUpdateValue","defineProperties","_len","_key","meta","invalid","Controller","as","rest","__rest","componentProps","cloneElement"],"mappings":"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","file":"static/js/8.d99ca96e.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport {\n  FieldValues,\n  UseControllerOptions,\n  UseControllerMethods,\n} from './types';\n\nexport function useController<TFieldValues extends FieldValues = FieldValues>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: UseControllerOptions<TFieldValues>): UseControllerMethods<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formState,\n    formStateRef: {\n      current: { isSubmitted, touched, errors },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperties(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            {\n              value: {\n                set(data) {\n                  setInputStateValue(data);\n                  valueRef.current = data;\n                },\n                get() {\n                  return valueRef.current;\n                },\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    meta: Object.defineProperties(\n      {\n        invalid: !!get(errors, name),\n      },\n      {\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touched, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport { useController } from './useController';\nimport { ControllerProps, FieldValues } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TFieldValues extends FieldValues = FieldValues\n>(\n  props: ControllerProps<TAs, TFieldValues>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field, meta } = useController(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field, meta)\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}