{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RuleDataReFormat.js","views/viewhelper.js","views/tables/data-tables/basic/AdminComponent/DataTable.js","views/tables/data-tables/basic/AdminComponent/RealTimeCommisionRule/RealTimeCommisionRuleLogic.js"],"names":["RuleDataReFormat","userInput","flexibleData","cashbackFlexibleData","voucherFlexibleData","datapackFlexibleData","pointFlexibleData","commissionRuleName","reward_type","isFinBasedOffer","target","isQuota","isRxQuota","isCertainTimeline","isTime","commissionType","pointExpireDays","offer_type","offerCount","offerAmount","target_type","target_count","target_amount","quotaType","quotaCount","quotaAmount","rxQuotaType","rxQuotaCount","rxQuotaAmount","timelineType","isTimelineRange","staticTimeline","startTimeline","endTimeline","startHour","endHour","outsideHourCommissionId","returnCertainTimelineId","flexibleRules","isPercentage","snAmount","rxAmount","min","max","snreward_datapack_groupid","rxreward_datapack_groupid","snreward_voucherid","rxreward_voucherid","Error","err","e","response","status","toast","error","data","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","Success","success","CommonDataTable","_ref","column","TableData","TableDataLoading","_jsx","Fragment","children","DataTable","noHeader","columns","className","sortIcon","ChevronDown","size","progressPending","progressComponent","Spinner","color","responsive","conditionTypes","value","label","rewardConditionTypes","cumulativeConditionTypes","weekDaysName","monthDays","Array","map","_","i","concat","RealTimeCommisionRuleLogic","setUserInput","tableData","setCashbackFlexibleData","setTableData","tableData1","setVoucherFlexibleData","setTableData1","tableData2","setDatapackFlexibleData","setTableData2","tableData3","setPointFlexibleData","setTableData3","onlyView","isFirstRender","useRef","rewardTypeRef","ref1","srRef","rrRef","recurringStartDateRef","recurringEndDateRef","recurringSpecificDateRef","commissionRuleList","setcommissionRuleList","useState","isCommissionRuleListLoading","setCommissionRuleListLoading","setError","voucherList","setVoucherList","isVoucherListLoading","setVoucherListLoading","datapackList","setDatapackList","isDatapackLoading","setDatapackLoading","campaignRewardType","setcampaignRewardType","campaignRewardTypeValueOption","setcampaignRewardTypeValueOption","quotaConditionTypes","setquotaConditionTypes","campaignQuotaValue","setcampaignQuotaValue","campaignReceiverQuotaValue","setcampaignReceiverQuotaValue","needRefresh","setneedRefresh","console","log","handleChange","name","handleChange1","index","handleChange2","handleChange3","handleChange4","getVoucherList","useJwt2","pmsVoucher","then","res","payload","voucherid","title","catch","getDatapack","datapackGroupList","id","group_title","resetQuotaSelectedValues","useEffect","rewardTypeid","current","length","item","rewardTypeObj","find","_ref2","rewardTypeFirstValue","_ref3","_ref4","commissionListDropdown","commission_id","commission_rule_name","useMemo","minWidth","cell","Row","_tableData$index","_tableData$index2","_tableData$index3","Select","ClassName","theme","selectThemeColors","maxMenuHeight","classNamePrefix","onChange","selected","isDisabled","options","_tableData$index4","_jsxs","InputGroup","Input","type","required","style","borderColor","placeholder","onWheel","blur","step","disabled","InputGroupAddon","addonType","InputGroupText","padding","fontSize","bottom","_tableData$index5","startRange","endRange","row","Plus","cursor","onClick","parseFloat","Minus","splice","column1","_tableData1$index2","width","_tableData1$index","menuPlacement","captureMenuScroll","closeMenuOnSelect","closeMenuOnScroll","hideSelectedOptions","defaultValue","_ref5","opacity","height","_tableData1$index4","_tableData1$index3","_ref6","_Fragment","column2","_tableData2$index","_ref7","_tableData2$index2","_ref8","column3","Card","CardBody","Col","sm","FormGroup","Label","for","rows","maxLength","margin","Info","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","ref","onFocus","select","focus","CardHeader","CustomInput","checked","md","_ref9","_ref10","BeatLoader","_ref11","isClearable","recurringTypeOnChange","check","inline","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","amount","_ref19","_ref20","_ref21","_ref22"],"mappings":"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","file":"static/js/57.780ee662.chunk.js","sourcesContent":["\nexport const RuleDataReFormat = (userInput, flexibleData) => {\n\n    const {\n        cashbackFlexibleData,\n        voucherFlexibleData,\n        datapackFlexibleData,\n        pointFlexibleData\n    } = flexibleData\n\n    const {\n        commissionRuleName,\n        reward_type,\n\n        isFinBasedOffer,\n        target,\n        isQuota,\n        isRxQuota,\n        isCertainTimeline,\n        isTime,\n        commissionType\n\n    } = userInput\n\n    let {\n        pointExpireDays,\n\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target_type,\n        target_count,\n        target_amount,\n\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        timelineType,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n        returnCertainTimelineId,\n\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n\n    } = userInput\n\n\n    // Add Transaction Reachable Target?\n    if (!isFinBasedOffer) {\n        offer_type = 0\n        offerCount = 0\n        offerAmount = 0\n    }\n\n    // Set Cumulative Target?\n    if (!target) {\n        target_type = 0\n        target_count = 0\n        target_amount = 0\n    }\n\n    // Set Campaign Reward Quota?\n    if (!isQuota) {\n        quotaType = 0\n        quotaCount = 0\n        quotaAmount = 0\n    }\n\n    // Set Receiver Reward Quota?\n    if (!isRxQuota) {\n        rxQuotaType = 0\n        rxQuotaCount = 0\n        rxQuotaAmount = 0\n    }\n\n    /* \n       Set Recurring Timeline?\n       returnCertainTimelineId => off hour rule => optional..\n       timelineType = w/m\n       isTimelineRange = false=> Specific Day, true => Day Range\n\n       //for specific date\n       staticTimeline => 1/2/3/4/....\n      //For date range..\n       startTimeline => 1/2/3/4....\n       endTimeline => 1/2/3/4...\n    */\n    if (!isCertainTimeline) {\n        returnCertainTimelineId = 0\n        timelineType = null\n        isTimelineRange = false\n        staticTimeline = null\n        startTimeline = null\n        endTimeline = null\n    } else {\n\n        if (!isTimelineRange) {\n            startTimeline = null\n            endTimeline = null\n        } else {\n            staticTimeline = null\n        }\n    }\n\n    if (!isTime) {\n        startHour = null\n        endHour = null\n        outsideHourCommissionId = 0\n    }\n\n    if (isCertainTimeline && isTime) {\n        outsideHourCommissionId = returnCertainTimelineId\n    }\n\n    /*\n      commissionType = fixed / flexible\n      reward type => 1=voucher,2=datapck,3=point,4=cashback\n    */\n   if (commissionType === 'fixed') {\n    flexibleRules = []\n    switch (reward_type) {\n        case 1 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_datapack_groupid = 0\n            rxreward_datapack_groupid = 0\n\n            break\n\n        case 2 :\n            isPercentage = false\n            snAmount = 0  //also for point\n            rxAmount = 0   //also for point\n            min = 0\n            max = 0\n            pointExpireDays = 0\n\n            snreward_voucherid = 0\n            rxreward_voucherid = 0\n\n            break\n\n        case 3 : \n             isPercentage = false\n             min = 0\n             max = 0\n\n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n\n             break\n        \n        default :\n             pointExpireDays = 0\n             \n             snreward_datapack_groupid = 0\n             rxreward_datapack_groupid = 0\n\n             snreward_voucherid = 0\n             rxreward_voucherid = 0\n             if (!isPercentage) {\n                min = 0\n                max = 0\n             }\n      }\n   } else {\n    // For flexiable..\n    // cash-back...\n      isPercentage = false\n      snAmount = 0  //also for point\n      rxAmount = 0   //also for point\n      min = 0\n      max = 0\n\n    //voucher...\n      snreward_voucherid = 0\n      rxreward_voucherid = 0\n\n    // Data-pack...\n      snreward_datapack_groupid = 0\n      rxreward_datapack_groupid = 0\n\n      switch (reward_type) {\n        case 1 :\n            flexibleRules = voucherFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 2 :\n            flexibleRules = datapackFlexibleData\n            pointExpireDays = 0\n            break\n\n        case 3 : \n             flexibleRules = pointFlexibleData\n             break\n        \n        default :\n             flexibleRules = cashbackFlexibleData\n             pointExpireDays = 0\n      }\n\n   }\n\n   const finalRequestData = {\n        commissionRuleName,\n        reward_type,\n        pointExpireDays,\n\n        isFinBasedOffer,\n        offer_type,\n        offerCount,\n        offerAmount,\n\n        target,\n        target_type,\n        target_count,\n        target_amount,\n\n        isQuota,\n        quotaType,\n        quotaCount,\n        quotaAmount,\n\n        isRxQuota,\n        rxQuotaType,\n        rxQuotaCount,\n        rxQuotaAmount,\n\n        isCertainTimeline,\n        isTimelineRange,\n        staticTimeline,\n        startTimeline,\n        endTimeline,\n\n        timelineType,\n        startHour,\n        endHour,\n        returnCertainTimelineId,\n\n        isTime,\n        startHour,\n        endHour,\n        outsideHourCommissionId,\n\n        commissionType,\n        flexibleRules,\n\n        isPercentage,\n        snAmount,\n        rxAmount,\n        min,\n        max,\n\n        snreward_datapack_groupid,\n        rxreward_datapack_groupid,\n\n        snreward_voucherid,\n        rxreward_voucherid\n   }\n\n   return finalRequestData\n}","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                columns={column}\n                className='react-dataTable realtimecomissionflaxiabletable'\n                sortIcon={<ChevronDown size={10} />}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable","import useJwt2 from '@src/auth/jwt/useJwt2'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { selectThemeColors } from '@utils'\nimport React, { Fragment, useEffect, useMemo, useRef, useState } from 'react'\nimport { ChevronLeft, Minus, Plus, Info } from 'react-feather'\nimport Select from 'react-select'\nimport { UncontrolledPopover, PopoverHeader, PopoverBody, Button, Card, CardBody, InputGroup, InputGroupAddon, InputGroupText, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, Label, Row, Spinner } from 'reactstrap'\nimport { Error, Success } from '../../../../../viewhelper'\nimport {BeatLoader} from \"react-spinners\"   \nimport CommonDataTable from '../DataTable'\nimport './rStyle.css'\n\nconst conditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst rewardConditionTypes = [\n    { value: 1, label: 'On Reward Count' }, \n    { value: 2, label: 'On Reward Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' }\n]\n\nconst cumulativeConditionTypes = [\n    { value: 1, label: 'On Transaction Count' }, \n    { value: 2, label: 'On Amount' }, \n    { value: 3, label: 'On Both' },\n    { value: 4, label: 'Any Of Them' },\n    { value: 5, label: 'Per Transaction' },\n    { value: 6, label: 'Top Transaction' }\n]\n\nconst weekDaysName = [\n    { value: 1, label: 'Monday' }, \n    { value: 2, label: 'Tuesday' }, \n    { value: 3, label: 'Wednesday' }, \n    { value: 4, label: 'Thursday' }, \n    { value: 5, label: 'Friday' },\n    { value: 6, label: 'Saturday' }, \n    { value: 7, label: 'Sunday' }\n]\n\nconst monthDays = [...Array(31)].map((_, i) => {\n    return {value: i + 1, label: `${i + 1}`}\n})\n\nconst RealTimeCommisionRuleLogic = ({\n    setUserInput, \n    userInput,\n\n    cashbackFlexibleData:tableData,\n    setCashbackFlexibleData:setTableData,\n    voucherFlexibleData:tableData1,\n    setVoucherFlexibleData:setTableData1,\n\n    datapackFlexibleData:tableData2,\n    setDatapackFlexibleData:setTableData2,\n    pointFlexibleData:tableData3,\n    setPointFlexibleData:setTableData3,\n\n    onlyView\n\n}) => {\n\n    const isFirstRender = useRef(true)\n\n    const rewardTypeRef = useRef()\n    const ref1 = useRef()\n    const srRef = useRef()\n    const rrRef = useRef()\n\n    const recurringStartDateRef = useRef()\n    const recurringEndDateRef = useRef()\n    const recurringSpecificDateRef = useRef()\n\n\n    // const [tableData, setTableData] = useState([{ startRange: 0, isPercentage: false }])\n    // const [tableData1, setTableData1] = useState([{ startRange: 0 }])\n    // const [tableData2, setTableData2] = useState([{ startRange: 0 }])\n    // const [tableData3, setTableData3] = useState([{ startRange: 0 }])\n\n    const [commissionRuleList, setcommissionRuleList] = useState([])\n    const [isCommissionRuleListLoading, setCommissionRuleListLoading] = useState(true)\n    const [error, setError] = useState(false)\n    const [voucherList, setVoucherList] = useState([])\n    const [isVoucherListLoading, setVoucherListLoading] = useState(true)\n    const [datapackList, setDatapackList] = useState([])\n    const [isDatapackLoading, setDatapackLoading] = useState(true)\n    const [campaignRewardType, setcampaignRewardType] = useState([])\n    const [campaignRewardTypeValueOption, setcampaignRewardTypeValueOption] = useState({})\n    const [quotaConditionTypes, setquotaConditionTypes] = useState(rewardConditionTypes)\n    const [campaignQuotaValue, setcampaignQuotaValue] = useState({})\n    const [campaignReceiverQuotaValue, setcampaignReceiverQuotaValue] = useState({})\n\n    const [needRefresh, setneedRefresh] = useState(0)\n\n    console.log('isVoucherListLoading => ', isVoucherListLoading)\n\n    const handleChange = (e) => {\n        // console.log(e.target.value)\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\n    }\n    const handleChange1 = (e, index) => {\n        tableData[index] = { ...tableData[index], [e.target.name]: e.target.value }\n        setTableData([...tableData])\n    }\n    const handleChange2 = (e, index) => {\n        tableData1[index] = { ...tableData1[index], [e.target.name]: e.target.value }\n        setTableData1([...tableData1])\n    }\n    const handleChange3 = (e, index) => {\n        tableData2[index] = { ...tableData2[index], [e.target.name]: e.target.value }\n        setTableData2([...tableData2])\n    }\n    const handleChange4 = (e, index) => {\n        tableData3[index] = { ...tableData3[index], [e.target.name]: e.target.value }\n        setTableData3([...tableData3])\n    }\n\n    const getVoucherList = () => {\n        useJwt2.pmsVoucher().then(res => {\n            setVoucherList(res.data.payload.map(i => { return {value: i.voucherid, label: i.title} }))\n            setVoucherListLoading(false)\n        }).catch(err => {\n            setVoucherListLoading(false)\n            Error(err)\n        })\n    }\n\n    const getDatapack = () => {\n        useJwt2.datapackGroupList().then(res => {\n            setDatapackList(res.data.payload.map(i => { return {value: i.id, label: i.group_title} }))\n            setDatapackLoading(false)\n        }).catch(err => {\n            setDatapackLoading(false)\n            Error(err)\n        })\n    }\n\n    const getCampaignRule = () => {\n        // campaignListDropdown\n        useJwt2.commissionListDropdown().then(res => {\n            setcommissionRuleList(res.data.payload.map(i => { return {value: i.commission_id, label: i.commission_rule_name} }))\n            setCommissionRuleListLoading(false)\n        }).catch(err => {\n            setCommissionRuleListLoading(false)\n            Error(err)\n        })\n    }\n\n    const resetQuotaSelectedValues = () => {\n        setcampaignQuotaValue(rewardConditionTypes[0])\n        setcampaignReceiverQuotaValue(rewardConditionTypes[0])\n        setUserInput({...userInput, quotaType: 1, rxQuotaType: 1})\n    }\n    const recurringTypeOnChange = (selected) => {\n        let staticTimeline = null, startTimeline = null, endTimeline = null\n        if (selected.value === 'm') {\n           if (!userInput.isTimelineRange) {\n            staticTimeline = 1\n            startTimeline = null\n            endTimeline = null\n           } else {\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n           }\n            \n        } else {\n\n            staticTimeline = null\n            startTimeline = null\n            endTimeline = null\n        }\n\n        setUserInput({ \n            ...userInput, \n            timelineType: selected.value,\n            staticTimeline,\n            startTimeline,\n            endTimeline\n        })\n    }\n\n    // rewardlist....\n    useEffect(() => {\n        const rewardTypeid = userInput.reward_type\n        if (isFirstRender.current) {\n            // Skip the effect on the initial render\n            isFirstRender.current = false\n            switch (rewardTypeid) {\n                // Voucher...\n                case 1 :\n                    getVoucherList()\n                    break\n    \n                // Data-pack....\n                case 2 :\n                    getDatapack()\n                    break\n            }\n            return\n        }\n        switch (rewardTypeid) {\n            // Voucher...\n            case 1 :\n                if (!voucherList.length) {\n                    getVoucherList()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Data-pack....\n            case 2 :\n                if (!datapackList.length) {\n                    getDatapack()\n                }\n                setquotaConditionTypes([rewardConditionTypes[0]])\n                resetQuotaSelectedValues()\n                break\n\n            // Point....\n            case 3 :\n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // cash-back..\n            case 4 : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n                break\n\n            // There have no other option..\n            default : \n                setquotaConditionTypes(rewardConditionTypes)\n                resetQuotaSelectedValues()\n        }\n    }, [userInput.reward_type])\n\n    useEffect(() => {\n        useJwt2.campaignRewardType().then(res => {\n            const data = res.data.payload.map(item => {\n                return { value: item['reward_id'], label:item['reward_type_name']}\n            })\n            setcampaignRewardType(data)\n            if (data.length) {\n                if (userInput.reward_type > 0) {\n                    const rewardTypeObj = data.find(({ value }) => value === userInput.reward_type)\n                    if (rewardTypeObj) {\n                        setcampaignRewardTypeValueOption(rewardTypeObj)\n                    } else {\n                        setUserInput({ ...userInput, reward_type: 0})\n                    }\n                } else {\n                    const rewardTypeFirstValue = data[0].value \n                    setUserInput({ ...userInput, reward_type: rewardTypeFirstValue})\n                    setcampaignRewardTypeValueOption(data[0])\n                }\n            }\n\n          }).catch(err => {\n            Error(err)\n        })\n\n        // Set some default values...\n        if (userInput.quotaType > 0) {\n            setcampaignQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.quotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n        // setcampaignReceiverQuotaValue\n        if (userInput.rxQuotaType > 0) {\n            setcampaignReceiverQuotaValue(rewardConditionTypes.find(({ value }) => value === userInput.rxQuotaType))\n        } else {\n            setcampaignQuotaValue(rewardConditionTypes[0])\n        }\n\n        console.log('userInput.flexibleRulesuserInput.flexibleRules ==>>', userInput.flexibleRules)\n        switch (userInput.reward_type) {\n            case 1 :\n                setTableData1(userInput.flexibleRules)\n                break\n\n            case 2 :\n                setTableData2(userInput.flexibleRules)\n                break\n\n            case 3 :\n                setTableData3(userInput.flexibleRules)\n                break\n\n            case 4 :\n                setTableData(userInput.flexibleRules)\n                break\n        }\n        setneedRefresh(needRefresh + 1)\n    }, [])\n\n    useEffect(() => {\n        if (!commissionRuleList.length && (userInput.isCertainTimeline || userInput.isTime)) {\n            getCampaignRule()\n        }\n    }, [userInput.isCertainTimeline, userInput.isTime])\n\n    // Cash-back\n    const column = useMemo(() => [\n        {\n            name: 'Reward Condition',\n            minWidth: '150px',\n            cell: (Row, index) => {\n                return <Select ClassName='wid-100'\n                    theme={selectThemeColors}\n                    maxMenuHeight={200}\n                    className='react-select'\n                    classNamePrefix='select'\n                    value={{ value: tableData[index]?.isPercentage, label: tableData[index]?.isPercentage ? 'Percentage' : tableData[index]?.isPercentage === undefined ? 'select' : 'Flat' }}\n                    onChange={(selected) => {\n                        if (selected.value) {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value }\n                            setTableData([...tableData])\n                        } else {\n                            tableData[index] = { ...tableData[index], isPercentage: selected.value, min: 0.00, max: 0.00 }\n                            setTableData([...tableData])\n                        }\n\n                    }}\n                    isDisabled={onlyView}\n                    options={[{ value: true, label: 'Percentage' }, { value: false, label: 'Flat' }]}\n                />\n            }\n        },\n        {\n            name: 'Sender Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                    <InputGroup>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData[index].snAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n\n                    /> \n                    {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                      \n                    </InputGroup>\n                    {(error && !tableData[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '130px',\n            cell: (Row, index) => {\n                return <div>\n                     <InputGroup>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData[index].rxAmount}\n                        onChange={e => {\n                            handleChange1(e, index)\n                        }}\n                        required\n                        style={(error && !tableData[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                        disabled={onlyView}\n                    />\n                     {\n                        tableData[index]?.isPercentage &&   <InputGroupAddon addonType=\"append\" >\n                        <InputGroupText style={{padding: 1}}>%</InputGroupText>\n                      </InputGroupAddon>\n                    }\n                    </InputGroup>\n                    {(error && !tableData[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData[index].startRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData[index].endRange}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && !tableData[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Minimum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"min\"\n                        id={`${index}min`}\n                        value={tableData[index].min}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].min) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].min) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Min commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Maximum Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"max\"\n                        id={`${index}max`}\n                        value={tableData[index].max}\n                        onChange={e => handleChange1(e, index)}\n                        required\n                        style={(error && tableData[index].isPercentage && !tableData[index].max) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        disabled={onlyView ? onlyView : !tableData[index].isPercentage}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={tableData[index].min || 0.01}\n                        step={0.01}\n                    />\n                    {(error && tableData[index].isPercentage && !tableData[index].max) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-26px' }}>Max commision Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <Fragment>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData[index].snAmount && tableData[index].rxAmount && tableData[index].startRange && tableData[index].endRange && ((!tableData[index].isPercentage && (!tableData[index].min && !tableData[index].max)) || (tableData[index].isPercentage && (tableData[index].min && tableData[index].max)))) {\n                                    setTableData([...tableData, { startRange: parseFloat(tableData[index].endRange) + 0.01, isPercentage: false }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData.splice(index, 1)\n                                setTableData([...tableData])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </Fragment>\n            }\n        }\n    ], [tableData.length, userInput.commissionType, error, needRefresh])\n    // Voucher..\n    const column1 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                console.log('jjjjjjj000000')\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                            name=\"country\"\n                            title=\"Country\"\n\n                            theme={selectThemeColors}\n                            className='react-select wid-100'\n                            classNamePrefix='select'\n                            value={ voucherList.find(i => i.value === tableData1[index]?.snreward_voucherid) }\n                            onChange={(e) => {\n                                tableData1[index] = { ...tableData1[index], snreward_voucherid: e.value }\n                                setTableData1([...tableData1])\n                            }}\n                            style={(error && !tableData1[index].snreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                            options={voucherList}\n                            menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                            captureMenuScroll={true}\n                            closeMenuOnSelect={true}\n                            closeMenuOnScroll={true}\n                            hideSelectedOptions={true}\n                            defaultValue={\n                                tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['snreward_voucherid'])) : null\n                            }\n                            isDisabled={onlyView}\n                         />\n                         <Input\n                            required\n                            disabled={onlyView}\n                            style={{\n                                opacity: 0,\n                                width: \"100\",\n                                height: 0\n                                // position: \"absolute\"\n                            }}\n                            value={tableData1[index]?.snreward_voucherid || ''}\n                            onChange={e => ''}\n                        />\n                        {(error && !tableData1[index].snreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='react-select'\n                        ClassName='wid-100'\n                        classNamePrefix='select'\n                        value={ voucherList.find(i => i.value === tableData1[index]?.rxreward_voucherid) }\n                        onChange={(e) => {\n                            tableData1[index] = { ...tableData1[index], rxreward_voucherid: e.value }\n                            setTableData1([...tableData1])\n                        }}\n                        style={(error && !tableData1[index].rxreward_voucherid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={voucherList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData1.length >= (index + 1) ? voucherList.find(({ value }) => (+value) === (+tableData1[index]['rxreward_voucherid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData1[index]?.rxreward_voucherid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData1[index].rxreward_voucherid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData1[index].startRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData1[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData1[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData1[index].endRange}\n                        onChange={e => handleChange2(e, index)}\n                        required\n                        style={(error && !tableData1[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData1[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData1[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData1[index].startRange && tableData1[index].endRange && tableData1[index].snreward_voucherid && tableData1[index].rxreward_voucherid) {\n                                    setTableData1([...tableData1, { startRange: parseFloat(tableData1[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData1.splice(index, 1)\n                                setTableData1([...tableData1])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData1.length, userInput.commissionType, error, isVoucherListLoading, needRefresh])\n    //  data-pack...\n    const column2 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={150}\n                        ClassName='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], snreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].snreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['snreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.snreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    \n                    {(error && !tableData2[index].snreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Reward is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div style={{width:'100%', padding:'10px 0 0 0'}}>\n                    <Select\n                        theme={selectThemeColors}\n                        maxMenuHeight={200}\n                        className='wid-100 react-select'\n                        classNamePrefix='select'\n                        onChange={(e) => {\n                            tableData2[index] = { ...tableData2[index], rxreward_datapack_groupid: e.value }\n                            setTableData2([...tableData2])\n                        }}\n                        style={(error && !tableData2[index].rxreward_datapack_groupid) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        options={datapackList}\n                        menuPlacement={index > 3 ? \"top\" : \"bottom\"}\n                        captureMenuScroll={true}\n                        closeMenuOnSelect={true}\n                        closeMenuOnScroll={true}\n                        hideSelectedOptions={true}\n                        defaultValue={\n                            tableData2.length >= (index + 1) ? datapackList.find(({ value }) => (+value) === (+tableData2[index]['rxreward_datapack_groupid'])) : null\n                        }\n                        isDisabled={onlyView}\n\n                    />\n                    <Input\n                       required\n                       disabled={onlyView}\n                       style={{\n                           opacity: 0,\n                           width: \"100\",\n                           height: 0\n                       }}\n                       value={tableData2[index]?.rxreward_datapack_groupid || ''}\n                       onChange={e => ''}\n                   />\n                    {(error && !tableData2[index].rxreward_datapack_groupid) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Reward is Required!!!</h6>}\n                    </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData2[index].startRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : (+tableData2[index - 1].endRange + 0.01)}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData2[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData2[index].endRange}\n                        onChange={e => handleChange3(e, index)}\n                        required\n                        style={(error && !tableData2[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        step={0.01}\n                        min={index === 0 ? 1 : tableData2[index].startRange}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData2[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (tableData2[index].startRange && tableData2[index].endRange && tableData2[index].snreward_datapack_groupid && tableData2[index].rxreward_datapack_groupid) {\n                                    setTableData2([...tableData2, { startRange: parseFloat(tableData2[index].endRange) + 0.01 }])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData2.splice(index, 1)\n                                setTableData2([...tableData2])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData2.length, userInput.commissionType, error, isDatapackLoading, needRefresh])\n    // point..\n    const column3 = useMemo(() => [\n        {\n            name: 'Sender Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"snAmount\"\n                        id={`${index}snAmount`}\n                        value={tableData3[index].snAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].snAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n                    />\n                    {(error && !tableData3[index].snAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Sender Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Receiver Reward',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"rxAmount\"\n                        id={`${index}rxAmount`}\n                        value={tableData3[index].rxAmount}\n                        onChange={e => {\n                            handleChange4(e, index)\n                        }}\n                        required\n                        style={(error && !tableData3[index].rxAmount) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder='0'\n                        onWheel={(e) => e.target.blur()}\n                        step={1}\n                        min={1}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].rxAmount) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Receiver Amount is Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Start Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"startRange\"\n                        id={`${index}startRange`}\n                        value={tableData3[index].startRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].startRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : (+tableData3[index - 1].endRange + 0.01)}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].startRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>Start Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'End Range',\n            minWidth: '100px',\n            cell: (Row, index) => {\n                return <div>\n                    <Input type=\"number\"\n                        name=\"endRange\"\n                        id={`${index}endRange`}\n                        value={tableData3[index].endRange}\n                        onChange={e => handleChange4(e, index)}\n                        required\n                        style={(error && !tableData3[index].endRange) ? { borderColor: 'red', position: 'relative' } : { color: 'black' }}\n                        placeholder=\"0\"\n                        onWheel={(e) => e.target.blur()}\n                        min={index === 0 ? 1 : tableData3[index].startRange}\n                        step={0.01}\n                        disabled={onlyView}\n\n                    />\n                    {(error && !tableData3[index].endRange) && <h6 style={{ color: 'red', fontSize: '9px', position: 'absolute', bottom: '-16px' }}>End Range Required!!!</h6>}\n                </div>\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            cell: (row, index) => {\n                return !onlyView && <>\n                    <span title=\"Add\">\n                        <Plus size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                if (\n                                    tableData3[index].snAmount && \n                                    tableData3[index].rxAmount && \n                                    tableData3[index].startRange && \n                                    tableData3[index].endRange\n                                    \n                            ) {\n                                    setTableData3([\n                                        ...tableData3, \n                                        { \n                                            startRange: parseFloat(tableData3[index].endRange) + 0.01, \n                                            isPercentage: false \n                                        }\n                                    ])\n                                    setError(false)\n                                } else { setError(true) }\n                            }}\n                        />\n                    </span>\n                    {index !== 0 && <span title=\"remove\">\n                        <Minus size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                tableData3.splice(index, 1)\n                                setTableData3([...tableData3])\n                                setError(false)\n                            }}\n                        />\n                    </span>}\n                </>\n            }\n        }\n    ], [tableData3.length, userInput.commissionType, error, needRefresh])\n\n\n    console.log('userInput.commissionType => ', userInput.commissionType)\n    return (\n        <Fragment> \n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col sm=\"6\" >\n                                <FormGroup>\n                                    <Label for=\"commissionRuleName\">Campaign Rule Name<span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"textarea\"\n                                        name=\"commissionRuleName\"\n                                        id='commissionRuleName'\n                                        rows='2'\n                                        value={userInput.commissionRuleName}\n                                        onChange={handleChange}\n                                        required\n                                        maxLength=\"100\"\n                                        placeholder=\"rule name here...\"\n                                        disabled={onlyView}\n                                    />\n                                    <p className='text-right' style={userInput.commissionRuleName.length === 100 ? { margin: '2px', color: 'red' } : { margin: '2px', color: 'blue' }}>{100 - userInput.commissionRuleName.length} characters remaining</p>\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"6\" >\n                                <Row>\n                                    <Col sm=\"12\" > \n                                        <FormGroup>\n                                        <Label for=\"campaign-reward-type\">Campaign Reward Type <Info size={14} id='CampaignRewardType'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='CampaignRewardType'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Campaign reward type allows you to choose the type of reward for the designed campaign. The reward can be a data pack, loyalty points, cashback, or a subscription voucher. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            value={campaignRewardTypeValueOption}\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, reward_type: selected.value })\n                                                setcampaignRewardTypeValueOption(selected)\n                                            }}\n                                            options={campaignRewardType}\n                                            ref={rewardTypeRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => rewardTypeRef.current.select.focus()}\n                                            value={userInput.reward_type || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                    </Col>\n                                </Row>\n                                {\n                                    userInput.reward_type === 3 && <Row>\n                                    <Col sm=\"12\"  className='fade-in'> \n                                        <FormGroup>\n                                            <Label for=\"pointExpireDays\">Point Expire Days<span style={{ color: 'red' }}>*</span>  <Info size={14} id='pointexpirydays'/></Label>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='pointexpirydays'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Points earned during the campaign will expire after a specified period. </PopoverBody>\n                                        </UncontrolledPopover>\n                                            <Input type=\"number\"\n                                                min='1'\n                                                name=\"pointExpireDays\"\n                                                id='pointExpireDays'\n                                                value={userInput.pointExpireDays}\n                                                onChange={handleChange}\n                                                required\n                                                placeholder=\"0\"\n                                                onWheel={(e) => e.target.blur()}\n                                                disabled={onlyView}\n\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                  </Row>\n                                }\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        <span>Add Transaction Reachable Target?\n                                          &nbsp; <Info size={14} id='transactionreachabletarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='transactionreachabletarget'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Set the campaign target based on the total transaction amount or count. The campaign will deactivate when the targeted transaction is reached. </PopoverBody>\n                                        </UncontrolledPopover>\n\n                                        <CustomInput\n                                            type='switch'\n                                            id='isFinBasedOffer'\n                                            name='isFinBasedOffer'\n                                            checked={userInput.isFinBasedOffer}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: true, offer_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isFinBasedOffer: false, offerCount: 0, offerAmount: 0 })\n                                                }\n                                             }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isFinBasedOffer &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.offer_type > 0 ? conditionTypes.find(({ value }) => value === userInput.offer_type) : conditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, offer_type: selected.value })\n                                                        }}\n                                                        options={conditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.offer_type !== 2 && <Col md=\"6\" className={userInput.offer_type === 3 || userInput.offer_type === 4 ? 'fade-in mt-1' : 'fade-in'}>\n                                                        <FormGroup>\n                                                            <Label for=\"offerCount\">Define Number Of Transaction<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"offerCount\"\n                                                                id='offerCount'\n                                                                value={userInput.offerCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.offer_type !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"offerAmount\">Define Minimum Total Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"offerAmount\"\n                                                                    id='offerAmount'\n                                                                    value={userInput.offerAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span> Set Cumulative Target?\n                                            &nbsp; <Info size={14} id='cumulativetarget'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='cumulativetarget'>\n                                            <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> To set the campaign conditions i.e. amount or count or hybrif in cumulative manner. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='cumulative-target'\n                                            name='cumulative-target'\n                                            checked={userInput.target}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, target: true, target_type: conditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, target: false})\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.target &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.target_type > 0 ? cumulativeConditionTypes.find(({ value }) => value === userInput.target_type) : cumulativeConditionTypes[0]\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, target_type: selected.value })\n                                                        }}\n                                                        options={cumulativeConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.target_type !== 2 && <Col md=\"6\" className={userInput.target_type === 5 ? \"fade-in\" : \"fade-in mt-1\"}>\n                                                        <FormGroup>\n                                                            <Label for=\"terget_typeCount\">Define {userInput.target_type === 6 ? \"Top\" : null} Number Of Transactions<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"target_count\"\n                                                                id='terget_typeCount'\n                                                                value={userInput.target_count}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.target_type !== 1 && <Col md=\"6\" className=\"fade-in\">\n                                                            <FormGroup>\n                                                                <Label for=\"target_amount\">Define {userInput.target_type === 5 ? \"Per\" : \"Minimum Total\"} Transaction Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"target_amount\"\n                                                                    id='target_amount'\n                                                                    value={userInput.target_amount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                \n                                         <span>Set Campaign Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> You can set the number of rewards or the total reward amount (if it's cashback or points) for a specific campaign. When the reward limit is exceeded, the campaign will be deactivated. It's a kind of campaign budget. </PopoverBody>\n                                        </UncontrolledPopover>\n                                         <CustomInput\n                                            type='switch'\n                                            id='isQuota'\n                                            name='isQuota'\n                                            disabled={onlyView}\n                                            checked={userInput.isQuota}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isQuota: true, quotaType: quotaConditionTypes[0].value })\n                                                } else {\n                                                    setUserInput({ ...userInput, isQuota: false, quotaCount: 0, quotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"tragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={\n                                                        //     userInput.quotaType > 0 ? quotaConditionTypes.find(({ value }) => value === userInput.quotaType) : quotaConditionTypes[0]\n                                                        // }\n                                                        value={campaignQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, quotaType: selected.value })\n                                                            setcampaignQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.quotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"quotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"quotaCount\"\n                                                                id='quotaCount'\n                                                                value={userInput.quotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.quotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"quotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"quotaAmount\"\n                                                                    id='quotaAmount'\n                                                                    value={userInput.quotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n                                                                    disabled={onlyView}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n\n                        <Col sm='6'>\n                                <Card>\n                                    <CardHeader>\n                                        \n                                        <span>Set Receiver Reward Quota?\n                                          &nbsp; <Info size={14} id='campaignreceiverrewardquota'/>\n                                        </span>\n                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignreceiverrewardquota'>\n                                           <PopoverHeader>Details</PopoverHeader>\n                                            <PopoverBody> Receiver's quota means the no. of times or amount an eligible individulas will get reward under specific campaign. </PopoverBody>\n                                        </UncontrolledPopover>\n                                        <CustomInput\n                                            type='switch'\n                                            id='isRxQuota'\n                                            name='isRxQuota'\n                                            checked={userInput.isRxQuota}\n                                            disabled={onlyView}\n                                            onChange={(e) => {\n                                                if (e.target.checked) {\n                                                    setUserInput({ ...userInput, isRxQuota: true })\n                                                } else {\n                                                    setUserInput({ ...userInput, isRxQuota: false, rxQuotaCount: 0, rxQuotaAmount: 0 })\n                                                }\n                                            }\n                                            }\n                                        />\n                                    </CardHeader>\n                                    {\n                                        userInput.isRxQuota &&  <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <FormGroup className='fade-in'>\n                                                    <Label for=\"comulativetragetTransactionType\">Type</Label>\n                                                    <Select\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        // defaultValue={quotaConditionTypes[0]}\n                                                        value={campaignReceiverQuotaValue}\n                                                        onChange={(selected) => {\n                                                            setUserInput({ ...userInput, rxQuotaType: selected.value })\n                                                            setcampaignReceiverQuotaValue(selected)\n                                                        }}\n                                                        options={quotaConditionTypes}\n                                                        isDisabled={onlyView}\n                                                    />\n                                                </FormGroup>\n                                            </Col>\n                                           <Col md=\"12\">\n                                            <Row>\n                                                { \n                                                    userInput.rxQuotaType !== 2 && <Col md=\"6\" className='fade-in'>\n                                                        <FormGroup>\n                                                            <Label for=\"rxQuotaCount\">Define Number Of Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                            <Input type=\"number\"\n                                                                name=\"rxQuotaCount\"\n                                                                id='rxQuotaCount'\n                                                                value={userInput.rxQuotaCount}\n                                                                onChange={handleChange}\n                                                                required\n                                                                placeholder=\"0\"\n                                                                onWheel={(e) => e.target.blur()}\n                                                                min={1}\n                                                                disabled={onlyView}\n\n                                                            />\n                                                        </FormGroup>\n                                                    </Col> \n                                                    }\n                                                    {\n                                                    userInput.rxQuotaType !== 1 && <Col md=\"6\" className='fade-in'>\n                                                            <FormGroup>\n                                                                <Label for=\"rxQuotaAmount\">Define Reward Amount<span style={{ color: 'red' }}>*</span></Label>\n                                                                <Input type=\"number\"\n                                                                    name=\"rxQuotaAmount\"\n                                                                    id='rxQuotaAmount'\n                                                                    value={userInput.rxQuotaAmount}\n                                                                    onChange={handleChange}\n                                                                    required\n                                                                    placeholder=\"0\"\n                                                                    onWheel={(e) => e.target.blur()}\n                                                                    min={userInput.reward_type === 3 ? 1 : 0.01}\n                                                                    step={0.01}\n\n                                                                />\n                                                            </FormGroup>\n                                                        </Col>\n                                                    }\n                                                </Row>\n                                           </Col>\n                                        </Row>\n                                    </CardBody>\n                                    }\n                                   \n                                </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                \n                <Fragment>\n                    <Row>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                                \n                                <span>Set Recurring Timeline?\n                                    &nbsp; <Info size={14} id='recurringtimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='recurringtimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific timeframe i.e. weekly, monthly, daily manner. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isCertainTimeline'\n                                    name='isCertainTimeline'\n                                    checked={userInput.isCertainTimeline}\n                                    disabled={onlyView}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                timelineType:'m', \n                                                staticTimeline:1,\n                                                isCertainTimeline: true, \n                                                isTimelineRange: false,\n                                                outsideHourCommissionId: 0, \n                                                returnCertainTimelineId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                returnCertainTimelineId: 0, \n                                                isCertainTimeline: false, \n                                                timelineType: ' ', \n                                                isTimelineRange: false,\n                                                staticTimeline: 0, \n                                                startTimeline: 0, \n                                                endTimeline: 0,  \n                                                outsideHourCommissionId: 0\n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isCertainTimeline && <>\n                                        <FormGroup>\n                                            <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                            { !isCommissionRuleListLoading ? <Select\n                                                ref={ref1}\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                defaultValue={\n                                                    userInput.returnCertainTimelineId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.returnCertainTimelineId)) : null\n                                                }\n                                                onChange={(selected) => {\n                                                    setUserInput({ \n                                                        ...userInput, \n                                                        returnCertainTimelineId: selected ? selected.value : 0 \n                                                    })\n                                                }}\n                                                options={commissionRuleList}\n                                                isClearable\n                                                isDisabled={onlyView}\n                                              /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                            }\n                                        </FormGroup>\n    \n                                        <FormGroup className='fade-in'>\n                                            <Label for=\"Businesses\">Recurring Type<span style={{ color: 'red' }}>*</span></Label>\n                                            <Select\n                                                theme={selectThemeColors}\n                                                maxMenuHeight={200}\n                                                defaultValue={\n                                                    userInput.timelineType === 'w' ? { value: 'w', label: 'Weekly' } : (userInput.timelineType === 'm' ? { value: 'm', label: 'Monthly' } : null)\n                                                }\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                onChange={(selected) => recurringTypeOnChange(selected)}\n                                                options={[\n                                                    { value: 'w', label: 'Weekly' }, \n                                                    { value: 'm', label: 'Monthly' }\n                                                ]}\n                                                isDisabled={onlyView}\n                                            />\n                                        </FormGroup>\n                                    </>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='day' id='day' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Day\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='range' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Day Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'm' && userInput.isCertainTimeline && <Fragment>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='date' id='date' checked={!userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: false })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Specific Date\n                                            </Label>\n                                        </FormGroup>\n                                        <FormGroup check inline>\n                                            <Label check>\n                                                <CustomInput type='radio' name='range' id='daterange' checked={userInput.isTimelineRange}\n                                                    onChange={() => {\n                                                        setUserInput({ ...userInput, isTimelineRange: true })\n                                                    }}\n                                                    disabled={onlyView}\n                                                /> Date Range\n                                            </Label>\n                                        </FormGroup>\n                                    </Fragment>\n                                }\n                                {\n                                    userInput.timelineType === 'w' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select day<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.staticTimeline) : null\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={weekDaysName}\n                                            ref={recurringSpecificDateRef}\n                                            isDisabled={onlyView}\n                                        />\n                                         <Input\n                                            required\n                                            disabled={onlyView}\n                                            style={{\n                                                opacity: 0,\n                                                width: \"100%\",\n                                                height: 0\n                                                // position: \"absolute\"\n                                            }}\n                                            onFocus={e => recurringSpecificDateRef.current.select.focus()}\n                                            value={userInput.staticTimeline || ''}\n                                            onChange={e => ''} />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                                \n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'w' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col sm=\"6\" className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End day<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? weekDaysName.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={weekDaysName}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                                {\n                                    userInput.timelineType === 'm' && !userInput.isTimelineRange && userInput.isCertainTimeline && <FormGroup className='mt-1 fade-in'>\n                                        <Label for=\"staticTimeline\">Select Date<span style={{ color: 'red' }}>*</span></Label>\n                                        <Select\n                                            theme={selectThemeColors}\n                                            maxMenuHeight={200}\n                                            className='react-select'\n                                            classNamePrefix='select'\n                                            defaultValue={\n                                                userInput.staticTimeline > 0 ? monthDays.find(({ value }) => value === userInput.staticTimeline) : { value: 1, label: '1' }\n                                            }\n                                            onChange={(selected) => {\n                                                setUserInput({ ...userInput, staticTimeline: selected.value })\n                                            }}\n                                            options={monthDays}\n                                            isDisabled={onlyView}\n\n                                        />\n                                    </FormGroup>\n                                }\n                                <Row>\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"startTimeline\">Start Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.startTimeline > 0 ? monthDays.find(({ value }) => value === userInput.startTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, startTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringStartDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringStartDateRef.current.select.focus()}\n                                                    value={userInput.startTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {\n                                        userInput.timelineType === 'm' && userInput.isTimelineRange && userInput.isCertainTimeline && <Col md='6' className='mt-1 fade-in'>\n                                            <FormGroup>\n                                                <Label for=\"endTimeline\">End Date<span style={{ color: 'red' }}>*</span></Label>\n                                                <Select\n                                                    theme={selectThemeColors}\n                                                    maxMenuHeight={200}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    defaultValue={\n                                                        userInput.endTimeline > 0 ? monthDays.find(({ value }) => value === userInput.endTimeline) : null\n                                                    }\n                                                    onChange={(selected) => {\n                                                        setUserInput({ ...userInput, endTimeline: selected.value })\n                                                    }}\n                                                    options={monthDays}\n                                                    ref={recurringEndDateRef}\n                                                    isDisabled={onlyView}\n\n                                                />\n                                                <Input\n                                                    required\n                                                    disabled={onlyView}\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => recurringEndDateRef.current.select.focus()}\n                                                    value={userInput.endTimeline || ''}\n                                                    onChange={e => ''} />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                </Row>\n                            </CardBody>\n                        </Card>\n                        </Col>\n                        <Col sm='6'>\n                        <Card>\n                            <CardHeader>\n                               \n                                <span> Include Time?\n                                    &nbsp; <Info size={14} id='includetimeline'/>\n                                </span>\n                                <UncontrolledPopover trigger='hover' placement='top' target='includetimeline'>\n                                    <PopoverHeader>Details</PopoverHeader>\n                                    <PopoverBody> You can set the campaign to be active within specific hours of each timeframe. Also known as happy hour. </PopoverBody>\n                                </UncontrolledPopover>\n                                <CustomInput\n                                    type='switch'\n                                    id='isTime'\n                                    name='isTime'\n                                    disabled={onlyView}\n                                    checked={userInput.isTime}\n                                    onChange={(e) => {\n                                        if (e.target.checked) {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: true, \n                                                outsideHourCommissionId: 0\n                                            })\n                                        } else {\n                                            setUserInput({ \n                                                ...userInput, \n                                                isTime: false, \n                                                startHour: '', \n                                                endHour: '', \n                                                outsideHourCommissionId: 0 \n                                            })\n                                        }\n                                    }\n                                    }\n                                />\n                            </CardHeader>\n                            <CardBody>\n                                {\n                                    userInput.isTime && <Row className='fade-in'>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"startHour\">Start Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.startHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: Date.now(),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => {\n                                                        console.log(date)\n                                                        console.log(new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString())\n                                                        setUserInput({ ...userInput, startHour: flatpickr.formatDate(date[0], 'H : i'), endHour: new Date(new Date(date[0]).setHours(new Date(date[0]).getHours() + 1)).toString() })\n                                                    }}\n                                                /> */}\n                                                <Input type=\"time\"\n                                                    name=\"startHour\"\n                                                    id='startHour'\n                                                    value={userInput.startHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        <Col sm=\"6\" >\n                                            <FormGroup>\n                                                <Label for=\"endHour\">End Hour<span style={{ color: 'red' }}>*</span></Label>\n                                                {/* <Flatpickr\n                                                    className='form-control'\n                                                    // value={userInput.endHour}\n                                                    id='timepicker'\n                                                    options={{\n                                                        defaultDate: new Date(Date.now()).setHours(new Date(Date.now()).getHours() + 1),\n                                                        // minDate: new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1), \n                                                        minDate: new Date(new Date(userInput.startHour).setHours(new Date(userInput.startHour).getHours() + 1)),\n                                                        enableTime: true,\n                                                        noCalendar: true,\n                                                        dateFormat: 'H:i',\n                                                        time_24hr: false\n                                                    }}\n                                                    onChange={date => setUserInput({ ...userInput, endHour: flatpickr.formatDate(date[0], 'H : i') })}\n                                                /> */}\n                                                <Input\n                                                    type=\"time\"\n                                                    min={userInput.startHour}\n                                                    name=\"endHour\"\n                                                    id='endHour'\n                                                    value={userInput.endHour}\n                                                    onChange={handleChange}\n                                                    required\n                                                    disabled={onlyView}\n                                                // placeholder='0'\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                        {\n                                            !userInput.isCertainTimeline && <Col sm=\"12\" >\n                                                <FormGroup>\n                                                    <Label for=\"Businesses\">Select Off-hour Rule</Label>\n                                                    { !isCommissionRuleListLoading ? <Select\n                                                        ref={ref1}\n                                                        theme={selectThemeColors}\n                                                        maxMenuHeight={200}\n                                                        className='react-select'\n                                                        classNamePrefix='select'\n                                                        defaultValue={\n                                                            userInput.outsideHourCommissionId > 0 ? commissionRuleList.find(({ value }) => (+value) === (+userInput.outsideHourCommissionId)) : null\n                                                        }\n                                                        onChange={(selected) => {\n                                                            setUserInput({ \n                                                                ...userInput, \n                                                                outsideHourCommissionId: selected ? selected.value : 0 \n                                                            })\n                                                        }}\n                                                        isDisabled={onlyView}\n                                                        options={commissionRuleList}\n                                                        isClearable                                                    \n                                                     /> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                    }\n                                                </FormGroup>\n                                                {/* <Input\n                                                    required\n                                                    style={{\n                                                        opacity: 0,\n                                                        width: \"100%\",\n                                                        height: 0\n                                                        // position: \"absolute\"\n                                                    }}\n                                                    onFocus={e => ref1.current.select.focus()}\n                                                    value={userInput.outsideHourCommissionId || ''}\n                                                    onChange={e => ''}\n                                                /> */}\n                                            </Col>\n                                        }\n                                    </Row>}\n                            </CardBody>\n                        </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n\n                {/* Campaign Rule Type  */}\n                <Fragment>\n                        <Row>\n                            <Col md=\"12\">\n                              <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"12\" >\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <FormGroup>\n                                                        <Label for=\"commissionType\">Campaign Rule Type<span style={{ color: 'red' }}>*</span><Info size={14} id='campaignruletype'/></Label>\n                                                        <UncontrolledPopover trigger='hover' placement='top' target='campaignruletype'>\n                                                            <PopoverHeader>Details</PopoverHeader>\n                                                            <PopoverBody> To set the campaign eligibility amount to be fixed-any amount, flexible for threshold. </PopoverBody>\n                                                        </UncontrolledPopover>\n                                                        <Select\n                                                            theme={selectThemeColors}\n                                                            maxMenuHeight={200}\n                                                            className='react-select'\n                                                            classNamePrefix='select'\n                                                            defaultValue={\n                                                                userInput.commissionType === 'fixed' ? { value: 'fixed', label: 'Fixed' } : (userInput.commissionType === 'flexible' ? { value: 'flexible', label: 'Flexible' } : null)\n                                                            }\n                                                            onChange={(selected) => {\n                                                                if (selected.value === 'flexible') {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value, isPercentage: false, amount: 0 })\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                } else {\n                                                                    setUserInput({ ...userInput, commissionType: selected.value })\n                                                                    setTableData([{}])\n                                                                    setTableData1([{}])\n                                                                    // setneedRefresh(needRefresh + 1)\n                                                                }\n                                                            }}\n                                                            isDisabled={onlyView}\n                                                            options={[{ value: 'fixed', label: 'Fixed' }, { value: 'flexible', label: 'Flexible' }]}\n                                                        />\n                                                     </FormGroup>\n                                                </Col>\n                                            </Row>\n                                        </Col>\n\n                                        {\n                                            userInput.commissionType === 'fixed' && <Col sm = \"12\" md=\"12\">\n                                            {/* Cash-back reward*/}\n                                            {\n                                                userInput.reward_type === 4 && <Row>\n                                                            <Col sm=\"12\" className='mt-1'>\n                                                                <Row>\n                                                                    <Col md=\"12\">\n                                                                        <Label className='d-block'><h6>Campaign Rule Condition<span style={{ color: 'red' }}>*</span></h6></Label>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                        <FormGroup check inline  className='mt-1' >\n                                                                        {/* <Label check> */}\n                                                                            <CustomInput type='radio' name='flat' id='flat' label=\"Flat\" checked={!userInput.isPercentage}\n                                                                                onChange={() => {\n                                                                                    setUserInput({ ...userInput, isPercentage: false, min: 0, max: 0 })\n                                                                                }}\n                                                                                disabled={onlyView}\n                                                                            />\n                                                                        {/* </Label> */}\n                                                                    </FormGroup>\n                                                                    </Col>\n                                                                    <Col md=\"1\">\n                                                                            <FormGroup check inline  className='mt-1'>\n                                                                            {/* <Label check> */}\n                                                                                <CustomInput type='radio' label=\"Percentage\" name='percentage' id='percentage' checked={userInput.isPercentage}\n                                                                                    onChange={() => {\n                                                                                        setUserInput({ ...userInput, isPercentage: true })\n                                                                                    }}\n                                                                                    disabled={onlyView}\n                                                                                />\n                                                                            {/* </Label> */}\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            \n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\"  className='mt-1'>\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward{userInput.isPercentage && <span> %</span>}<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={0.01}\n                                                                        min={0.01}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            {\n                                                                userInput.isPercentage === true && <Row className='fade-in'>\n                                                                    <Col sm=\"6\"  className='mt-1' >\n                                                                        <FormGroup>\n                                                                            <Label for=\"min\">Minimum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"min\"\n                                                                                id='min'\n                                                                                value={userInput.min}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                    <Col sm=\"6\"  className='mt-1'>\n                                                                        <FormGroup>\n                                                                            <Label for=\"max\">Maximum Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                            <Input type=\"number\"\n                                                                                name=\"max\"\n                                                                                id='max'\n                                                                                value={userInput.max}\n                                                                                onChange={handleChange}\n                                                                                required\n                                                                                placeholder=\"0\"\n                                                                                onWheel={(e) => e.target.blur()}\n                                                                                step={0.01}\n                                                                                min={0.01}\n                                                                                disabled={onlyView}\n\n                                                                            />\n                                                                        </FormGroup>\n                                                                    </Col>\n                                                                </Row>\n                                                            }\n                                                        </Row>\n                                            }\n                                            {/* Voucher reward*/}\n                                            {\n                                                userInput.reward_type === 1 && <Row>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_voucherid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment> <Select\n                                                                        ref={srRef}\n                                                                        theme={selectThemeColors}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.snreward_voucherid) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_voucherid: selected.value })\n                                                                        }}\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_voucherid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isVoucherListLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_voucherid: selected.value })\n                                                                        }}\n                                                                        defaultValue={\n                                                                            userInput.rxreward_voucherid ? voucherList.find(({ value }) => (value) === userInput.rxreward_voucherid) : null\n                                                                        }\n                                                                        options={voucherList}\n                                                                        isDisabled={onlyView}\n\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_voucherid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                    }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* Data-pack reward */}\n                                            {\n                                                 userInput.reward_type === 2 && <Row>\n                                                        \n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"snreward_datapack_groupid\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={srRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.snreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.snreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, snreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        disabled={onlyView}\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => srRef.current.select.focus()}\n                                                                        value={userInput.snreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"5\" >\n                                                                <FormGroup className='fade-in'>\n                                                                    <Label for=\"rxreward_datapack_groupid\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    { !isDatapackLoading ? <Fragment><Select\n                                                                        theme={selectThemeColors}\n                                                                        ref={rrRef}\n                                                                        maxMenuHeight={200}\n                                                                        className='wid-100 react-select'\n                                                                        classNamePrefix='select'\n                                                                        defaultValue={\n                                                                            userInput.rxreward_datapack_groupid > 0 ? datapackList.find(({ value }) => (+value) === (+userInput.rxreward_datapack_groupid)) : null\n                                                                        }\n                                                                        onChange={(selected) => {\n                                                                            setUserInput({ ...userInput, rxreward_datapack_groupid: selected.value })\n                                                                        }}\n                                                                        options={datapackList}\n                                                                        menuPlacement=\"top\"\n                                                                        isDisabled={onlyView}\n                                                                    />\n                                                                    <Input\n                                                                        required\n                                                                        style={{\n                                                                            opacity: 0,\n                                                                            width: \"100%\",\n                                                                            height: 0\n                                                                            // position: \"absolute\"\n                                                                        }}\n                                                                        onFocus={e => rrRef.current.select.focus()}\n                                                                        value={userInput.rxreward_datapack_groupid || ''}\n                                                                        onChange={e => ''}\n                                                                        disabled={onlyView}\n                                                                    /></Fragment> : <BeatLoader color=\"#6610f2\" size={10}/>\n                                                                }\n                                                                </FormGroup>\n                                                            </Col>\n                                                        </Row>\n                                            }\n                                            {/* point reward */}\n                                            {\n                                                userInput.reward_type === 3 && <Row>\n                                                  \n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"snAmount\">Sender Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"snAmount\"\n                                                                        id='snAmount'\n                                                                        value={userInput.snAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n                                                            <Col sm=\"3\" >\n                                                                <FormGroup>\n                                                                    <Label for=\"rxAmount\">Receiver Reward<span style={{ color: 'red' }}>*</span></Label>\n                                                                    <Input type=\"number\"\n                                                                        name=\"rxAmount\"\n                                                                        id='rxAmount'\n                                                                        value={userInput.rxAmount}\n                                                                        onChange={handleChange}\n                                                                        required\n                                                                        placeholder=\"0\"\n                                                                        onWheel={(e) => e.target.blur()}\n                                                                        step={1}\n                                                                        min={1}\n                                                                        disabled={onlyView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </Col>\n\n                                                        </Row>\n                                            }\n                                        </Col>\n                                        }\n\n                                    </Row>\n                                </CardBody>\n                              </Card>  \n                            </Col>\n                          \n                        </Row>\n                </Fragment>\n\n                {\n                    userInput.commissionType === 'flexible' && <Fragment>\n                    <Row>\n                        <Col md=\"12\">\n                            <Card>\n                                <CardBody>\n                                    {/* Cash-Back Reward*/}\n                                    {\n                                        userInput.reward_type === 4 && <CommonDataTable column={column} TableData={tableData} />\n                                    }\n\n                                    {/* Voucher Reward*/}\n                                    {\n                                       userInput.reward_type === 1 && (!isVoucherListLoading ? <CommonDataTable column={column1} TableData={tableData1} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n\n                                    {/* Data-Pack reward*/}\n                                    {\n                                        userInput.reward_type === 2 && (!isDatapackLoading ? <CommonDataTable column={column2} TableData={tableData2} /> : <BeatLoader color=\"#6610f2\" size={10}/>)\n                                    }\n                                    {/* Point reward */}\n                                    {\n                                        userInput.reward_type === 3 && <CommonDataTable column={column3} TableData={tableData3} />\n                                    }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Fragment>\n                }\n        </Fragment>\n    )\n}\n\nexport default RealTimeCommisionRuleLogic"],"sourceRoot":""}