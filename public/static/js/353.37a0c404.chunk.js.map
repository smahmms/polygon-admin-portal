{"version":3,"sources":["views/pages/authentication/GoCardless.js","views/pages/authentication/PaypalCardForm.js","views/pages/authentication/AddCreditCard.js","views/pages/authentication/CardDetails.js","views/viewhelper.js"],"names":["withReactContent","Swal","GoCardless","props","setConditionalRendering","showCompanyName","setshowCompanyName","continueBtn","setcontinueBtn","userinput","setuserinput","useState","JSON","parse","localStorage","getItem","isnewaccount","isibn","accountnumber","sortcode","accountholdername","isneedmorethenonepersontoauth","addpaymentid","payment_method_id","sub_type","errors","setErrors","email","address","accountNumber","isloading","setisloading","showCustomPostCode","setshowCustomPostCode","CustomPostCode","setCustomPostCode","PostCodeError","setPostCodeError","postcodefetching","setpostcodefetching","businessaddress","setbusinessaddress","tempaddress","settempaddress","loader","setLoader","ErrorTexts","setErrorTexts","onChange","e","target","name","chkEmail","test","value","err","length","_jsx","className","children","Card","Form","style","width","onSubmit","preventDefault","city","firstname","lastname","postcode","useJwt","customerBusinessRegistration","then","res","window","location","href","data","payload","payment_url","catch","error","Error","response","console","log","autoComplete","_jsxs","Row","Col","md","Alert","color","map","i","concat","message","Label","Input","required","placeholder","type","companyname","disabled","FormGroup","for","InputGroup","InputGroupAddon","addonType","InputGroupText","Search","size","id","Button","paddingBottom","outline","Spinner","onClick","searchPostcode","country","ukAddressEndpoint","postCode","addresses","item","index","label","formatted_address","filter","splice","toString","CustomInput","checked","inline","sm","Select","styles","control","base","state","borderColor","maxMenuHeight","theme","selectThemeColors","classNamePrefix","index1","town_or_city","options","isClearable","Ripple","marginTop","Send","ToastContent","_ref","role","Fragment","Avatar","icon","Coffee","PaypalCardForm","ability","useContext","AbilityContext","skin","setSkin","useSkin","history","useHistory","dispatch","useDispatch","register","handleSubmit","trigger","useForm","valErrors","setValErrors","docerror","setdocerror","stripePromise","setStripePromise","isLoad","setIsLoad","amount","setAmount","stripe","useStripe","elements","useElements","CARD_ELEMENT_OPTIONS","useRef","lineHeight","fontSize","invalid","iconColor","userInput","setUserInput","card_name","card_number","card_address","card_expiry","card_cvc","paymentMethodId","illustration","require","default","action","async","paymentMethodObj","card","getElement","CardNumberElement","createPaymentMethod","handleServerResponse","alert","requiresAction","errorAction","paymentIntent","handleCardAction","clientSecret","payByStripe","paymentIntentId","payload1","user_info","accessToken","token","refreshToken","extras","eCommerceCartItemsCount","subject","handleLogin","update","toast","success","username","transition","Slide","hideProgressBar","autoClose","setItem","getBMStoken","BMS_USER","password","BMS_PASS","jwtToken","customerbusinesslistbymobileno","mobile","Number","mobileno","stringify","push","getHomeRouteForLoggedInUser","paymentMethod","onBlur","CardExpiryElement","CardCvcElement","CreditCardDetails","childFunc","useEffect","stripeData","loadStripe","publishableKey","parseFloat","Elements","Link","to","CardDetails","activeTab","setActiveTab","toggle","tab","userData","maxWidth","CardBody","Nav","pills","NavItem","NavLink","active","TabContent","TabPane","tabId","status","position","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","Object","keys","Success"],"mappings":"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","file":"static/js/353.37a0c404.chunk.js","sourcesContent":["import useJwt from '@src/auth/jwt/useJwt'\nimport { selectThemeColors } from '@utils'\nimport React, { useState } from 'react'\nimport { Search, Send } from 'react-feather'\nimport Select from 'react-select'\nimport { Alert, Button, Card, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, InputGroup, InputGroupAddon, InputGroupText, Label, Row, Spinner } from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n// import DirectDebitLogo from '../../../../assets/images/logo/DirectDebitLogo.png'\nimport { toast } from 'react-toastify'\nimport { Error } from '../../viewhelper'\n\nconst GoCardless = (props) => {\n    const { setConditionalRendering, showCompanyName, setshowCompanyName, continueBtn, setcontinueBtn } = props\n    const [userinput, setuserinput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        isnewaccount: true,\n        isibn: false,\n        accountnumber: \"\",\n        // address: \"\",\n        // city: \"\",\n        // companyname: \"\",\n        // country: \"\",\n        // email: \"\",\n        // firstname: \"\",\n        // lastname: \"\",\n        // postcode: \"\",\n        sortcode: \"\",\n        accountholdername: \"\",\n        // customerid: \"\",\n        isneedmorethenonepersontoauth: false,\n        addpaymentid: 0,\n        payment_method_id: 1,\n        sub_type: \"monthly\"\n    })  \n    const [errors, setErrors] = useState({\n        email: false,\n        address: false,\n        accountNumber: false,\n        sortcode: false\n    })\n    const [isloading, setisloading] = useState(false)\n    const [showCustomPostCode, setshowCustomPostCode] = useState(false)\n    const [CustomPostCode, setCustomPostCode] = useState(true)\n    const [PostCodeError, setPostCodeError] = useState(false)\n    const [postcodefetching, setpostcodefetching] = useState(false)\n    const [businessaddress, setbusinessaddress] = useState([])\n    const [tempaddress, settempaddress] = useState([])\n    const [loader, setLoader] = useState(false)\n    const [ErrorTexts, setErrorTexts] = useState([])\n\n    const onChange = (e) => {\n        // if (e.target.name === 'postcode') {\n        //     const chkLength = /^.{6,8}$/.test(e.target.value)\n        //     if (chkLength) {\n        //         setPostCodeError(false)\n        //     } else { setPostCodeError(true) }\n        //     // console.log(chkLength)\n        // }\n        if (e.target.name === 'email') {\n            const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\n            const err = { ...errors }\n            !chkEmail ? err.email = true : err.email = false\n            setErrors({ ...err })\n        }\n        if (e.target.name === 'sortcode') {\n            const err = { ...errors }\n            e.target.value.length !== 6 ? err.sortcode = true : err.sortcode = false\n            setErrors({ ...err })\n        }\n        if (e.target.name === 'accountnumber') {\n            const err = { ...errors }\n            e.target.value.length !== 8 ? err.accountNumber = true : err.accountNumber = false\n            setErrors({ ...err })\n        }\n        setuserinput({ ...userinput, [e.target.name]: e.target.value })\n    }\n\n\n    const addressChange = (item) => {\n        const index1 = +item.value\n        setuserinput({ ...userinput, address: item.label, country: tempaddress[index1].country, city: tempaddress[index1].town_or_city })\n    }\n\n    const handleCustomPostCode = (e) => {\n        setuserinput({ ...userinput, country: '', address: '', city: '' })\n        if (e.target.checked) {\n            setCustomPostCode(false)\n        } else {\n            setCustomPostCode(true)\n        }\n    }\n\n    const hanldeAuthPerson = (e) => {\n        if (e.target.checked) {\n            setuserinput({ ...userinput, isneedmorethenonepersontoauth: true })\n        } else {\n            setuserinput({ ...userinput, isneedmorethenonepersontoauth: false })\n        }\n    }\n\n    const searchPostcode = () => {\n        if (userinput.postcode) {\n            setpostcodefetching(true)\n            setbusinessaddress([])\n            setuserinput({ ...userinput, address: '', country: '', city: '' })\n            useJwt.ukAddressEndpoint({ postCode: userinput.postcode }).then(res => {\n                const { addresses } = res.data.payload\n                // console.log(addresses)\n                if (!addresses.length) {\n                    setshowCustomPostCode(true)\n                } else { setshowCustomPostCode(false) }\n                setCustomPostCode(true)\n                const data = addresses.map((item, index) => {\n                    const format = item.formatted_address.filter(item => item).splice(0, 1).toString()\n                    return { value: index, label: format }\n                })  //convert to string\n                setpostcodefetching(false)\n                setbusinessaddress(data)\n                settempaddress(addresses)\n                // setuserinput({ ...userinput })\n            })\n                .catch(err => {\n                    setpostcodefetching(false)\n                    Error(err)\n                    setshowCustomPostCode(true)\n                })\n        }\n    }\n\n    const handleContinue = () => {\n        setConditionalRendering({\n            showDDSForm: false,\n            showDDSDetails: true,\n            showDDSConfirmation: false\n        })\n    }\n    const onSubmit = (e) => {\n        e.preventDefault()\n        // if (!userinput.address && userinput.postcode) {\n        //     searchPostcode()\n        // }\n        // setcontinueBtn(true)\n        // const { IBAN, IBANsortCode, accountnumber, address, city, companyname, country, email, firstname, lastname, postcode, sortcode, accountholdername, customerid, isneedmorethenonepersontoauth } = userinput\n        const { accountnumber, address, city, email, firstname, lastname, postcode, sortcode, accountholdername } = userinput\n\n        const err = { ...errors }\n        !address ? err.address = true : err.address = false\n        setErrors({ ...err })\n\n        if (!address || errors.email || errors.sortcode || errors.accountNumber) {\n            return\n        }\n\n        setLoader(true)\n        // console.log({\n        //     accountnumber, address, city, email, firstname, lastname, postcode, sortcode, accountholdername\n        // })\n\n        \n        // useJwt.DDScreateCustomer({ address, city, email, firstname, lastname, postcode }).then(res => {\n        // console.log(userinput)    \n        useJwt.customerBusinessRegistration({...userinput}).then(res => {\n            //console.log(res)\n            window.location.href = res.data.payload.payment_url\n            // window.location.href = res.data.payload.payment_url\n            \n        }).catch(error => {\n            setLoader(false)\n            Error(error.response)\n                // console.log(error.response.data.message)\n                console.log(error.response)\n          \n        })\n    }\n    return (\n        <div className='m-0'>\n            <Card>\n                {/* <CardHeader className='border-bottom'>\n                    <CardTitle tag='h3'>Set Your Direct Debit Account First</CardTitle>\n                    <div>\n                    </div>\n                </CardHeader> */}\n                <Form className=\"p-2\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\n                    <Row>\n                        {!!ErrorTexts.length && <Col md='12'>\n                            <Alert color='danger' className='p-1'>\n                                <ul>\n                                    {\n                                        ErrorTexts.map((err, i) => <li key={i}>{`${err.message}`}</li>)\n                                    }\n                                </ul>\n                            </Alert>\n                        </Col>}\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{showCompanyName ? 'Company name' : 'First Name'}</Label>\n                            {!showCompanyName ? <Input\n                                required\n                                placeholder=\"Firstname\"\n                                type='text'\n                                name='firstname'\n                                value={userinput.firstname}\n                                onChange={onChange}\n                            /> : <Input\n                                required\n                                placeholder=\"Your Company Name\"\n                                type='text'\n                                name='companyname'\n                                value={userinput.companyname}\n                                onChange={onChange}\n                            />}\n                        </Col>\n\n                        {!showCompanyName && <Col md='4' className=\"mb-1\">\n                            <Label >Last Name</Label>\n                            <Input\n                                required\n                                placeholder=\"Lastname\"\n                                type='text'\n                                name='lastname'\n                                value={userinput.lastname}\n                                onChange={onChange}\n                            />\n                        </Col>}\n                        <Col md='4' className=\"mb-1\">\n                            <Label >Email</Label>\n                            <Input\n                                required\n                                placeholder=\"Your Email\"\n                                type='email'\n                                name='email'\n                                value={userinput.email}\n                                onChange={onChange}\n                            />\n                            {errors.email && <small style={{ color: 'red' }}>Please enter a valid email</small>}\n                        </Col>\n\n                        <Col md='4' className=\"mb-1\">\n                            <Label >Account Holder Name</Label>\n                            <Input\n                                required\n                                placeholder=\"Account Holder Name\"\n                                type='text'\n                                name='accountholdername'\n                                value={userinput.accountholdername}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                        </Col>\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{userinput.isibn && 'IBAN'} Sort Code</Label>\n                            <Input\n                                required\n                                placeholder='Sort Code'\n                                type='number'\n                                name='sortcode'\n                                value={userinput.sortcode}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                            {errors.sortcode && <small style={{ color: 'red' }}>must be 6 character</small>}\n                        </Col>\n\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{userinput.isibn ? 'IBAN' : 'Account Number'} </Label>\n                            <Input\n                                required\n                                placeholder='Account Number'\n                                type='number'\n                                name='accountnumber'\n                                value={userinput.accountnumber}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                            {errors.accountNumber && <small style={{ color: 'red' }}>must be 8 character</small>}\n                        </Col>\n\n                        <Col md='12'>\n                            <hr />\n                            <Card>\n                                <Row>\n                                    <Col md='4'>\n                                        <FormGroup>\n                                            <Label for='postcode'>Post Code<span style={{ color: 'red' }}>*</span></Label>\n                                            <InputGroup className='input-group-merge mb-1'>\n                                                <InputGroupAddon addonType='prepend'>\n                                                    <InputGroupText>\n                                                        <Search size={14} />\n                                                    </InputGroupText>\n                                                </InputGroupAddon>\n                                                <Input type='text'\n                                                    name='postcode'\n                                                    id='postcode'\n                                                    placeholder='Post Code'\n                                                    value={userinput.postcode}\n                                                    onChange={onChange}\n                                                    required\n                                                />\n                                                <InputGroupAddon addonType='append'>\n                                                    {postcodefetching ? <Button style={{ paddingBottom: '9px' }} color='primary' outline disabled>\n                                                        <Spinner color='primary' size='sm' />\n                                                    </Button> : <Button color='primary' outline onClick={searchPostcode}>\n                                                        Search\n                                                    </Button>\n                                                    }\n                                                </InputGroupAddon>\n                                                <div className=\"p-0 m-0 w-100\">\n                                                    {showCustomPostCode && !PostCodeError && <small style={{ color: 'red' }}> postcode notfound</small>}\n                                                </div>\n                                                <div className=\"p-0 m-0 w-100\">\n                                                    {PostCodeError && <small style={{ color: 'red' }}> postcode must be 6 to 8 character</small>}\n                                                </div>\n                                                {/* {errors && errors.postcode && <FormFeedback>{errors.postcode.message}</FormFeedback>} */}\n                                            </InputGroup>\n                                            {showCustomPostCode && <CustomInput type='checkbox' id={'postcode1'} value={'CPC'} onChange={handleCustomPostCode} inline label='Click here to enter your address manually' />}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md='3' sm='12'>\n                                        <FormGroup>\n                                            <Label for='address'>Address <span style={{ color: 'red' }}>*</span></Label>\n                                            {\n                                                businessaddress.length ? <Select\n                                                    styles={{\n                                                        control: (base, state) => ({\n                                                            ...base,\n                                                            borderColor: '#7367f0'\n                                                        })\n                                                    }}\n                                                    maxMenuHeight={150}\n                                                    theme={selectThemeColors}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    name=\"address\"\n                                                    required\n                                                    onChange={addressChange}\n                                                    // defaultValue={businessaddress[0]}\n                                                    options={businessaddress}\n                                                    isClearable={false}\n                                                /> : <Input\n                                                    type='text'\n                                                    required\n                                                    onChange={onChange}\n                                                    value={userinput.address}\n                                                    disabled={CustomPostCode}\n                                                    name='address'\n                                                    placeholder='Address' />\n                                            }\n                                            {errors.address && !userinput.address && <small style={{ color: 'red' }}>Address is required</small>}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md='3' sm='12'>\n                                        <FormGroup>\n                                            <Label for='country'>Country <span style={{ color: 'red' }}>*</span></Label>\n                                            <Input onChange={onChange} type='text' required name='country' value={userinput.country} disabled={CustomPostCode} id='country' placeholder='Country' />\n                                        </FormGroup>\n                                    </Col>\n\n                                    <Col md='2' sm='12'>\n                                        <FormGroup>\n                                            <Label for='city'>City <span style={{ color: 'red' }}>*</span></Label>\n                                            <Input onChange={onChange} type='text' required name='city' value={userinput.city} disabled={CustomPostCode} id='city' placeholder='City' />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n\n                        <Col md='12' >\n                            <small>You may cancel this Direct Debit at any time by contacting Rilac or your bank</small>\n                        </Col>\n\n                        <Col md='12' className='text-center'>\n                            {loader ? <Button.Ripple className='ml-2' color='primary' disabled style={{ marginTop: '22px' }}>\n                                <Spinner size='sm' />\n                                <span className='align-middle ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' style={{ marginTop: '22px' }} type=\"submit\">\n                                <Send size={15} />\n                                <span className='align-middle ml-50'>Submit</span>\n                            </Button.Ripple>}\n\n                        </Col>\n                    </Row>\n                </Form>\n            </Card>\n        </div>\n    )\n}\n\nexport default GoCardless","import { useSkin } from \"@hooks/useSkin\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport \"@styles/base/pages/page-auth.scss\"\nimport Avatar from '@components/avatar'\nimport { isObjEmpty, selectThemeColors, getHomeRouteForLoggedInUser } from \"@utils\"\nimport classnames from \"classnames\"\nimport { Fragment, useContext, useEffect, useRef, useState } from \"react\"\nimport { Coffee, Plus, Send } from \"react-feather\"\nimport { useForm } from \"react-hook-form\"\nimport { useDispatch } from \"react-redux\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Slide, toast } from 'react-toastify'\nimport Select from 'react-select'\nimport {\n    Button, Col, CustomInput,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner\n} from \"reactstrap\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport { PaymentElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements, Elements } from '@stripe/react-stripe-js'\nimport { KeyboardReturn } from \"@mui/icons-material\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport { handleLogin } from \"../../../redux/actions/auth\"\nimport {BMS_USER, BMS_PASS} from '../../../Configurables'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to system. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst PaypalCardForm = () => {\n    const ability = useContext(AbilityContext)\n\n    const [skin, setSkin] = useSkin()\n\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n\n    const { register, errors, handleSubmit, trigger } = useForm()\n\n    const [valErrors, setValErrors] = useState({})\n    const [docerror, setdocerror] = useState({})\n    const [stripePromise, setStripePromise] = useState('')\n    const [isLoad, setIsLoad] = useState(false)\n    const [amount, setAmount] = useState(0)\n    const [loader, setLoader] = useState(false)\n    const stripe = useStripe()\n    const elements = useElements()\n    const childFunc = useRef(null)\n\n    const CARD_ELEMENT_OPTIONS = {\n        style: {\n          base: {\n            lineHeight: \"27px\",\n            color: \"#212529\",\n            fontSize: \"1.1rem\",\n            \"::placeholder\": {\n              color: \"#aab7c4\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      }\n\n      const handleSuccessAlert = () => {\n        setDisabledModal(!disabledModal)\n      }\n\n      const [userInput, setUserInput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        // businessname: '',\n        // email: '',\n        // mobile: '',\n        // password: '',\n        // country: 'UK',\n        // businesscategoryids: 0,\n        // status: 1,\n        // logo: '',\n        // city: '',\n        // city_id: 0,\n        // web_login: true,\n        card_name: '',\n        card_number: '',\n        card_address: '',\n        card_expiry: '',\n        card_cvc: '',\n        paymentMethodId: '',\n        payment_method_id: 2,\n        sub_type: \"monthly\"\n    })\n\n    // useEffect(async () => {\n    //     //console.log(\"start use effect\")\n    //     useJwt.stripeData().then(async res => {\n    //         const payload1 = res.data.payload\n    //         setStripePromise(loadStripe(payload1.publishableKey))\n    //         setIsLoad(true)\n    //         console.log(payload1)\n    //         //console.log(\"inside then use effect\")\n\n    //     }).catch(err => {\n    //         //console.log(\"inside catch use effect\")\n    //         //console.log(err)\n    //         Error(err)\n    //     })\n    //     // setAmount(parseFloat(localStorage.getItem('amount')))\n    //     setAmount(parseFloat(50))\n    // }, [])\n\n    const illustration =\n        skin === \"dark\" ? \"register-v2-dark.svg\" : \"register-v2.svg\",\n        source = require(`@src/assets/images/pages/${illustration}`).default\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        // console.log({\n        //     mobile: mobileNumber,\n        //     email,\n        //     firstname: firstName,\n        //     lastname: lastName\n        // })\n        // if (isObjEmpty(errors)) {\n        //     useJwt\n        //         .merchentregister({\n        //             mobile: mobileNumber,\n        //             email,\n        //             firstname: firstName,\n        //             lastname: lastName\n        //         })\n        //         .then((res) => {\n        //             console.log(res.data, res.data.payload, \"showing response\")\n\n        //             if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered\n        //             ) {\n        //                 history.push(\"/login\")\n        //             } else if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered === false\n        //             ) {\n        //                 localStorage.setItem(\"mobilenumber\", mobileNumber)\n        //                 history.push(\"/merchantsetpassword\")\n        //             }\n        //         })\n        //         .catch((err) => //console.log(err))\n        // }\n        \n        //un comment down\n        setIsLoad(true)\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            setIsLoad(false)\n            return\n        }\n\n        const paymentMethodObj = {\n            type: 'card',\n            card: elements.getElement(CardNumberElement)\n            // billing_details: {\n            //   name\n            // }\n          }\n          // console.log(paymentMethodObj)\n          await stripe.createPaymentMethod(paymentMethodObj).then(async (data) => {\n\n            // if (!data.error) {\n\n              // console.log(data)\n              // console.log(data.paymentMethod.id)\n              // console.log({ ...userInput, paymentMethodId: data.paymentMethod.id })\n              // setUserInput({ ...userInput, paymentMethodId: data.paymentMethod.id })\n\n              const handleServerResponse = async (response) => {\n                if (response.error) {\n                  // Show error from server on payment form\n                  setIsLoad(false)\n                  alert(response.error)\n                } else if (response.requiresAction) {\n                  // Use Stripe.js to handle the required card action\n                  const { error: errorAction, paymentIntent } =\n                    await stripe.handleCardAction(response.clientSecret)\n                  if (errorAction) {\n                    // Show error from Stripe.js in payment form\n                    setIsLoad(false)\n                    alert(errorAction)\n                  } else {\n                    // The card action has been handled\n                    // The PaymentIntent can be confirmed again on the server\n                    useJwt.payByStripe(\n                      {\n                        paymentIntentId: paymentIntent?.id\n                      }).then(async res => {\n                        const payload1 = res.data.payload\n                        handleServerResponse(payload1)\n                      }).catch(err => {\n                        Error(err)\n                      })\n                  }\n                } else {\n                  // Show success message\n                  setIsLoad(false)\n                  // handleSuccessAlert()\n        \n                  console.log(response.payload.data)\n        \n                  const data = {\n                    ...response.payload.data.user_info,\n                    // avatar: \"https://i.imgur.com/P4b2RHh.png\",\n                    accessToken: response.payload.data.token,\n                    refreshToken: response.payload.data.token,\n                    extras: {\n                      eCommerceCartItemsCount: 5\n                    },\n                    role: 'vendor',\n                    ability: [\n                      {\n                        action: 'manage',\n                        subject: 'VENDOR'\n                      },\n                      {\n                        action: 'manage',\n                        subject: 'Auth'\n                      }\n                    ]\n                  }\n        \n                  dispatch(handleLogin(data))\n                  ability.update(data.ability)\n                  // localStorage.setItem('username', email)\n                  toast.success(\n                    <ToastContent name={data.username} role={data.role} />,\n                    { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n                  )\n        \n                  // await useJwt.getPMStoken({ username: \"dddd\", module: \"kkk\" }).then(res => {\n                  //   localStorage.setItem('PMStoken', res.data.data.access_token)\n                  //   localStorage.setItem(\"usePMStoken\", false)\n                  // }).catch(err => {\n                  //   console.log('getPMStoken', err)\n                  // })\n        \n                  localStorage.setItem(\"usePMStoken\", false)\n                  localStorage.setItem(\"BMSCall\", true)\n                  await useJwt.getBMStoken({ username: BMS_USER, password: BMS_PASS }).then(res => {\n                    localStorage.setItem('BMStoken', res.data.jwtToken)\n                    localStorage.setItem(\"BMSCall\", false)\n                  }).catch(err => {\n                    localStorage.setItem(\"BMSCall\", false)\n                    //console.log(err)\n                  })\n        \n                  await useJwt.customerbusinesslistbymobileno({ mobile: Number(response.payload.data.user_info.mobileno) }).then(res => {\n                    //console.log(res)\n                    localStorage.setItem('customerBusinesses', JSON.stringify(res.data.payload))\n                    history.push(getHomeRouteForLoggedInUser(data.role))\n                  }).catch(err => {\n                    Error(err)\n                    //console.log(err)\n                  })\n                }\n              }\n        \n                  \n                  await useJwt.customerBusinessRegistration({ ...userInput, paymentMethodId: data.paymentMethod.id }).then(async res => {\n                    //console.log(res)\n                    const payload1 = res.data.payload\n                    handleServerResponse(payload1)\n                    \n                 }).catch(error => {\n                  setIsLoad(false)\n                  Error(error.response)\n                        // console.log(error.response.data.message)\n                        console.log(error.response)\n                  \n                })\n  \n              // console.log(userInput)\n            // }\n          }).catch(e => {\n            console.log(e)\n          })\n          \n          \n    }\n\n    return (\n        <div className=\"\">\n         \n            <Form\n                action=\"/\"\n                className=\"auth-register-form\"\n                onSubmit={onSubmit}\n            >\n                <Row>\n                    {/* <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Owner Name\n                            </Label>\n                            <Input\n                                type=\"text\"\n                                value={userInput.businessname}\n                                placeholder=\"John\"\n                                id=\"businessname\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col> */}\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Number\n                            </Label>\n                            <CardNumberElement\n                                type=\"text\"\n                                value={userInput.card_number}\n                                placeholder=\"1234****\"\n                                id=\"cc-number\"\n                                name=\"businessname\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                onBlur={() => {\n                                    //console.log(\"CardNumberElement [blur]\", event.target.value)\n                                  }}\n                                // onChange={(e) => setUserInput({ ...userInput, card_number: e.target.value })}\n                                // onChange={(e) =>  console.log(`card number ${e.target.value}`)}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"card-expiry\">\n                                Card Expiry\n                            </Label>\n                            <CardExpiryElement\n                                type=\"text\"\n                                value={userInput.card_expiry}\n                                placeholder=\"MM/YYYY\"\n                                id=\"expiry\"\n                                name=\"expiry\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                // onChange={(e) => setUserInput({ ...userInput, card_expiry: e.target.value })}\n                                // onChange={(e) =>  console.log(`card expiry ${e.target.value}`)}\n\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                CVC\n                            </Label>\n                            <CardCvcElement\n                                type=\"text\"\n                                value={userInput.card_cvc}\n                                placeholder=\"MM/YYYY\"\n                                id=\"cvc\"\n                                name=\"cvc\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                // onChange={(e) => setUserInput({ ...userInput, card_cvc: e.target.value })}\n                                // onChange={(e) =>  console.log(`card cvc ${e}`)}\n\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col md='12' className='text-center'>\n                            {isLoad ? <Button.Ripple className='ml-2' color='primary' disabled style={{ marginTop: '22px' }}>\n                                <Spinner size='sm' />\n                                <span className='align-middle ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' style={{ marginTop: '22px' }} type=\"submit\">\n                                <Send size={15} />\n                                <span className='align-middle ml-50'>Submit</span>\n                            </Button.Ripple>}\n\n                        </Col>\n                </Row>\n\n                {/* <Button.Ripple type=\"submit\" block color=\"primary\">\n                    Sign Up\n                </Button.Ripple> */}\n            </Form>\n            </div>\n    )\n}\n\nexport default PaypalCardForm","import { useSkin } from \"@hooks/useSkin\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport \"@styles/base/pages/page-auth.scss\"\nimport { isObjEmpty, selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport { Fragment, useContext, useEffect, useRef, useState } from \"react\"\nimport { Plus } from \"react-feather\"\nimport { useForm } from \"react-hook-form\"\nimport { useDispatch } from \"react-redux\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport Select from 'react-select'\nimport {\n    Button, Col, CustomInput,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner\n} from \"reactstrap\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport { PaymentElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements, Elements } from '@stripe/react-stripe-js'\nimport { KeyboardReturn } from \"@mui/icons-material\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport PaypalCardForm from \"./PaypalCardForm\"\n\n\nconst CreditCardDetails = () => {\n    const ability = useContext(AbilityContext)\n\n    const [skin, setSkin] = useSkin()\n\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n\n    const { register, errors, handleSubmit, trigger } = useForm()\n\n    const [valErrors, setValErrors] = useState({})\n    const [docerror, setdocerror] = useState({})\n    const [stripePromise, setStripePromise] = useState('')\n    const [isLoad, setIsLoad] = useState(false)\n    const [amount, setAmount] = useState(0)\n    // let stripe = useStripe()\n    // let elements = useElements()\n    const childFunc = useRef(null)\n\n    const [userInput, setUserInput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        // businessname: '',\n        // email: '',\n        // mobile: '',\n        // password: '',\n        // country: 'UK',\n        // businesscategoryids: 0,\n        // status: 1,\n        // logo: '',\n        // city: '',\n        // city_id: 0,\n        // web_login: true,\n        // card_name: '',\n        // card_number: '',\n        // card_address: '',\n        // card_expiry: '',\n        // card_cvc: '',\n        payment_method_id: 2\n\n    })\n\n    useEffect(async () => {\n        //console.log(\"start use effect\")\n        useJwt.stripeData().then(async res => {\n            const payload1 = res.data.payload\n            setStripePromise(loadStripe(payload1.publishableKey))\n            setIsLoad(true)\n            // console.log(payload1)\n            //console.log(\"inside then use effect\")\n\n        }).catch(err => {\n            //console.log(\"inside catch use effect\")\n            //console.log(err)\n            Error(err)\n        })\n        // setAmount(parseFloat(localStorage.getItem('amount')))\n        setAmount(parseFloat(50))\n    }, [])\n\n    const illustration =\n        skin === \"dark\" ? \"register-v2-dark.svg\" : \"register-v2.svg\",\n        source = require(`@src/assets/images/pages/${illustration}`).default\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        // console.log({\n        //     mobile: mobileNumber,\n        //     email,\n        //     firstname: firstName,\n        //     lastname: lastName\n        // })\n        // if (isObjEmpty(errors)) {\n        //     useJwt\n        //         .merchentregister({\n        //             mobile: mobileNumber,\n        //             email,\n        //             firstname: firstName,\n        //             lastname: lastName\n        //         })\n        //         .then((res) => {\n        //             console.log(res.data, res.data.payload, \"showing response\")\n\n        //             if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered\n        //             ) {\n        //                 history.push(\"/login\")\n        //             } else if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered === false\n        //             ) {\n        //                 localStorage.setItem(\"mobilenumber\", mobileNumber)\n        //                 history.push(\"/merchantsetpassword\")\n        //             }\n        //         })\n        //         .catch((err) => //console.log(err))\n        // }\n\n        setIsLoad(true)\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            setIsLoad(false)\n            return\n        }\n\n        const paymentMethodObj = {\n            type: 'card',\n            card: elements.getElement(CardNumberElement)\n            // billing_details: {\n            //   name\n            // }\n          }\n        //   console.log(paymentMethodObj)\n          const paymentMethodResult = await stripe.createPaymentMethod(paymentMethodObj)\n        //   console.log(paymentMethodResult) \n\n          const handleServerResponse = async (response) => {\n            if (response.error) {\n              // Show error from server on payment form\n              setIsLoad(false)\n              alert(response.error)\n            } else if (response.requiresAction) {\n              // Use Stripe.js to handle the required card action\n              const { error: errorAction, paymentIntent } =\n                await stripe.handleCardAction(response.clientSecret)\n              if (errorAction) {\n                // Show error from Stripe.js in payment form\n                setIsLoad(false)\n                alert(errorAction)\n              } else {\n                // The card action has been handled\n                // The PaymentIntent can be confirmed again on the server\n                useJwt.payByStripe(\n                  {\n                    paymentIntentId: paymentIntent?.id\n                  }).then(async res => {\n                    const payload1 = res.data.payload\n                    handleServerResponse(payload1)\n                  }).catch(err => {\n                    Error(err)\n                  })\n              }\n            } else {\n              // Show success message\n              setIsLoad(false)\n              handleSuccessAlert()\n            }\n          }\n\n          useJwt.customerBusinessRegistration({...userinput}).then(async res => {\n            //console.log(res)\n            const payload1 = res.data.payload\n            handleServerResponse(payload1)\n            \n         }).catch(error => {\n            setLoader(false)\n            Error(error.response)\n                // console.log(error.response.data.message)\n                console.log(error.response)\n          \n        })\n\n        //   useJwt.payByStripe(\n        //     {\n        //       useStripeSdk: true,\n        //       paymentIntentId: null,\n        //       paymentMethodId: paymentMethodResult.paymentMethod.id,\n        //       currency: \"gbp\",\n        //       amount\n        //     }).then(async res => {\n        //       const payload1 = res.data.payload\n        //       handleServerResponse(payload1)\n        //     }).catch(err => {\n        //       Error(err)\n        //     })\n          \n    }\n\n    return (\n        <div className=\"\">\n            {isLoad ? <Elements stripe={stripePromise}>\n         \n            <PaypalCardForm amount={amount} childFunc={childFunc} ></PaypalCardForm>\n            {/* <Form\n                action=\"/\"\n                className=\"auth-register-form\"\n                onSubmit={onSubmit}\n            >\n                <Row>\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Owner Name\n                            </Label>\n                            <Input\n                                type=\"text\"\n                                value={userInput.businessname}\n                                placeholder=\"John\"\n                                id=\"businessname\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Number\n                            </Label>\n                            <CardNumberElement\n                                type=\"text\"\n                                value={userInput.card_number}\n                                placeholder=\"1234****\"\n                                id=\"cc-number\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"card-expiry\">\n                                Card Expiry\n                            </Label>\n                            <CardExpiryElement\n                                type=\"text\"\n                                value={userInput.card_expiry}\n                                placeholder=\"MM/YYYY\"\n                                id=\"expiry\"\n                                name=\"expiry\"\n                                onChange={(e) => setUserInput({ ...userInput, card_expiry: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                CVC\n                            </Label>\n                            <CardCvcElement\n                                type=\"text\"\n                                value={userInput.card_cvc}\n                                placeholder=\"MM/YYYY\"\n                                id=\"cvc\"\n                                name=\"cvc\"\n                                onChange={(e) => setUserInput({ ...userInput, card_cvc: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                </Row>\n\n                <Button.Ripple type=\"submit\" block color=\"primary\">\n                    Sign Up\n                </Button.Ripple>\n            </Form> */}\n            <p className=\"text-center mt-2\">\n                <span className=\"mr-25\">Already have an account?</span>\n                <Link to=\"/login\">\n                    <span>Sign in instead</span>\n                </Link>\n            </p>\n            </Elements > : <div className='d-flex justify-content-center'>\n                <Spinner className='mt-5'/>\n            </div>\n            }        \n            </div>\n    )\n}\n\nexport default CreditCardDetails","import React, { useState } from 'react'\nimport {\n  Card, CardBody, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane\n} from 'reactstrap'\nimport { Link, useHistory } from \"react-router-dom\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport CreditCardDetails from './AddCreditCard'\nimport GoCardless from './GoCardless'\n\nconst CardDetails = () => {\n  const [activeTab, setActiveTab] = useState('1')\n  const toggle = tab => setActiveTab(tab)\n  const userData = JSON.parse(localStorage.getItem('registration_data'))\n  return (\n    <Card style={{ maxWidth: \"768px\" }} className=\"mx-auto my-4\">\n      <CardBody className='pt-2'>\n        <Nav pills className=\"border-bottom pb-1\">\n          <NavItem>\n            <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\n              <span className='align-middle d-none d-sm-block'>Credit Card Details</span>\n            </NavLink>\n          </NavItem>\n         {\n          userData.country === \"UK\" &&  <NavItem>\n          <NavLink active={activeTab === '2'} onClick={() => toggle('2')}>\n            <span className='align-middle d-none d-sm-block'>Go-Cardless Details</span>\n          </NavLink>\n        </NavItem>\n         }\n        </Nav>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId='1'>\n            <CreditCardDetails />\n          </TabPane>\n          <TabPane tabId='2'>\n            <GoCardless />\n          </TabPane>\n        </TabContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CardDetails\n","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n"],"sourceRoot":""}