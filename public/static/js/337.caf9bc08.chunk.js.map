{"version":3,"sources":["views/extensions/import-export/ExportSelected.js","@core/components/extensions-header/index.js"],"names":["initialData","id","name","username","email","website","ExportSelected","data","useState","filteredData","setFilteredData","dataToExport","setDataToExport","value","setValue","modal","setModal","fileName","setFileName","fileFormat","setFileFormat","selectedRows","setSelectedRows","toggleModal","renderTableData","map","col","_jsxs","className","classnames","selected","includes","children","_jsx","CustomInput","type","label","checked","onChange","selectedRowsArr","splice","indexOf","push","handleSelect","Fragment","ExtensionsHeader","title","subTitle","link","Row","Col","sm","Card","CardBody","Button","Ripple","color","onClick","Label","for","Input","bsSize","e","target","length","filter","startsWithCondition","toLowerCase","startsWith","toString","includesCondition","handleFilter","Table","responsive","handleSelectAll","i","Modal","isOpen","toggle","onClosed","ModalHeader","ModalBody","FormGroup","placeholder","ModalFooter","handleExport","exportArr","item","concat","wb","XLSX","utils","json_to_sheet","wbout","book_new","book_append_sheet","writeFile","props","href","rel"],"mappings":"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","file":"static/js/337.caf9bc08.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\nimport ExtensionsHeader from '@components/extensions-header'\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Button,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  FormGroup,\n  CustomInput,\n  Label\n} from 'reactstrap'\nimport classnames from 'classnames'\nimport XLSX from 'xlsx'\n\nconst initialData = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n    website: 'hildegard.org'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n    website: 'anastasia.net'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n    website: 'ramiro.info'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n    website: 'kale.biz'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n    website: 'demarco.info'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n    website: 'ola.org'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n    website: 'elvis.io'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n    website: 'jacynthe.com'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n    website: 'conrad.com'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n    website: 'ambrose.net'\n  }\n]\n\nconst ExportSelected = () => {\n  const [data] = useState(initialData)\n  const [filteredData, setFilteredData] = useState([])\n  const [dataToExport, setDataToExport] = useState([])\n  const [value, setValue] = useState('')\n  const [modal, setModal] = useState(false)\n  const [fileName, setFileName] = useState('')\n  const [fileFormat, setFileFormat] = useState('xlsx')\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const toggleModal = () => setModal(!modal)\n\n  const handleFilter = e => {\n    let filteredData = []\n    const value = e.target.value\n    setValue(value)\n    if (value.length) {\n      filteredData = data.filter(col => {\n        const startsWithCondition =\n          col.name.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.email.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.website.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().startsWith(value.toLowerCase())\n\n        const includesCondition =\n          col.name.toLowerCase().includes(value.toLowerCase()) ||\n          col.email.toLowerCase().includes(value.toLowerCase()) ||\n          col.website.toLowerCase().includes(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().includes(value.toLowerCase())\n\n        if (startsWithCondition) return startsWithCondition\n        else if (!startsWithCondition && includesCondition) return includesCondition\n        else return null\n      })\n      setValue(value)\n      setFilteredData(filteredData)\n    }\n  }\n\n  const handleExport = () => {\n    const exportArr = dataToExport\n    data.map(item => {\n      if (selectedRows.includes(item.id)) {\n        return exportArr.push(item)\n      } else {\n        return null\n      }\n    })\n    setDataToExport([...exportArr])\n    const name = fileName.length ? `${fileName}.${fileFormat}` : `excel-sheet.${fileFormat}`\n    const wb = XLSX.utils.json_to_sheet(dataToExport)\n    const wbout = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(wbout, wb, 'test')\n    XLSX.writeFile(wbout, name)\n    toggleModal()\n  }\n\n  const handleSelect = id => {\n    const selectedRowsArr = selectedRows\n    if (!selectedRowsArr.includes(id)) {\n      selectedRowsArr.push(id)\n    } else if (selectedRowsArr.includes(id)) {\n      selectedRowsArr.splice(selectedRowsArr.indexOf(id), 1)\n    } else {\n      return null\n    }\n    setSelectedRows([...selectedRowsArr])\n  }\n\n  const handleSelectAll = () => {\n    let selectedRowsArr = selectedRows\n    if (selectedRowsArr.length < data.length) {\n      const ids = data.map(i => i.id)\n      selectedRowsArr = ids\n    } else if (selectedRowsArr.length === data.length) {\n      selectedRowsArr = []\n    } else {\n      return null\n    }\n\n    setSelectedRows(selectedRowsArr)\n  }\n\n  const array = value ? filteredData : data\n  const renderTableData = array.map(col => {\n    return (\n      <tr\n        key={col.id}\n        className={classnames({\n          selected: selectedRows.includes(col.id)\n        })}\n      >\n        <td>\n          <CustomInput\n            type='checkbox'\n            id={col.id}\n            label=''\n            checked={!!selectedRows.includes(col.id)}\n            onChange={() => handleSelect(col.id)}\n          />\n        </td>\n        <td>{col.email}</td>\n        <td>{col.name}</td>\n        <td>{col.website}</td>\n        <td>{col.id}</td>\n      </tr>\n    )\n  })\n\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='XLSX'\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\n        link='https://github.com/AdeleD/react-paginate'\n      />\n      <Row className='export-component'>\n        <Col sm='12'>\n          <Card>\n            <CardBody className='pb-0'>\n              <div className='d-flex flex-wrap justify-content-between'>\n                <Button.Ripple color='primary' onClick={() => toggleModal()}>\n                  Export Selected\n                </Button.Ripple>\n                <div className='d-flex align-items-center justify-content-end'>\n                  <Label for='search-input' className='mr-1'>\n                    Search\n                  </Label>\n                  <Input id='search-input' bsSize='sm' type='text' value={value} onChange={e => handleFilter(e)} />\n                </div>\n              </div>\n            </CardBody>\n            <Table className='table-hover-animation mt-2' responsive>\n              <thead>\n                <tr>\n                  <th>\n                    <CustomInput\n                      type='checkbox'\n                      id='select-all'\n                      label=''\n                      checked={!!selectedRows.length}\n                      onChange={e => handleSelectAll()}\n                    />\n                  </th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>Website</th>\n                  <th>Rank</th>\n                </tr>\n              </thead>\n              <tbody>{renderTableData}</tbody>\n            </Table>\n          </Card>\n        </Col>\n      </Row>\n      <Modal\n        isOpen={modal}\n        toggle={() => toggleModal()}\n        className='modal-dialog-centered'\n        onClosed={() => setFileName('')}\n      >\n        <ModalHeader toggle={() => toggleModal()}>Export To Excel</ModalHeader>\n        <ModalBody>\n          <FormGroup>\n            <Input\n              type='text'\n              value={fileName}\n              onChange={e => setFileName(e.target.value)}\n              placeholder='Enter File Name'\n            />\n          </FormGroup>\n          <FormGroup>\n            <CustomInput\n              type='select'\n              id='selectFileFormat'\n              name='customSelect'\n              value={fileFormat}\n              onChange={e => {\n                setFileFormat(e.target.value)\n              }}\n            >\n              <option>xlsx</option>\n              <option>csv</option>\n              <option>txt</option>\n            </CustomInput>\n          </FormGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={() => handleExport()}>\n            Export\n          </Button>\n          <Button color='flat-danger' onClick={() => toggleModal()}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default ExportSelected\n","// ** React Imports\nimport Proptypes from 'prop-types'\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ml-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  title: Proptypes.string.isRequired,\n  subTitle: Proptypes.string.isRequired,\n  link: Proptypes.string\n}\n"],"sourceRoot":""}