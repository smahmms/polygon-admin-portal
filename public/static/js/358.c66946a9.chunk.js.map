{"version":3,"sources":["views/VendorComponents/Notifications/EditModal.js","views/VendorComponents/Notifications/NotificationList.js","views/viewhelper.js","views/VendorComponents/ClientSideDataTable.js"],"names":["EditModal","_ref","modal","toggleModal","notificationInfo","setnotificationInfo","setReset","resetData","editPointRuleloading","seteditPointRuleloading","useState","_jsxs","Modal","isOpen","toggle","className","children","_jsx","ModalHeader","ModalBody","Form","style","width","autoComplete","Col","sm","FormGroup","Label","for","Input","type","name","id","value","Notification_Title","disabled","placeholder","Notification_Body","MySwal","withReactContent","Swal","NotificationList","TableDataLoading","setTableDataLoading","notificationList","setNotificationList","setModal","useEffect","useJwt","getNotifications","then","res","console","log","data","payload","catch","err","Error","column","minWidth","sortable","selector","row","slice","true","title","false","viaSMS","viaEmail","viaPushNotification","_Fragment","Eye","size","color","cursor","onClick","e","Trash","handlePoPupActions","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","notificationId","parseInt","deleteNotifications","Success","filter","x","response","buttonsStyling","isLoading","result","isConfirmed","Card","CardHeader","CardTitle","tag","CardBody","Row","md","CommonDataTable","TableData","status","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","currentPage","setCurrentPage","Fragment","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","CustomPagination","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","progressPending","progressComponent","Spinner","responsive"],"mappings":"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","file":"static/js/358.c66946a9.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\n} from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\nimport { useHistory } from 'react-router-dom'\nimport Select from 'react-select'\nimport { selectThemeColors, transformInToFormObject } from '@utils'\n\nconst EditModal = ({ modal, toggleModal, notificationInfo, setnotificationInfo, setReset, resetData }) => {\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\n\n  /*   const handleChange = (e) => {\n        setnotificationInfo({ ...notificationInfo, [e.target.name]: e.target.value })\n    } */\n\n    /* const onSubmit = (e) => {\n        e.preventDefault()\n        const { Id, SKUAmount, SKUPoints, SKUStartRange, SKUEndRange, IsRange } = notificationInfo\n        localStorage.setItem('usePMStoken', true)\n        seteditPointRuleloading(true)\n        const merchantId = BusinessList[0].pms_merchantid\n        let tempSkuPoints = 0\n        if (!IsRange) { tempSkuPoints = SKUPoints }\n        useJwt.updateMyRule(merchantId, { rule_id:Id, skuamount:SKUAmount, skupoints:tempSkuPoints, skustartrange:SKUStartRange, skuendrange:SKUEndRange, isrange:IsRange }).then(res => {\n            setReset(!resetData)\n            seteditPointRuleloading(false)\n            console.log(res)\n            toggleModal()\n            Success(res)\n        }).catch(err => {\n            seteditPointRuleloading(false)\n            localStorage.setItem('usePMStoken', false)\n            Error(err)\n            console.log(err)\n        })\n    } */\n    return (\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\n            <ModalHeader toggle={toggleModal}>Notification Details</ModalHeader>\n            <ModalBody>\n                <Form className=\"row\" style={{ width: '100%' }} /* onSubmit={onSubmit} */ autoComplete=\"off\">\n                    <Col sm=\"12\" >\n                        <FormGroup>\n                            <Label for=\"Notification_Title\">Title</Label>\n                            <Input type=\"text\"\n                                name=\"Notification_Title\"\n                                id='Notification_Title'\n                                value={notificationInfo.Notification_Title}\n                                /* onChange={handleChange} */\n                                disabled\n                                placeholder=\"your title\"\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm=\"12\" >\n                        <FormGroup>\n                            <Label for=\"Notification_Body\">Message</Label>\n                            <Input type=\"textarea\"\n                                name=\"Notification_Body\"\n                                id='Notification_Body'\n                                value={notificationInfo.Notification_Body}\n                                /* onChange={handleChange} */\n                                disabled\n                                placeholder=\"your message\"\n                            />\n                        </FormGroup>\n                    </Col>\n\n                   {/*  <Col sm=\"12\" className='text-center'>\n                        {\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                <Spinner color='white' size='sm' />\n                                <span className='ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\n                                <span >Submit</span>\n                            </Button.Ripple>\n                        }\n                    </Col> */}\n                </Form>\n            </ModalBody>\n        </Modal>\n    )\n}\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\n} from 'reactstrap'\nimport { useHistory } from 'react-router-dom'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\nimport CommonDataTable from '../ClientSideDataTable'\nimport EditModal from './EditModal'\n\nconst NotificationList = () => {\n    const [TableDataLoading, setTableDataLoading] = useState(true)\n    const [resetData, setReset] = useState(true)\n    const [notificationList, setNotificationList] = useState([])\n    const [notificationInfo, setnotificationInfo] = useState({})\n\n    const [modal, setModal] = useState(false)\n    const toggleModal = () => setModal(!modal)\n\n    useEffect(() => {\n        useJwt.getNotifications().then(res => {\n            console.log(res)\n            setNotificationList(res.data.payload)\n            setTableDataLoading(false)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n            setTableDataLoading(false)\n        })\n    }, [resetData])\n    const handlePoPupActions = (id, message) => {\n        return MySwal.fire({\n            title: message,\n            text: `You won't be able to revert this`,\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n                const notificationId = parseInt(id)\n                return useJwt.deleteNotifications({id: notificationId}).then(res => {\n                    Success(res)\n                    console.log(res)\n                    setNotificationList(notificationList.filter(x => x.id !== id))\n                }).catch(err => {\n                    console.log(err.response)\n                    Error(err)\n                })\n            },\n            buttonsStyling: false,\n            allowOutsideClick: () => !Swal.isLoading()\n        }).then(function (result) {\n            if (result.isConfirmed) {\n\n            }\n        })\n\n    }\n    const column = [\n        {\n            name: 'Title',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => {\n                return row.Notification_Title.slice(0, 20)\n            }\n        },\n        {\n            name: 'Message',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => {\n                return row.Notification_Body.slice(0, 20)\n            }\n        },\n        {\n            name: 'Send Via SMS',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => {\n                const status = {\n                    true: { title: 'True' },\n                    false: { title: 'False'}\n                }\n                return status[row.viaSMS].title\n            }\n        },\n        {\n            name: 'Send Via Email',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => {\n                const status = {\n                    true: { title: 'True' },\n                    false: { title: 'False'}\n                }\n                return status[row.viaEmail].title\n            }\n        },\n        {\n            name: 'Send Via Push Notification',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => {\n                const status = {\n                    true: { title: 'True' },\n                    false: { title: 'False'}\n                }\n                return status[row.viaPushNotification].title\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return <>\n                    <span title=\"Edit\">\n                        <Eye size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                setnotificationInfo(row)\n                                setModal(true)\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;\n                    <span title=\"Delete\">\n                        <Trash size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => handlePoPupActions(row.id, 'Do you want to delete?')}\n                        />\n                    </span>\n                </>\n            }\n        }\n    ]\n    return (\n        <Card>\n            <CardHeader className='border-bottom'>\n                <CardTitle tag='h4'>All Notifications</CardTitle>\n            </CardHeader>\n            <CardBody>\n                <Row>\n                    <Col md='12'>\n                        <CommonDataTable column={column} TableData={notificationList} TableDataLoading={TableDataLoading} />\n                    </Col>\n                </Row>\n                <EditModal\n                    toggleModal={toggleModal}\n                    modal={modal}\n                    resetData={resetData}\n                    setReset={setReset}\n                    notificationInfo={notificationInfo}\n                    setnotificationInfo={setnotificationInfo}\n                />\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default NotificationList","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                pagination\n                /*selectableRows*/\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            /*selectableRowsComponent={BootstrapCheckbox}*/\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable"],"sourceRoot":""}