{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/DatapackManagement/DatapackList/DatapackList.js","views/tables/data-tables/basic/AdminComponent/DatapackManagement/DatapackList/MypendingDatapackList.js","views/tables/data-tables/basic/AdminComponent/DatapackManagement/DatapackList/ViewDetails.js","views/tables/data-tables/basic/AdminComponent/DatapackManagement/DatapackList/NeedApproveDatapackList.js","views/tables/data-tables/basic/AdminComponent/DatapackManagement/DatapackList/DatapackListMain.js","views/viewhelper.js","views/helper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js","views/tables/data-tables/basic/ServerSideDataTable.js"],"names":["MySwal","withReactContent","Swal","DatapackList","_ref","datapackList","TableDataLoading","refresh","setrefresh","searchValue","setsearchValue","useState","history","useHistory","column","name","minWidth","sortable","selector","wrap","sortType","a","b","Date","createdAt","cell","item","formatReadableDate","row","_jsxs","_Fragment","children","_jsx","title","Edit","size","color","style","cursor","onClick","e","push","localStorage","setItem","JSON","stringify","Trash","deleteFunc","id","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","useJwt","datapackDelete","parseInt","then","res","console","log","Success","catch","err","Error","buttonsStyling","isLoading","result","isConfirmed","Card","CardHeader","CardTitle","Button","Ripple","className","ExportCSV","Object","keys","CommonDataTable","TableData","length","filteredData","MypendingDatapackList","Fragment","ViewDetailsModal","modal","toggleModal","datapackListInfo","setRefresh","action","roleWiseApprovedList","setRoleWiseApprovedList","addUserloading","setaddUserloading","approvedBy","setApprovedBy","useEffect","datapackListApprovalById","itemArr","data","payload","module_data","roles","approvedby","approved","find","i","role_id","role_name","approved_by","approved_at","Modal","isOpen","toggle","border","ModalHeader","ModalBody","Row","Col","sm","CardBody","Table","map","index","Spinner","disabled","marginTop","handleApproveRejectActions","datapackListApprove","action_id","response","type","NeedApproveDatapackList","setAction","setDatapackListInfo","setModal","modifiedAt","CheckSquare","XSquare","DetailsModal","DatapackListMain","userName","getItem","setDatapackList","penDatapackList","setPenDatapackList","myPenDatapackList","setMyPenDatapackList","setTableDataLoading","setFilteredData","ref_id","setref_id","activeTab","setActiveTab","tab","async","datapackPendingList","pending","myPending","modifiedBy","Nav","tabs","NavItem","NavLink","active","subMenuIDs","includes","TabContent","TabPane","tabId","tag","Link","to","Plus","marginRight","status","toast","error","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","success","options","year","month","day","hour","minute","date","toLocaleDateString","getHumanReadableDate","datetime","endsWith","slice","plusIndex","indexOf","moment","format","validateEmail","email","String","toLowerCase","match","thousandSeparator","x","toString","replace","handle401","window","location","href","clear","array","CSVname","link","document","createElement","csv","join","forEach","ctr","key","convertArrayOfObjectsToCSV","userData","parse","filename","concat","toISOString","replaceAll","setAttribute","encodeURI","click","currentPage","setCurrentPage","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","CustomPagination","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","progressPending","progressComponent","responsive","pointerOnHover","highlightOnHover","striped","ServerSideDataTable","props","RowCount","RowLimit","paginationServer"],"mappings":"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","file":"static/js/341.27d3fb52.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport {\n    ChevronDown, CheckCircle, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw, PlusCircle\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\n} from 'reactstrap'\nimport classnames from 'classnames'\nimport { useHistory } from 'react-router-dom'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport ServerSideDataTable from '../../../ServerSideDataTable'\nimport { Success, Error } from '../../../../../../viewhelper'\nimport { toast } from 'react-toastify'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { ExportCSV, formatReadableDate } from '../../../../../../helper'\nconst MySwal = withReactContent(Swal)\nimport { BMS_PASS, BMS_USER } from '../../../../../../../Configurables'\nimport CommonDataTable from '../../ClientSideDataTable'\n\nconst DatapackList = ({datapackList, TableDataLoading, refresh, setrefresh}) => {\n    const [searchValue, setsearchValue] = useState('')\n    const history = useHistory()\n    const deleteFunc = (id) => {\n        return MySwal.fire({\n            title: 'Do you want to Delete?',\n            text: `Information will be delete when another user will approve this operation.`,\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n                return useJwt.datapackDelete({ id: parseInt(id) }).then(res => {\n                  \n                    console.log(res)\n                    Success(res)\n                    setrefresh(!refresh)\n                    \n                }).catch(err => {\n                    Error(err)\n                    console.log(err)\n                })\n            },\n            buttonsStyling: false,\n            allowOutsideClick: () => !Swal.isLoading()\n        }).then(function (result) {\n            if (result.isConfirmed) {\n    \n            }\n        })\n    }\n    const column = [\n        {\n            name: 'Name',\n            minWidth: '250px',\n            sortable: true,\n            selector: 'name',\n            wrap: true\n        },\n        {\n            name: 'Operator',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'operator'\n        },\n        {\n            name: 'Volume In MB',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'volumeInMB'\n        },\n        {\n            name: 'Pack Code',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'packcode',\n            wrap: true\n        },\n        {\n            name: 'Created By',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'createdBy',\n            wrap: true\n        },\n        {\n            name: 'Created At',\n            minWidth: '170px',\n            sortable: true,\n            wrap: true,\n            sortType: (a, b) => {\n                return new Date(b.createdAt) - new Date(a.createdAt)\n              },\n            selector: 'created_at',\n            cell: (item) => {\n                return item.createdAt ? formatReadableDate(item.createdAt) : null\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '100px',\n            // sortable: true,\n            selector: row => {\n                return <>\n                    <span title=\"Edit\">\n                        <Edit size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                history.push('/editDatapackList')\n                                localStorage.setItem('datapackInfo', JSON.stringify(row))\n                            }}\n                        />\n                    </span> &nbsp;&nbsp;\n                    <span title=\"Delete\">\n                        <Trash size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => deleteFunc(row.id)}\n                        />\n                    </span>\n                </>\n            }\n        }\n    ]\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle></CardTitle>\n                <Button.Ripple className='ml-1 text-dark' color='light' onClick={e => {\n                    ExportCSV(datapackList, Object.keys(datapackList[0]), 'Datapack List')\n                }}>\n                    Export CSV\n                </Button.Ripple>\n            </CardHeader>\n            <CommonDataTable column={column} TableData={searchValue.length ? filteredData : datapackList} TableDataLoading={TableDataLoading} />\n        </Card>\n    )\n}\n\nexport default DatapackList","import React, { Fragment } from 'react'\nimport CommonDataTable from '../../ClientSideDataTable'\nimport { Badge } from 'reactstrap'\nimport { formatReadableDate } from '../../../../../../helper'\n\nconst MypendingDatapackList = ({datapackList, TableDataLoading, refresh, setrefresh}) => {\n    const column = [\n        {\n            name: 'Name',\n            minWidth: '250px',\n            sortable: true,\n            selector: 'name',\n            wrap: true\n        },\n        {\n            name: 'Operator',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'operator'\n        },\n        {\n            name: 'Volume In MB',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'volumeInMB'\n        },\n        {\n            name: 'Pack Code',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'packcode',\n            wrap: true\n        },\n        // {\n        //     name: 'Status',\n        //     minWidth: '100px',\n        //     sortable: true,\n        //     // selector: 'status'\n        //     selector: (row) => {\n        //         return <Badge color={row.status === 'active' ? 'light-success' : 'light-danger'}>{row.status}</Badge>\n        //     }\n        // },\n        {\n            name: 'Operation',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'action'\n        },\n        {\n            name: 'Created By',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'createdBy',\n            wrap: true\n        },\n        {\n            name: 'Created At',\n            minWidth: '170px',\n            sortable: true,\n            wrap: true,\n            sortType: (a, b) => {\n                return new Date(b.createdAt) - new Date(a.createdAt)\n              },\n            selector: 'created_at',\n            cell: (item) => {\n                return item.createdAt ? formatReadableDate(item.createdAt) : null\n            }\n        }\n    ]\n    return (\n        <Fragment>\n            <CommonDataTable column={column} TableData={ datapackList} TableDataLoading={TableDataLoading} />\n        </Fragment>\n    )\n}\n\nexport default MypendingDatapackList","import useJwt from '@src/auth/jwt/useJwt'\nimport useJwt2 from '@src/auth/jwt/useJwt2'\nimport { handle401 } from '@src/views/helper'\nimport { Fragment, useEffect, useState } from 'react'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Modal, ModalBody, ModalHeader, Row, Spinner, Table } from 'reactstrap'\nimport { Error, Success } from '../../../../../../viewhelper'\nimport { formatReadableDate } from '../../../../../../helper'\n\nconst ViewDetailsModal = ({ modal, toggleModal, datapackListInfo, setRefresh, refresh, action }) => {\n\nconst [roleWiseApprovedList, setRoleWiseApprovedList] = useState([])\nconst [addUserloading, setaddUserloading] = useState(false)\nconst [approvedBy, setApprovedBy] = useState([])\nconsole.log(approvedBy)\n\n\nuseEffect(() => {\n    if (datapackListInfo.id) {\n        useJwt.datapackListApprovalById(datapackListInfo.id).then(res => {\n            console.log(res)\n            const itemArr = []\n            for (const item of res.data.payload.module_data.roles) {\n                const approvedby = res.data.payload.approved.find(i => i.role_id === item.role_id)\n                if (approvedby) {\n                    itemArr.push({role_id: item.role_name, approved_by: approvedby.approved_by, approved_at: approvedby.approved_at})\n                } else {\n                    itemArr.push({role_id: item.role_name, approved_by: '--', approved_at: ''})\n                }\n            }\n            setRoleWiseApprovedList(itemArr)\n        }).catch(err => {\n            console.log(err)\n            Error(err)\n        })\n    }\n}, [datapackListInfo.id])\n\nconst handleApproveRejectActions = () => {\n    setaddUserloading(true)\n    useJwt.datapackListApprove({ id:datapackListInfo.id, action_id: action }).then(res => {\n                setRefresh(!refresh)\n                Success(res)\n                setaddUserloading(false)\n                toggleModal()\n                console.log(res)\n            }).catch(err => {\n                // handle401(err.response.status)\n                console.log(err.response)\n                setaddUserloading(false)\n                toggleModal()\n                Error(err)\n            })\n    useJwt.datapackListApprovalById(datapackListInfo.id).then(res => {\n        setApprovedBy(res.data.payload)\n    })\n}\n    return (\n        <Modal size=\"xl\" isOpen={modal} toggle={toggleModal} style={action === 1 ? {border:'2px solid green'} : action === 2 ? {border:'2px solid red'} : {}} >\n             <ModalHeader toggle={toggleModal}>{action === 1 ? 'Approve Datapack List' : action === 2 ? 'Reject Datapack List' : 'Datapack List Details'}</ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Col sm='12'>\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Approval Entry</CardTitle>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Col sm=\"12\" >\n                                            <Table>\n                                                <tr>\n                                                    <th>Role Id</th>\n                                                    <th>Approved By</th>\n                                                    <th>Approved At</th>\n                                                </tr>\n                                                {\n                                                    roleWiseApprovedList?.length !== 0 ? roleWiseApprovedList?.map((item, index) => <tr key={index}>\n                                                        <td>{item.role_id}</td>\n                                                        <td>{item.approved_by}</td>\n                                                        <td>{item.approved_at ? formatReadableDate(item.approved_at || '') : '--'}</td>\n                                                    </tr>) : <Spinner className='text-center'/>\n                                                }\n                                            </Table>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                </Row>\n\n                <Row>\n                    <Col sm=\"12\" className='text-center'>\n                        {\n                            addUserloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                <Spinner color='white' size='sm' />\n                                <span className='ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' onClick={handleApproveRejectActions} type=\"button\" style={{ marginTop: '25px' }}>\n                            <span >Confirm</span>\n                        </Button.Ripple>\n                        }\n                    </Col>\n                </Row>\n\n            </ModalBody>\n        </Modal>\n    )\n}\nexport default ViewDetailsModal","import React, { Fragment, useState } from 'react'\nimport CommonDataTable from '../../ClientSideDataTable'\nimport { CheckSquare, XSquare } from 'react-feather'\nimport DetailsModal from './ViewDetails'\nimport { Badge } from 'reactstrap'\nimport { formatReadableDate } from '../../../../../../helper'\nimport { Success, Error } from '../../../../../../viewhelper'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n\nconst NeedApproveDatapackList = ({datapackList, TableDataLoading, refresh, setrefresh}) => {\n\n    // const viewDetails = (e, item) => {\n    //     setref_id(item.ref_id)\n    //     datapackGroupList(item.id)\n    // }\n\nconst [action, setAction] = useState(0)\nconst [datapackListInfo, setDatapackListInfo] = useState({})\nconst [modal, setModal] = useState(false)\nconst toggleModal = () => setModal(!modal)\n\n    \n    // const handlePoPupActions = (id, status, message) => {\n    //     return MySwal.fire({\n    //         title: message,\n    //         text: `You won't be able to revert this`,\n    //         icon: 'warning',\n    //         allowOutsideClick: false,\n    //         allowEscapeKey: false,\n    //         showCancelButton: true,\n    //         confirmButtonText: 'Yes',\n    //         customClass: {\n    //             confirmButton: 'btn btn-primary',\n    //             cancelButton: 'btn btn-danger ml-1'\n    //         },\n    //         showLoaderOnConfirm: true,\n    //         preConfirm: () => {\n    //             const data = {\n    //                 id,\n    //                 action_id: status\n    //             }\n    //             return useJwt.datapackAction(data).then(res => {\n    //                 Success(res)\n    //                 console.log(res)\n    //                 setrefresh(!refresh)\n    //             }).catch(err => {\n    //                 console.log(err)\n    //                 Error(err)\n    //             })\n    //         },\n    //         buttonsStyling: false,\n    //         allowOutsideClick: () => !Swal.isLoading()\n    //     }).then(function (result) {\n    //         if (result.isConfirmed) {\n\n    //         }\n    //     })\n\n    // }\n    const column = [\n        {\n            name: 'Name',\n            minWidth: '250px',\n            sortable: true,\n            selector: 'name',\n            wrap: true\n        },\n        {\n            name: 'Operator',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'operator'\n        },\n        {\n            name: 'Volume In MB',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'volumeInMB'\n        },\n        {\n            name: 'Pack Code',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'packcode',\n            wrap: true\n        },\n        {\n            name: 'Operation',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'action'\n        },\n        {\n            name: 'Modified By',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'modifiedBy',\n            wrap: true\n        },\n        {\n            name: 'Modified At',\n            minWidth: '170px',\n            sortable: true,\n            wrap: true,\n            sortType: (a, b) => {\n                return new Date(b.modifiedAt) - new Date(a.modifiedAt)\n              },\n            selector: 'created_at',\n            cell: (item) => {\n                return item.modifiedAt ? formatReadableDate(item.modifiedAt) : null\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return <>\n                        <span title=\"Approve\">\n                        <CheckSquare size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            // onClick={() => handlePoPupActions(row.id, 1, 'Are you sure?')}\n                            onClick={() => {\n                                setDatapackListInfo(row)\n                                setModal(true)\n                                setAction(1)\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;\n                    <span title=\"Reject\">\n                        <XSquare size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            // onClick={() => handlePoPupActions(row.id, 2, 'Are you sure?')}\n                            onClick={() => {\n                                setDatapackListInfo(row)\n                                setModal(true)\n                                setAction(2)\n                            }}\n                        />\n                    </span>\n                </>\n            }\n        }\n    ]\n    return (\n        <Fragment>\n\n            <CommonDataTable column={column} TableData={ datapackList} TableDataLoading={TableDataLoading} />\n            <DetailsModal \n                modal={modal}\n                toggleModal={toggleModal}\n                datapackListInfo={datapackListInfo} \n                refresh={refresh}\n                setRefresh={setrefresh}\n                action={action}  \n            /> \n        </Fragment>\n    )\n}\n\nexport default NeedApproveDatapackList","import {React, useEffect, useState, useRef, Fragment } from 'react'\nimport {\n    ChevronDown, CheckCircle, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw, PlusCircle\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\n} from 'reactstrap'\nimport { subMenuIDs } from '../../../../../../../utility/Utils'\nimport classnames from 'classnames'\nimport {Link, useHistory } from 'react-router-dom'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport ServerSideDataTable from '../../../ServerSideDataTable'\nimport { Success, Error } from '../../../../../../viewhelper'\nimport { toast } from 'react-toastify'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { ExportCSV, formatReadableDate } from '../../../../../../helper'\nconst MySwal = withReactContent(Swal)\nimport { handle401 } from '@src/views/helper'\nimport { BMS_PASS, BMS_USER } from '../../../../../../../Configurables'\nimport CommonDataTable from '../../ClientSideDataTable'\nimport DatapackList from './DatapackList'\nimport MypendingDatapackList from './MypendingDatapackList'\nimport NeedApproveDatapackList from './NeedApproveDatapackList'\n\nconst DatapackListMain = () => {\nconst userName = localStorage.getItem('username')\nconst [datapackList, setDatapackList] = useState([])\nconst [penDatapackList, setPenDatapackList] = useState([])\nconst [myPenDatapackList, setMyPenDatapackList] = useState([])\nconst [TableDataLoading, setTableDataLoading] = useState(true)\nconst [filteredData, setFilteredData] = useState([])\nconst [ref_id, setref_id] = useState(null)\n\nconst [refresh, setrefresh] = useState(1)\nconst [activeTab, setActiveTab] = useState('1')\n// ** Function to toggle tabs\nconst toggle = tab => setActiveTab(tab)\n\nuseEffect(async () => {\n    await useJwt.datapackList().then(res => {\n        console.log(res)\n        setDatapackList(res.data.payload)\n        setTableDataLoading(false)\n    }).catch(err => {\n        Error(err)\n        console.log(err.response)\n        setTableDataLoading(false)\n    })\n    await useJwt.datapackPendingList().then(res => {\n        console.log(res)\n        const pending = []\n        const myPending = []\n        for (const item of res.data.payload) {\n            if (item.modifiedBy === userName) {\n                myPending.push(item)\n            } else {\n                pending.push(item)\n            }\n        }\n        setMyPenDatapackList(myPending)\n        setPenDatapackList(pending)\n        setTableDataLoading(false)\n    }).catch(err => {\n        Error(err)\n        console.log(err.response)\n        setTableDataLoading(false)\n    })\n}, [refresh])\n    return (\n        <Fragment>\n            <Card>\n                <CardHeader>\n                    <Nav tabs>\n                        <NavItem>\n                            <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\n                                <span className='align-middle d-none d-sm-block'>Datapack List</span>\n                            </NavLink>\n                        </NavItem>\n                        {subMenuIDs.includes(34) && <NavItem>\n                            <NavLink active={activeTab === '2'} onClick={() => toggle('2')}>\n                                <span className='align-middle d-none d-sm-block'>My Pending</span>\n                            </NavLink>\n                        </NavItem>}\n                        {subMenuIDs.includes(34) && <NavItem>\n                            <NavLink active={activeTab === '3'} onClick={() => toggle('3')}>\n                                <span className='align-middle d-none d-sm-block'>Approve</span>\n                            </NavLink>\n                        </NavItem>}\n                    </Nav>\n                </CardHeader>\n            </Card>\n            <Card>\n                <TabContent activeTab={activeTab}>\n                    <TabPane tabId='1'>\n                        <Card>\n                            <CardHeader className='border-bottom'>\n                                <CardTitle tag='h4'>Datapack</CardTitle>\n                                <div>\n                                    {subMenuIDs.includes(16) && <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createDatapackList' >\n                                        <div className='d-flex align-items-center'>\n                                            <Plus size={17} style={{ marginRight: '5px' }} />\n                                            <span >Create Datapack</span>\n                                        </div>\n                                    </Button.Ripple>}\n\n                                </div>\n                            </CardHeader>\n\n                            <DatapackList datapackList={datapackList} TableDataLoading={TableDataLoading} refresh={refresh} setrefresh={setrefresh} />\n                        </Card>\n                    </TabPane>\n                    <TabPane tabId='2'>\n\n                        <MypendingDatapackList datapackList={myPenDatapackList} TableDataLoading={TableDataLoading}/>\n\n                    </TabPane>\n\n                    <TabPane tabId='3'>\n\n                        <NeedApproveDatapackList datapackList={penDatapackList} TableDataLoading={TableDataLoading} refresh={refresh} setrefresh={setrefresh}/>\n\n                    </TabPane>\n                </TabContent>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default DatapackListMain","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import moment from 'moment'\n\n//Ex-> '1234567891' to '1234 567 891'\nexport const FormatePhoneNo = (phone) => {\n    const phonenoinstring = String(phone)\n    return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\n}\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\n\nexport const getHumanReadableDate = (datetime) => { \n    // let datetime = '2024-06-18T23:25:06.754Z'\n    // let datetime = '2024-07-25 00:05:57.358246+06'\n\n    // Remove the 'Z' at the end if it exists\n    if (datetime.endsWith('Z')) {\n        datetime = datetime.slice(0, -1)\n    }\n    // Find the position of the '+' sign\n    const plusIndex = datetime.indexOf('+')\n\n    // Remove the time zone offset if it exists\n    if (plusIndex !== -1) {\n        datetime = datetime.slice(0, plusIndex)\n    }\n\n    return moment(datetime).format('MMMM D, YYYY [at] h:mm A')\n }\n\nexport const validateEmail = (email) => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n}\n\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }\n\nexport const handle401 = async (status) => {\n    if (status === 401) {\n        window.location.href = '/Adminlogin'\n        await localStorage.clear()\n    }\n}\n\nexport const ExportCSV = (array, keys, CSVname) => {\n    // ** Downloads CSV\n    // const keys = ['name', 'email', 'mobile']\n    // ** Converts table to CSV\n    function convertArrayOfObjectsToCSV(array) {\n        let result\n        const columnDelimiter = ','\n        const lineDelimiter = '\\n'\n        result = ''\n        result += keys.join(columnDelimiter)\n        result += lineDelimiter\n\n        array.forEach(item => {\n            let ctr = 0\n            keys.forEach(key => {\n                if (ctr > 0) result += columnDelimiter\n                result += item[key]\n                ctr++\n            })\n            result += lineDelimiter\n        })\n        return result\n    }\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n    const userData = JSON.parse(localStorage.getItem('userData'))\n    const filename = `${CSVname}_${new Date().toISOString()}_${userData['fullname'].replaceAll(/\\s/g, '')}.csv`\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n}","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n\n            <DataTable\n                noHeader\n                pagination\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n                pointerOnHover\n                highlightOnHover\n                striped\n            />\n             \n        </Fragment>\n    )\n}\n\nexport default CommonDataTable","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst ServerSideDataTable = (props) => {\n    const { currentPage, handlePagination, RowCount, column, TableData, TableDataLoading, RowLimit } = props\n\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? RowCount / RowLimit : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                pagination\n                /*selectableRows*/\n                highlightOnHover\n                paginationServer\n                columns={column}\n                paginationPerPage={RowLimit}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            // selectableRowsComponent={BootstrapCheckbox}\n            />\n        </Fragment>\n    )\n}\n\nexport default ServerSideDataTable"],"sourceRoot":""}