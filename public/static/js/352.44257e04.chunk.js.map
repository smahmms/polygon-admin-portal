{"version":3,"sources":["views/AdminComponents/UserRole/listView.js","views/AdminComponents/UserRole/ViewDetails.js","views/AdminComponents/UserRole/otherPendingList.js","views/AdminComponents/UserRole/mypendingList.js","views/AdminComponents/UserRole/index.js","views/viewhelper.js","views/helper.js","views/VendorComponents/ClientSideDataTable.js"],"names":["MySwal","withReactContent","Swal","ListView","_ref","TableDataLoading","roleList","history","setRefresh","refresh","searchValue","setSearchValue","useState","filteredData","setFilteredData","column","name","minWidth","sortable","selector","row","length","sortType","a","b","Date","created_at","formatReadableDate","user_type","_jsxs","Fragment","children","_jsx","title","Eye","size","color","style","cursor","onClick","push","concat","id","Edit","e","Trash","handleDelete","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","useJwt","deleteRole","role_id","then","res","Success","console","log","catch","err","response","Error","buttonsStyling","isLoading","result","isConfirmed","showConfirmButton","Card","CardHeader","Row","width","Col","className","sm","Label","for","Input","maxWidth","type","bsSize","value","onChange","target","updatedData","filter","item","_item$role_name","_item$role_name2","startsWith","role_name","toLowerCase","includes","UncontrolledButtonDropdown","DropdownToggle","caret","outline","Share","DropdownMenu","right","DropdownItem","ExportCSV","Object","keys","FileText","CardBody","md","CommonDataTable","TableData","ViewDetailsModal","modal","toggleModal","roleInfo","action","ismenuloading","setmenuloading","featureIDs","setFeatureIDs","sub_menu_ids","setSubmenuIDs","roleWiseApprovedList","setRoleWiseApprovedList","addUserloading","setaddUserloading","useEffect","getApprovalEntryforRole","itemArr","data","payload","module_data","roles","approvedby","approved","find","i","approved_by","approved_at","Modal","isOpen","toggle","border","ModalHeader","ModalBody","CardTitle","Table","map","index","Spinner","Button","Ripple","disabled","marginTop","handleApproveRejectActions","actionRole","action_id","OtherPendingListView","user","JSON","parse","localStorage","getItem","setAction","setRoleInfo","setModal","created_by","_Fragment","CheckCircle","DetailsModal","UserRoleList","Array2D","x","submenu","y","subMenuIDs","useHistory","setRoleList","pendingRoleList","setPendingRoleList","mypendingRoleList","setMyPendingRoleList","setTableDataLoading","activeTab","setActiveTab","tab","setItem","List","PendingList","MyPendingList","tag","Link","to","Plus","marginRight","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","OtherPending","status","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","success","options","year","month","day","hour","minute","date","toLocaleDateString","getHumanReadableDate","datetime","endsWith","slice","plusIndex","indexOf","moment","format","validateEmail","email","String","match","thousandSeparator","toString","replace","handle401","async","window","location","href","clear","array","CSVname","link","document","createElement","csv","join","forEach","ctr","key","convertArrayOfObjectsToCSV","userData","filename","toISOString","replaceAll","setAttribute","encodeURI","click","currentPage","setCurrentPage","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","CustomPagination","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/352.44257e04.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport { FileText, Share, Edit, Trash, Eye } from 'react-feather'\nimport { Badge, Card, CardBody, CardHeader, Col, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Row, UncontrolledButtonDropdown } from 'reactstrap'\nimport CommonDataTable from '../../VendorComponents/ClientSideDataTable'\nimport { ExportCSV, formatReadableDate } from '../../helper'\nimport { Error, Success } from '../../viewhelper'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport withReactContent from 'sweetalert2-react-content'\nimport Swal from 'sweetalert2'\nconst MySwal = withReactContent(Swal)\n\nconst ListView = ({TableDataLoading, roleList, history, setRefresh, refresh}) => {\n    const [searchValue, setSearchValue] = useState('')\n    const [filteredData, setFilteredData] = useState([])\n    const handleDelete = (id, message) => {\n        return MySwal.fire({\n            title: 'Are you sure?',\n            text: message,\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n                return useJwt.deleteRole({ role_id: id }).then(res => {\n                    Success(res)\n                    console.log(res)\n                    setRefresh(!refresh)\n                }).catch(err => {\n                    console.log(err.response)\n                    Error(err)\n                })\n            },\n            buttonsStyling: false,\n            allowOutsideClick: () => !Swal.isLoading()\n        }).then(function (result) {\n            if (result.isConfirmed) {\n            }\n        })\n    }\n\n    const handleDeleteWarning = () => {\n        return MySwal.fire({\n            title: 'Delete assigned users first',\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            showConfirmButton : false,\n            customClass: {\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: false,\n            buttonsStyling: false\n        }).then(function (result) {\n            if (result.isConfirmed) {\n            }\n        })\n    }\n\n    const column = [\n        {\n            name: 'Role Name',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'role_name'\n        },\n        {\n            name: 'Assign-user-count',\n            minWidth: '100px',\n            sortable: true,\n            selector: (row) => row['users'].length\n        },\n        {\n            name: 'Created By',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'created_by'\n        },\n        {\n            name: 'Created At',\n            minWidth: '250px',\n            sortable: true,\n            sortType: (a, b) => {\n                return new Date(b.created_at) - new Date(a.created_at)\n              },\n            selector: row => {\n                return row.created_at ? formatReadableDate(row.created_at) : ''\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return row.user_type === 200 ? 'Super Admin' : <Fragment>\n                <span title=\"View\">\n                        <Eye size={15}\n                            color='dodgerblue'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => {\n                                history.push(`/viewUserRole/${row.id}`)\n                            }}\n                        />\n                    </span>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                <span title=\"Edit\">\n                    <Edit size={15} color='blue'\n                     style={{ cursor: 'pointer' }}\n                        onClick={e => {\n                            history.push(`/editUserRole/${row.id}`)\n                        }}\n                    />\n                </span>&nbsp;&nbsp;&nbsp;&nbsp;\n                <span title=\"Delete\">\n                    <Trash size={15}\n                        color='red'\n                        style={{ cursor: 'pointer' }}\n                        onClick={(e) => {\n                            if (row['users'].length === 0) {\n                                handleDelete(row.id, 'Do you want to delete?')\n                            } else {\n                                handleDeleteWarning()\n                            }\n                        }}\n                    />\n                </span>\n            </Fragment>\n            }\n        }\n    ]\n    // ** Function to handle filter\n    const handleFilter = e => {\n        const value = e.target.value\n        let updatedData = []\n        setSearchValue(value)\n\n        if (value.length) {\n        updatedData = roleList.filter(item => {\n            const startsWith =\n            item.role_name?.toLowerCase().startsWith(value.toLowerCase()) \n\n            const includes =\n            item.role_name?.toLowerCase().includes(value.toLowerCase())\n\n            if (startsWith) {\n            return startsWith\n            } else if (!startsWith && includes) {\n            return includes\n            } else return null\n        })\n        setFilteredData(updatedData)\n        setSearchValue(value)\n        }\n    }\n    return (\n        <Card>\n            <CardHeader>\n\n               <Row style={{width: '100%'}}>\n                        <Col className='d-flex align-items-center mt-1' sm='6'>\n                            <Label className='mr-1' for='search-input'>\n                            Search\n                            </Label>\n                            <Input\n                            style={{maxWidth: 300}}\n                            className='dataTable-filter mb-50'\n                            type='text'\n                            bsSize='sm'\n                            id='search-input'\n                            value={searchValue}\n                            onChange={handleFilter}\n                            />\n                        </Col>\n                        <Col className='d-flex align-items-center justify-content-end mt-1' sm='6'>\n                            <UncontrolledButtonDropdown className='ml-1'>\n                                    <DropdownToggle color='secondary' caret outline>\n                                        <Share size={15} />\n                                        <span className='align-middle ml-50'>Export</span>\n                                    </DropdownToggle>\n                                    <DropdownMenu right>\n                                        <DropdownItem className='w-100' onClick={() => ExportCSV(roleList, Object.keys(roleList[0] || {}), 'User Role')}>\n                                            <FileText size={15} />\n                                            <span className='align-middle ml-50'>CSV</span>\n                                        </DropdownItem>\n                                    </DropdownMenu>\n                                </UncontrolledButtonDropdown>\n                        </Col>\n                    </Row>\n\n            </CardHeader>\n\n            <CardBody>\n            <Row>\n                <Col md='12'>\n                    <CommonDataTable column={column} TableData={searchValue.length ? filteredData : roleList} TableDataLoading={TableDataLoading} />\n                </Col>\n            </Row>\n            </CardBody>\n\n        </Card>\n    )\n}\n\nexport default ListView","import useJwt from '@src/auth/jwt/useJwt'\nimport { handle401 } from '@src/views/helper'\nimport { Fragment, useEffect, useState } from 'react'\nimport { Button, Card, CardBody, CardHeader, CardTitle, Col, CustomInput, Modal, ModalBody, ModalHeader, Row, Spinner, Table } from 'reactstrap'\nimport { Error, Success } from '../../viewhelper'\nimport { formatReadableDate } from '../../helper'\n\nconst ViewDetailsModal = ({ modal, toggleModal, roleInfo, setRefresh, refresh, action }) => {\n\nconst [ismenuloading, setmenuloading] = useState(true)\nconst [featureIDs, setFeatureIDs] = useState([])\nconst [sub_menu_ids, setSubmenuIDs] = useState([])\nconst [roleWiseApprovedList, setRoleWiseApprovedList] = useState([])\nconst [addUserloading, setaddUserloading] = useState(false)\nconsole.log(roleInfo)\n\nuseEffect(() => {\n    if (roleInfo.id) {\n        useJwt.getApprovalEntryforRole(roleInfo.id).then(res => {\n            console.log(res)\n            const itemArr = []\n            for (const item of res.data.payload.module_data.roles) {\n                const approvedby = res.data.payload.approved.find(i => i.role_id === item.role_id)\n                if (approvedby) {\n                    itemArr.push({role_id: item.role_name, approved_by: approvedby.approved_by, approved_at: approvedby.approved_at})\n                } else {\n                    itemArr.push({role_id: item.role_name, approved_by: '--', approved_at: ''})\n                }\n            }\n            setRoleWiseApprovedList(itemArr)\n        }).catch(err => {\n            console.log(err)\n            Error(err)\n        })\n    }\n}, [roleInfo.id])\n\nconst handleApproveRejectActions = () => {\n    setaddUserloading(true)\n    useJwt.actionRole({ id:roleInfo.id, action_id: action }).then(res => {\n                setRefresh(!refresh)\n                Success(res)\n                setaddUserloading(false)\n                toggleModal()\n                console.log(res)\n            }).catch(err => {\n                // handle401(err.response.status)\n                console.log(err.response)\n                setaddUserloading(false)\n                toggleModal()\n                Error(err)\n            })\n}\n    return (\n        <Modal size=\"xl\" isOpen={modal} toggle={toggleModal} style={action === 1 ? {border:'2px solid green'} : action === 2 ? {border:'2px solid red'} : {}} >\n             <ModalHeader toggle={toggleModal}>{action === 1 ? 'Approve Role' : action === 2 ? 'Reject Role' : 'Role Details'}</ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Col sm='12'>\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Approval Entry</CardTitle>\n                                </CardHeader>\n                                <CardBody>\n                                    <Row>\n                                        <Col sm=\"12\" >\n                                            <Table>\n                                                <tr>\n                                                    <th>Role Name</th>\n                                                    <th>Approved By</th>\n                                                    <th>Approved At</th>\n                                                </tr>\n                                                {\n                                                    roleWiseApprovedList?.length !== 0 ? roleWiseApprovedList?.map((item, index) => <tr key={index}>\n                                                        <td>{item.role_id}</td>\n                                                        <td>{item.approved_by}</td>\n                                                        <td>{item.approved_at ? formatReadableDate(item.approved_at || '') : '--'}</td>\n                                                    </tr>) : <Spinner className='text-center'/>\n                                                }\n                                            </Table>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>`\n                        </Col>\n                </Row>\n\n                <Row>\n                    <Col sm=\"12\" className='text-center'>\n                        {\n                            addUserloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                <Spinner color='white' size='sm' />\n                                <span className='ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' onClick={handleApproveRejectActions} type=\"button\" style={{ marginTop: '25px' }}>\n                            <span >Confirm</span>\n                        </Button.Ripple>\n                        }\n                    </Col>\n                </Row>\n\n            </ModalBody>\n        </Modal>\n    )\n}\nexport default ViewDetailsModal","import React, { useState } from 'react'\nimport { FileText, Share, Trash, CheckCircle, Eye } from 'react-feather'\nimport { Card, CardHeader, Col, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Row, UncontrolledButtonDropdown, CardBody } from 'reactstrap'\nimport CommonDataTable from '../../VendorComponents/ClientSideDataTable'\nimport { ExportCSV, formatReadableDate } from '../../helper'\nimport { Error, Success } from '../../viewhelper'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport withReactContent from 'sweetalert2-react-content'\nimport Swal from 'sweetalert2'\nconst MySwal = withReactContent(Swal)\nimport DetailsModal from './ViewDetails'\n\nconst OtherPendingListView = ({TableDataLoading, roleList, history, setRefresh, refresh}) => {\n    const [searchValue, setSearchValue] = useState('')\n    const [filteredData, setFilteredData] = useState([])\n    const user = JSON.parse(localStorage.getItem('userData'))\n    const [action, setAction] = useState(0)\n    const [roleInfo, setRoleInfo] = useState({})\n    const [modal, setModal] = useState(false)\n    const toggleModal = () => setModal(!modal)\n    \n    const column = [\n        {\n            name: 'Role Name',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'role_name'\n        },\n        {\n            name: 'Assign-user-count',\n            minWidth: '100px',\n            sortable: true,\n            selector: (row) => row['users'].length\n        },\n        {\n            name: 'Created By',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'created_by'\n        },\n        {\n            name: 'Created At',\n            minWidth: '250px',\n            sortable: true,\n            sortType: (a, b) => {\n                return new Date(b.created_at) - new Date(a.created_at)\n              },\n            selector: row => {\n                return row.created_at ? formatReadableDate(row.created_at) : ''\n            }\n        },\n        {\n            name: 'Request Action',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'action'\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return user.id === row.created_by ? 'Pending (You created this.)' : <>\n                <span title=\"View\">\n                        <Eye size={15}\n                            color='dodgerblue'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => {\n                                history.push(`/viewUserPendingRole/${row.id}`)\n                            }}\n                        />\n                    </span>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <span title=\"Approve\">\n                        <CheckCircle size={15}\n                            color='dodgerblue'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => {\n                                // handlePoPupActions(row.id, 1)\n                                setRoleInfo(row)\n                                setModal(true)\n                                setAction(1)\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;&nbsp;&nbsp;\n                    <span title=\"Reject\">\n                        <Trash size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => {\n                                // handlePoPupActions(row.id, 2)\n                                setRoleInfo(row)\n                                setModal(true)\n                                setAction(2)\n                            }}\n                        />\n                    </span>\n                </>\n            }\n        }\n    ]\n    // ** Function to handle filter\n    const handleFilter = e => {\n        const value = e.target.value\n        let updatedData = []\n        setSearchValue(value)\n\n        if (value.length) {\n        updatedData = roleList.filter(item => {\n            const startsWith =\n            item.role_name?.toLowerCase().startsWith(value.toLowerCase()) \n\n            const includes =\n            item.role_name?.toLowerCase().includes(value.toLowerCase())\n\n            if (startsWith) {\n            return startsWith\n            } else if (!startsWith && includes) {\n            return includes\n            } else return null\n        })\n        setFilteredData(updatedData)\n        setSearchValue(value)\n        }\n    }\n    return (\n        <Card>\n\n            <CardHeader>\n\n            <Row style={{width: '100%'}}>\n                    <Col className='d-flex align-items-center mt-1' sm='6'>\n                        <Label className='mr-1' for='search-input'>\n                        Search\n                        </Label>\n                            <Input\n                                style={{maxWidth: 300}}\n                                className='dataTable-filter mb-50'\n                                type='text'\n                                bsSize='sm'\n                                id='search-input'\n                                value={searchValue}\n                                onChange={handleFilter}\n                                />\n                    </Col>\n                    <Col className='d-flex align-items-center justify-content-end mt-1' sm='6'>\n                            <UncontrolledButtonDropdown className='ml-1'>\n                                            <DropdownToggle color='secondary' caret outline>\n                                                <Share size={15} />\n                                                <span className='align-middle ml-50'>Export</span>\n                                            </DropdownToggle>\n                                            <DropdownMenu right>\n                                                <DropdownItem className='w-100' onClick={() => ExportCSV(roleList, Object.keys(roleList[0] || {}), 'User Role')}>\n                                                    <FileText size={15} />\n                                                    <span className='align-middle ml-50'>CSV</span>\n                                                </DropdownItem>\n                                            </DropdownMenu>\n                                        </UncontrolledButtonDropdown>\n                    </Col>\n                </Row>\n\n            </CardHeader>\n            <CardBody>\n            <Row>\n                <Col md='12'>\n                    <CommonDataTable column={column} TableData={searchValue.length ? filteredData : roleList} TableDataLoading={TableDataLoading} />\n                </Col>\n            </Row>\n            </CardBody>\n            <DetailsModal \n                modal={modal}\n                toggleModal={toggleModal}\n                roleInfo={roleInfo} \n                refresh={refresh}\n                setRefresh={setRefresh}\n                action={action}  \n            />\n        </Card>\n    )\n}\n\nexport default OtherPendingListView","import React, { useState } from 'react'\nimport { FileText, Share, Trash, Eye } from 'react-feather'\nimport { Card, CardHeader, Col, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Row, UncontrolledButtonDropdown, CardBody } from 'reactstrap'\nimport CommonDataTable from '../../VendorComponents/ClientSideDataTable'\nimport { ExportCSV, formatReadableDate } from '../../helper'\nimport { Error, Success } from '../../viewhelper'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport withReactContent from 'sweetalert2-react-content'\nimport Swal from 'sweetalert2'\nconst MySwal = withReactContent(Swal)\n\nconst OtherPendingListView = ({TableDataLoading, roleList, history}) => {\n    const [searchValue, setSearchValue] = useState('')\n    const [filteredData, setFilteredData] = useState([])\n    const user = JSON.parse(localStorage.getItem('userData'))\n\n    const column = [\n        {\n            name: 'Role Name',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'role_name'\n        },\n        {\n            name: 'Assign-user-count',\n            minWidth: '100px',\n            sortable: true,\n            selector: (row) => row['users'].length\n        },\n        {\n            name: 'Request Action',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'action'\n        },\n        {\n            name: 'Created At',\n            minWidth: '250px',\n            sortable: true,\n            sortType: (a, b) => {\n                return new Date(b.created_at) - new Date(a.created_at)\n              },\n            selector: row => {\n                return row.created_at ? formatReadableDate(row.created_at) : ''\n            }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return  <span title=\"View\">\n                        <Eye size={15}\n                            color='dodgerblue'\n                            style={{ cursor: 'pointer' }}\n                            onClick={() => {\n                                history.push(`/viewUserPendingRole/${row.id}`)\n                            }}\n                        />\n                    </span>\n            }\n        }\n    ]\n    // ** Function to handle filter\n    const handleFilter = e => {\n        const value = e.target.value\n        let updatedData = []\n        setSearchValue(value)\n\n        if (value.length) {\n        updatedData = roleList.filter(item => {\n            const startsWith =\n            item.role_name?.toLowerCase().startsWith(value.toLowerCase()) \n\n            const includes =\n            item.role_name?.toLowerCase().includes(value.toLowerCase())\n\n            if (startsWith) {\n            return startsWith\n            } else if (!startsWith && includes) {\n            return includes\n            } else return null\n        })\n        setFilteredData(updatedData)\n        setSearchValue(value)\n        }\n    }\n\n    return (\n        <Card>\n\n            <CardHeader>\n\n            <Row style={{width: '100%'}}>\n                    <Col className='d-flex align-items-center mt-1' sm='6'>\n                        <Label className='mr-1' for='search-input'>\n                        Search\n                        </Label>\n                        <Input\n                        style={{maxWidth: 300}}\n                        className='dataTable-filter mb-50'\n                        type='text'\n                        bsSize='sm'\n                        id='search-input'\n                        value={searchValue}\n                        onChange={handleFilter}\n                        />\n                    </Col>\n                    <Col className='d-flex align-items-center justify-content-end mt-1' sm='6'>\n                           <UncontrolledButtonDropdown className='ml-1'>\n                                <DropdownToggle color='secondary' caret outline>\n                                    <Share size={15} />\n                                    <span className='align-middle ml-50'>Export</span>\n                                </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem className='w-100' onClick={() => ExportCSV(roleList, Object.keys(roleList[0] || {}), 'User Role')}>\n                                        <FileText size={15} />\n                                        <span className='align-middle ml-50'>CSV</span>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledButtonDropdown>\n                    </Col>\n                </Row>\n\n            </CardHeader>\n            <CardBody>\n            <Row>\n                <Col md='12'>\n                    <CommonDataTable column={column} TableData={searchValue.length ? filteredData : roleList} TableDataLoading={TableDataLoading} />\n                </Col>\n            </Row>\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default OtherPendingListView","import React, { Fragment, useEffect, useState } from 'react'\nimport { ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft } from 'react-feather'\nimport { Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput } from 'reactstrap'\nimport classnames from 'classnames'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\nimport { useHistory, Link } from 'react-router-dom'\n\nimport ListView from './listView'\nimport OtherPending from './otherPendingList'\nimport MyPendingList from './mypendingList'\n\nconst UserRoleList = () => {\n\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\n    const subMenuIDs = [].concat(...Array2D)\n    const history = useHistory()\n    const [roleList, setRoleList] = useState([])\n    const [pendingRoleList, setPendingRoleList] = useState([])\n    const [mypendingRoleList, setMyPendingRoleList] = useState([]) \n    const [TableDataLoading, setTableDataLoading] = useState(true)\n\n    const [refresh, setRefresh] = useState(false)\n    const [activeTab, setActiveTab] = useState('1')\n\n    const toggle = tab => {\n        if (activeTab !== tab) setActiveTab(tab)\n    }\n\n    useEffect(() => {\n        localStorage.setItem('useBMStoken', false) //for token management\n        localStorage.setItem('usePMStoken', false) //for token management\n        useJwt.roleList().then(res => {\n            console.log('roleList', res.data.payload)\n            setRoleList(res.data.payload.List)\n            setPendingRoleList(res.data.payload.PendingList)\n            setMyPendingRoleList(res.data.payload.MyPendingList)\n            setTableDataLoading(false)\n        }).catch(err => {\n            Error(err)\n            console.log(err)\n            setTableDataLoading(false)\n        })\n    }, [refresh])\n\n    return (\n        <Fragment>\n        <Card>\n        <CardHeader className='border-bottom'>\n            <CardTitle tag='h4'>User Role</CardTitle>\n                <div>\n                    {subMenuIDs.includes(69) && <Button.Ripple className='ml-2' color='primary' tag={Link} to={'/createUserRole'} >\n                    <div className='d-flex align-items-center'>\n                        <Plus size={17} style={{marginRight:'5px'}}/>\n                        <span >Create User Role</span>\n                    </div>\n                    </Button.Ripple>}\n            </div>\n        </CardHeader>\n            <CardBody>\n                <Nav tabs>\n                <NavItem>\n                        <NavLink\n                            className={classnames({ active: activeTab === '1' })}\n                            onClick={() => { toggle('1') }}\n                        > Role List\n                        </NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink\n                            className={classnames({ active: activeTab === '2' })}\n                            onClick={() => { toggle('2') }}\n                        > My Pending\n                        </NavLink>\n                    </NavItem>\n                    {subMenuIDs.includes(72) && <NavItem>\n                        <NavLink\n                            className={classnames({ active: activeTab === '3' })}\n                            onClick={() => { toggle('3') }}\n                        > Approve Role\n                        </NavLink>\n                    </NavItem>}\n                </Nav>\n            </CardBody>\n        </Card>\n        <Card>\n            <TabContent activeTab={activeTab}>\n                <TabPane tabId=\"1\">\n                    <ListView TableDataLoading={TableDataLoading} roleList={roleList} history={history} setRefresh={setRefresh} refresh={refresh} />\n                </TabPane>\n                <TabPane tabId=\"2\">\n                    <MyPendingList TableDataLoading={TableDataLoading} roleList={mypendingRoleList} history={history}   />\n                </TabPane>\n                <TabPane tabId=\"3\">\n                   <OtherPending TableDataLoading={TableDataLoading} roleList={pendingRoleList} history={history} setRefresh={setRefresh} refresh={refresh}/>\n                </TabPane>\n\n            </TabContent>\n        </Card>\n    </Fragment>\n    )\n}\n\nexport default UserRoleList","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","import moment from 'moment'\n\n//Ex-> '1234567891' to '1234 567 891'\nexport const FormatePhoneNo = (phone) => {\n    const phonenoinstring = String(phone)\n    return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\n}\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\n\nexport const getHumanReadableDate = (datetime) => { \n    // let datetime = '2024-06-18T23:25:06.754Z'\n    // let datetime = '2024-07-25 00:05:57.358246+06'\n\n    // Remove the 'Z' at the end if it exists\n    if (datetime.endsWith('Z')) {\n        datetime = datetime.slice(0, -1)\n    }\n    // Find the position of the '+' sign\n    const plusIndex = datetime.indexOf('+')\n\n    // Remove the time zone offset if it exists\n    if (plusIndex !== -1) {\n        datetime = datetime.slice(0, plusIndex)\n    }\n\n    return moment(datetime).format('MMMM D, YYYY [at] h:mm A')\n }\n\nexport const validateEmail = (email) => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n}\n\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }\n\nexport const handle401 = async (status) => {\n    if (status === 401) {\n        window.location.href = '/Adminlogin'\n        await localStorage.clear()\n    }\n}\n\nexport const ExportCSV = (array, keys, CSVname) => {\n    // ** Downloads CSV\n    // const keys = ['name', 'email', 'mobile']\n    // ** Converts table to CSV\n    function convertArrayOfObjectsToCSV(array) {\n        let result\n        const columnDelimiter = ','\n        const lineDelimiter = '\\n'\n        result = ''\n        result += keys.join(columnDelimiter)\n        result += lineDelimiter\n\n        array.forEach(item => {\n            let ctr = 0\n            keys.forEach(key => {\n                if (ctr > 0) result += columnDelimiter\n                result += item[key]\n                ctr++\n            })\n            result += lineDelimiter\n        })\n        return result\n    }\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n    const userData = JSON.parse(localStorage.getItem('userData'))\n    const filename = `${CSVname}_${new Date().toISOString()}_${userData['fullname'].replaceAll(/\\s/g, '')}.csv`\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n}","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                pagination\n                /*selectableRows*/\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            /*selectableRowsComponent={BootstrapCheckbox}*/\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable"],"sourceRoot":""}