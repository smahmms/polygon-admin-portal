{"version":3,"sources":["assets/images/pages/calendar-illustration.png","views/apps/calendar/Calendar.js","views/apps/calendar/SidebarLeft.js","views/apps/calendar/AddEventSidebar.js","views/apps/calendar/store/actions/index.js","views/apps/calendar/index.js"],"names":["ToastComponent","_ref","title","icon","color","_jsx","Fragment","children","className","_jsxs","Avatar","size","Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","_ref2","event","calendarEvent","colorName","_def","extendedProps","calendar","concat","eventClick","_ref3","clickedEvent","customButtons","sidebarToggle","text","Menu","click","dateClick","info","ev","date","eventDrop","_ref4","droppedEvent","toast","success","Check","autoClose","hideProgressBar","closeButton","eventResize","_ref5","resizedEvent","ref","direction","Card","CardBody","FullCalendar","memo","filters","label","SidebarLeft","updateFilter","updateAllFilters","Button","Ripple","block","onClick","handleAddEventClick","CustomInput","type","id","checked","selectedCalendars","onChange","e","target","map","filter","includes","classnames","src","illustration","alt","AddEventSidebar","open","refetchEvents","addEvent","removeEvent","selectedEvent","register","errors","handleSubmit","useForm","url","setUrl","useState","desc","setDesc","setTitle","guests","setGuests","allDay","setAllDay","location","setLocation","endPicker","setEndPicker","Date","startPicker","setStartPicker","value","setValue","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","description","updateEventInCalendar","updatedEventData","propsToUpdate","extendedPropsToUpdate","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","handleDeleteEvent","eventId","remove","error","Trash","EventActions","isObjEmpty","outline","CloseBtn","X","Modal","isOpen","toggle","contentClassName","onOpened","handleSelectedEvent","resolveLabel","onClosed","handleResetInputValues","modalClassName","ModalHeader","close","tag","ModalBody","Form","onSubmit","data","handleAddEvent","obj","display","undefined","FormGroup","Label","for","Input","name","placeholder","innerRef","validate","Select","options","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","Flatpickr","required","enableTime","dateFormat","inline","isMulti","img","rows","fetchEvents","calendars","axios","get","then","response","getState","post","delete","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","setIsRtl","useRTL","val","Row","noGutters","Col","show"],"mappings":"iHAAA,OAAe,cAA0B,iD,iOCmBzC,MAAMA,EAAiBC,IAAA,IAAC,MAAEC,EAAK,KAAEC,EAAI,MAAEC,GAAOH,EAAA,OAC5CI,cAACC,WAAQ,CAAAC,SACPF,cAAA,OAAKG,UAAU,uBAAsBD,SACnCE,eAAA,OAAKD,UAAU,gBAAeD,SAAA,CAC5BF,cAACK,IAAM,CAACC,KAAK,KAAKP,MAAOA,EAAOD,KAAMA,IACtCE,cAAA,MAAIG,UAAU,cAAaD,SAAEL,UAGxB,EAGPU,EAAWC,IAEf,MAAMC,EAAcC,iBAAO,OAGrB,MACJC,EAAK,MACLC,EAAK,SACLC,EAAQ,eACRC,EAAc,YACdC,EAAW,eACXC,EAAc,sBACdC,EAAqB,WACrBC,EAAU,cACVC,EAAa,YACbC,EAAW,YACXC,GACEb,EAGJc,qBAAU,KACY,OAAhBP,GACFC,EAAeP,EAAYc,QAAQC,SACrC,GACC,CAACT,IAGJ,MAAMU,EAAkB,CACtBC,OAAQf,EAAMe,OAAOC,OAAShB,EAAMe,OAAS,GAC7CE,QAAS,CAACC,IAAmBC,IAAeC,IAAgBC,KAC5DC,YAAa,eACbC,cAAe,CACbC,MAAO,kCACPC,IAAK,mDAMPC,UAAU,EAMVC,yBAAyB,EAMzBC,YAAY,EAMZC,aAAc,EAMdC,UAAU,EAEVC,gBAAeC,GAA4B,IAAzBC,MAAOC,GAAeF,EAEtC,MAAMG,EAAYhC,EAAe+B,EAAcE,KAAKC,cAAcC,UAElE,MAAO,CACL,YAAAC,OACYJ,GAEhB,EAEAK,WAAUC,GAA2B,IAAxBR,MAAOS,GAAcD,EAChCvC,EAASO,EAAYiC,IACrBpC,GAQF,EAEAqC,cAAe,CACbC,cAAe,CACbC,KAAMxD,cAACyD,IAAI,CAACtD,UAAU,sBACtBuD,QACEvC,GAAc,EAChB,IAIJwC,UAAUC,GACR,MAAMC,EAAK3C,EACX2C,EAAG1B,MAAQyB,EAAKE,KAChBD,EAAGzB,IAAMwB,EAAKE,KACdjD,EAASO,EAAYyC,IACrB5C,GACF,EAOA8C,UAASC,GAA2B,IAAxBpB,MAAOqB,GAAcD,EAC/BnD,EAASQ,EAAY4C,IACrBC,IAAMC,QAAQnE,cAACL,EAAc,CAACE,MAAM,gBAAgBE,MAAM,UAAUD,KAAME,cAACoE,IAAK,MAAS,CACvFC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,GAEjB,EAMAC,YAAWC,GAA2B,IAAxB7B,MAAO8B,GAAcD,EACjC5D,EAASQ,EAAYqD,IACrBR,IAAMC,QAAQnE,cAACL,EAAc,CAACE,MAAM,gBAAgBE,MAAM,UAAUD,KAAME,cAACoE,IAAK,MAAS,CACvFC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,GAEjB,EAEAI,IAAKlE,EAGLmE,UAAWhE,EAAQ,MAAQ,OAG7B,OACEZ,cAAC6E,IAAI,CAAC1E,UAAU,sCAAqCD,SACnDE,eAAC0E,IAAQ,CAAC3E,UAAU,OAAMD,SAAA,CACxBF,cAAC+E,IAAY,IAAKtD,IAAoB,QAEnC,EAIIuD,qBAAKzE,G,6BCrKpB,MAAM0E,EAAU,CACd,CAAEC,MAAO,WAAYnF,MAAO,SAAUI,UAAW,8BACjD,CAAE+E,MAAO,WAAYnF,MAAO,UAAWI,UAAW,+BAClD,CAAE+E,MAAO,SAAUnF,MAAO,UAAWI,UAAW,+BAChD,CAAE+E,MAAO,UAAWnF,MAAO,UAAWI,UAAW,+BACjD,CAAE+E,MAAO,MAAOnF,MAAO,OAAQI,UAAW,wBA4D7BgF,MAzDK3E,IAElB,MAAM,sBAAES,EAAqB,cAAEE,EAAa,aAAEiE,EAAY,iBAAEC,EAAgB,MAAE1E,EAAK,SAAEE,GAAaL,EAQlG,OACEJ,eAACH,WAAQ,CAAAC,SAAA,CACPE,eAAA,OAAKD,UAAU,kBAAiBD,SAAA,CAC9BF,cAAC8E,IAAQ,CAAC3E,UAAU,uDAAsDD,SACxEF,cAACsF,IAAOC,OAAM,CAACxF,MAAM,UAAUyF,OAAK,EAACC,QATjBC,KAC1BvE,GAAc,GACdF,GAAuB,EAOiDf,SAChEF,cAAA,QAAMG,UAAU,eAAcD,SAAC,kBAGnCE,eAAC0E,IAAQ,CAAA5E,SAAA,CACPF,cAAA,MAAIG,UAAU,qBAAoBD,SAChCF,cAAA,QAAMG,UAAU,eAAcD,SAAC,aAEjCF,cAAC2F,IAAW,CACVC,KAAK,WACLzF,UAAU,OACV+E,MAAM,WACNW,GAAG,WACHC,QAASnF,EAAMoF,kBAAkBpE,SAAWsD,EAAQtD,OACpDqE,SAAUC,GAAKpF,EAASwE,EAAiBY,EAAEC,OAAOJ,YAEpD9F,cAAA,OAAKG,UAAU,yBAAwBD,SACpC+E,EAAQtD,QACPsD,EAAQkB,KAAIC,GAERpG,cAAC2F,IAAW,CACVC,KAAK,WAELC,GAAIO,EAAOlB,MACXA,MAAOkB,EAAOlB,MACdY,QAASnF,EAAMoF,kBAAkBM,SAASD,EAAOlB,OACjD/E,UAAWmG,IAAW,CACpB,CAACF,EAAOjG,WAAYiG,EAAOjG,YAE7B6F,SAAUC,GAAKpF,EAASuE,EAAagB,EAAOlB,SAPvCkB,EAAOlB,iBAc1BlF,cAAA,OAAKG,UAAU,UAASD,SACtBF,cAAA,OAAKG,UAAU,YAAYoG,IAAKC,UAAcC,IAAI,qBAE3C,E,2MCzCf,MAAM9G,EAAiBC,IAAA,IAAC,MAAEC,EAAK,KAAEC,EAAI,MAAEC,GAAOH,EAAA,OAC5CI,cAACC,WAAQ,CAAAC,SACPF,cAAA,OAAKG,UAAU,uBAAsBD,SACnCE,eAAA,OAAKD,UAAU,gBAAeD,SAAA,CAC5BF,cAACK,IAAM,CAACC,KAAK,KAAKP,MAAOA,EAAOD,KAAMA,IACtCE,cAAA,MAAIG,UAAU,cAAaD,SAAEL,UAGxB,EAqZE6G,MAlZSlG,IAEtB,MAAM,MACJG,EAAK,SACLE,EAAQ,KACR8F,EAAI,sBACJ1F,EAAqB,eACrBH,EAAc,YACdC,EAAW,cACX6F,EAAa,SACbC,EAAQ,YACRzF,EAAW,YACXC,EAAW,YACXyF,GACEtG,EAGEuG,EAAgBpG,EAAMoG,eACtB,SAAEC,EAAQ,OAAEC,EAAM,aAAEC,GAAiBC,eAGpCC,EAAKC,GAAUC,mBAAS,KACxBC,EAAMC,GAAWF,mBAAS,KAC1BzH,EAAO4H,GAAYH,mBAAS,KAC5BI,EAAQC,GAAaL,mBAAS,CAAC,IAC/BM,EAAQC,IAAaP,oBAAS,IAC9BQ,GAAUC,IAAeT,mBAAS,KAClCU,GAAWC,IAAgBX,mBAAS,IAAIY,OACxCC,GAAaC,IAAkBd,mBAAS,IAAIY,OAC5CG,GAAOC,IAAYhB,mBAAS,CAAC,CAAEe,MAAO,WAAYnD,MAAO,WAAYnF,MAAO,aAW7EwI,GAAgB,CACpB,CAAEF,MAAO,cAAenD,MAAO,cAAesD,OAAQC,WACtD,CAAEJ,MAAO,cAAenD,MAAO,cAAesD,OAAQE,WACtD,CAAEL,MAAO,sBAAuBnD,MAAO,sBAAuBsD,OAAQG,WACtE,CAAEN,MAAO,cAAenD,MAAO,cAAesD,OAAQI,WACtD,CAAEP,MAAO,aAAcnD,MAAO,aAAcsD,OAAQK,WACpD,CAAER,MAAO,aAAcnD,MAAO,aAAcsD,OAAQM,YAmHhDC,GAAoBA,KACxB,MAAMC,EAAgB,CACpBnD,GAAIkB,EAAclB,GAClBhG,QACA+H,SACAzF,MAAOgG,GACP/F,IAAK4F,GACLZ,MACApE,cAAe,CACb8E,YACAmB,YAAa1B,EACbG,SACAzE,SAAUoF,GAAM,GAAGnD,QAOvBrE,EAASQ,EAAY2H,IA7COE,EAACC,EAAkBC,EAAeC,KAC9D,MAAMC,EAAgBvI,EAAYwI,aAAaJ,EAAiBtD,IAMhE,IAAK,IAAI2D,EAAQ,EAAGA,EAAQJ,EAAczH,OAAQ6H,IAAS,CACzD,MAAMC,EAAWL,EAAcI,GAC/BF,EAAcI,QAAQD,EAAUN,EAAiBM,GACnD,CAIAH,EAAcK,SAASR,EAAiBhH,MAAOgH,EAAiB/G,IAAK,CAAEwF,OAAQuB,EAAiBvB,SAKhG,IAAK,IAAI4B,EAAQ,EAAGA,EAAQH,EAAsB1H,OAAQ6H,IAAS,CACjE,MAAMC,EAAWJ,EAAsBG,GACvCF,EAAcM,gBAAgBH,EAAUN,EAAiBnG,cAAcyG,GACzE,GAwBAP,CAAsBF,EAJA,CAAC,KAAM,QAAS,OACR,CAAC,WAAY,SAAU,WAAY,gBAIjE/H,IACAiD,IAAMC,QAAQnE,cAACL,EAAc,CAACE,MAAM,gBAAgBE,MAAM,UAAUD,KAAME,cAACoE,IAAK,MAAS,CACvFC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,GACb,EAOEsF,GAAoBA,KAHIC,MAI5BjJ,EAASiG,EAAYC,EAAclB,KAJPiE,EAKN/C,EAAclB,GAJpC9E,EAAYwI,aAAaO,GAASC,SAKlC9I,IACAiD,IAAM8F,MAAMhK,cAACL,EAAc,CAACE,MAAM,gBAAgBE,MAAM,SAASD,KAAME,cAACiK,IAAK,MAAS,CACpF5F,UAAW,IACXC,iBAAiB,EACjBC,aAAa,GACb,EAIE2F,GAAeA,IACfC,YAAWpD,KAAoBoD,YAAWpD,KAAmBA,EAAclH,MAAM8B,OAEjFvB,eAACH,WAAQ,CAAAC,SAAA,CACPF,cAACsF,IAAOC,OAAM,CAACpF,UAAU,OAAOyF,KAAK,SAAS7F,MAAM,UAASG,SAAC,QAG9DF,cAACsF,IAAOC,OAAM,CAACxF,MAAM,YAAY6F,KAAK,QAAQH,QAASxE,EAAuBmJ,SAAO,EAAAlK,SAAC,cAOxFE,eAACH,WAAQ,CAAAC,SAAA,CACPF,cAACsF,IAAOC,OAAM,CACZpF,UAAU,OACVJ,MAAM,UACNG,SACD,WAGDF,cAACsF,IAAOC,OAAM,CAACxF,MAAM,SAAS0F,QAASoE,GAAmBO,SAAO,EAAAlK,SAAC,cASpEmK,GAAWrK,cAACsK,IAAC,CAACnK,UAAU,iBAAiBG,KAAM,GAAImF,QAASxE,IAElE,OACEb,eAACmK,IAAK,CACJC,OAAQ7D,EACR8D,OAAQxJ,EACRd,UAAU,aACVuK,iBAAiB,MACjBC,SAtIwBC,KAC1B,IAAKT,YAAWpD,GAAgB,CAC9B,MAAM9D,EAAW8D,EAAc/D,cAAcC,SAEvC4H,EAAeA,IACf5H,EAAStB,OACJ,CAAEuD,MAAOjC,EAAUoF,MAAOpF,EAAUlD,MAAOe,EAAemC,IAE1D,CAAEoF,MAAO,WAAYnD,MAAO,WAAYnF,MAAO,WAG1D0H,EAASV,EAAclH,OAASA,GAChCgI,GAAUd,EAAca,QAAUA,GAClCP,EAAON,EAAcK,KAAOA,GAC5BW,GAAYhB,EAAc/D,cAAc8E,UAAYA,IACpDN,EAAQT,EAAc/D,cAAciG,aAAe1B,GACnDI,EAAUZ,EAAc/D,cAAc0E,QAAUA,GAChDU,GAAe,IAAIF,KAAKnB,EAAc5E,QACtC8F,GAAalB,EAAca,OAAS,IAAIM,KAAKnB,EAAc5E,OAAS,IAAI+F,KAAKnB,EAAc3E,MAC3FkG,GAAS,CAACuC,KACZ,GAmHEC,SArJ2BC,KAC7BlK,EAASO,EAAY,CAAC,IACtBqG,EAAS,IACTI,IAAU,GACVR,EAAO,IACPU,GAAY,IACZP,EAAQ,IACRG,EAAU,CAAC,GACXW,GAAS,CAAC,CAAED,MAAO,WAAYnD,MAAO,WAAYnF,MAAO,aACzDqI,GAAe,IAAIF,MACnBD,GAAa,IAAIC,KAAO,EA4ItB8C,eAAe,+BAA8B9K,SAAA,CAE7CF,cAACiL,IAAW,CAAC9K,UAAU,OAAOsK,OAAQxJ,EAAuBiK,MAAOb,GAAUc,IAAI,MAAKjL,SACrFE,eAAA,MAAID,UAAU,cAAaD,SAAA,CACxB6G,GAAiBA,EAAclH,OAASkH,EAAclH,MAAM8B,OAAS,SAAW,MAAM,cAG3F3B,cAACoL,IAAS,CAACjL,UAAU,2BAA0BD,SAC7CE,eAACiL,IAAI,CACHC,SAAUpE,GAAaqE,IACjBpB,YAAWlD,KACTkD,YAAWpD,KAAoBoD,YAAWpD,KAAmBA,EAAclH,MAAM8B,OA3L1E6J,MACrB,MAAMC,EAAM,CACV5L,QACAsC,MAAOgG,GACP/F,IAAK4F,GACLJ,SACA8D,QAAS,QACT1I,cAAe,CACbC,SAAUoF,GAAM,GAAGnD,MACnBkC,IAAKA,EAAIzF,OAASyF,OAAMuE,EACxBjE,OAAQA,EAAO/F,OAAS+F,OAASiE,EACjC7D,SAAUA,GAASnG,OAASmG,QAAW6D,EACvCpE,KAAMA,EAAK5F,OAAS4F,OAAOoE,IAG/B9K,EAASgG,EAAS4E,IAClB7E,IACA3F,IACAiD,IAAMC,QAAQnE,cAACL,EAAc,CAACE,MAAM,cAAcE,MAAM,UAAUD,KAAME,cAACoE,IAAK,MAAS,CACrFC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,GACb,EAsKUiH,GAEAzC,KAEF9H,IACF,IACCf,SAAA,CAEHE,eAACwL,IAAS,CAAA1L,SAAA,CACRE,eAACyL,IAAK,CAACC,IAAI,QAAO5L,SAAA,CAAC,SACXF,cAAA,QAAMG,UAAU,cAAaD,SAAC,SAEtCF,cAAC+L,IAAK,CACJlG,GAAG,QACHmG,KAAK,QACLC,YAAY,QACZ5D,MAAOxI,EACPmG,SAAUC,GAAKwB,EAASxB,EAAEC,OAAOmC,OACjC6D,SAAUlF,EAAS,CAAEA,UAAU,EAAMmF,SAAU9D,GAAmB,KAAVA,IACxDlI,UAAWmG,IAAW,CACpB,aAAcW,EAAOpH,aAK3BO,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,QAAO5L,SAAC,UACnBF,cAACoM,IAAM,CACLvG,GAAG,QACHwC,MAAOA,GACPgE,QAjQI,CACd,CAAEhE,MAAO,WAAYnD,MAAO,WAAYnF,MAAO,WAC/C,CAAEsI,MAAO,WAAYnD,MAAO,WAAYnF,MAAO,UAC/C,CAAEsI,MAAO,SAAUnD,MAAO,SAAUnF,MAAO,WAC3C,CAAEsI,MAAO,UAAWnD,MAAO,UAAWnF,MAAO,WAC7C,CAAEsI,MAAO,MAAOnD,MAAO,MAAOnF,MAAO,SA6P3BuM,MAAOC,IACPpM,UAAU,eACVqM,gBAAgB,SAChBC,aAAa,EACbzG,SAAUuF,GAAQjD,GAAS,CAACiD,IAC5BmB,WAAY,CACVC,OAtPUhK,IAAyB,IAAxB,KAAE4I,KAAS/K,GAAOmC,EACzC,OACEvC,eAACsM,IAAWC,OAAM,IAAKnM,EAAKN,SAAA,CAC1BF,cAAA,QAAMG,UAAS,iBAAA+C,OAAmBqI,EAAKxL,MAAK,sBAC3CwL,EAAKrG,QACY,QAsPhB9E,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,YAAW5L,SAAC,eACvBF,cAAC4M,IAAS,CACRC,UAAQ,EACRhH,GAAG,YAEHmG,KAAK,YACL7L,UAAU,eACV6F,SAAUlC,GAAQsE,GAAetE,EAAK,IACtCuE,MAAOF,GACPkE,QAAS,CACPS,YAAuB,IAAXlF,EACZmF,WAAY,kBAKlB3M,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,UAAS5L,SAAC,aACrBF,cAAC4M,IAAS,CACRC,UAAQ,EACRhH,GAAG,UAEHmG,KAAK,UACL7L,UAAU,eACV6F,SAAUlC,GAAQmE,GAAanE,EAAK,IACpCuE,MAAOL,GACPqE,QAAS,CACPS,YAAuB,IAAXlF,EACZmF,WAAY,kBAKlB/M,cAAC4L,IAAS,CAAA1L,SACRF,cAAC2F,IAAW,CACVC,KAAK,SACLC,GAAG,SACHmG,KAAK,eACL9G,MAAM,UACNY,QAAS8B,EACT5B,SAAUC,GAAK4B,GAAU5B,EAAEC,OAAOJ,SAClCkH,QAAM,MAIV5M,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,WAAU5L,SAAC,cACtBF,cAAC+L,IAAK,CACJnG,KAAK,MACLC,GAAG,WACHwC,MAAOjB,EACPpB,SAAUC,GAAKoB,EAAOpB,EAAEC,OAAOmC,OAC/B4D,YAAY,8BAIhB7L,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,SAAQ5L,SAAC,WACpBF,cAACoM,IAAM,CACLa,SAAO,EACPpH,GAAG,SACH1F,UAAU,eACVqM,gBAAgB,SAChBC,aAAa,EACbJ,QAAS9D,GACT+D,MAAOC,IACPlE,MAAOX,EAAO/F,OAAS,IAAI+F,GAAU,KACrC1B,SAAUuF,GAAQ5D,EAAU,IAAI4D,IAChCmB,WAAY,CACVC,OAxTUvJ,IAAyB,IAAxB,KAAEmI,KAAS/K,GAAO4C,EACzC,OACEpD,cAAC0M,IAAWC,OAAM,IAAKnM,EAAKN,SAC1BE,eAAA,OAAKD,UAAU,sCAAqCD,SAAA,CAClDF,cAACK,IAAM,CAACF,UAAU,YAAYG,KAAK,KAAK4M,IAAK3B,EAAK/C,SAClDxI,cAAA,OAAAE,SAAMqL,EAAKrG,YAEK,QAsThB9E,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,WAAU5L,SAAC,aACtBF,cAAC+L,IAAK,CAAClG,GAAG,WAAWwC,MAAOP,GAAU9B,SAAUC,GAAK8B,GAAY9B,EAAEC,OAAOmC,OAAQ4D,YAAY,cAGhG7L,eAACwL,IAAS,CAAA1L,SAAA,CACRF,cAAC6L,IAAK,CAACC,IAAI,cAAa5L,SAAC,gBACzBF,cAAC+L,IAAK,CACJnG,KAAK,WACLoG,KAAK,OACLnG,GAAG,cACHsH,KAAK,IACL9E,MAAOd,EACPvB,SAAUC,GAAKuB,EAAQvB,EAAEC,OAAOmC,OAChC4D,YAAY,mBAGhBjM,cAAC4L,IAAS,CAACzL,UAAU,SAAQD,SAC3BF,cAACkK,GAAY,aAIb,E,oCCrbL,MAAMkD,GAAcC,GAClBxM,IACLyM,KAAMC,IAAI,wBAAyB,CAAEF,cAAaG,MAAKC,IACrD5M,EAAS,CACP+E,KAAM,eACNlE,OAAQ+L,EAASlC,MACjB,GACF,EAKO1E,GAAWjE,GACf,CAAC/B,EAAU6M,KAChBJ,KAAMK,KAAK,2BAA4B,CAAE/K,UAAS4K,MAAK,KACrD3M,EAAS,CACP+E,KAAM,cAER/E,EAASuM,GAAYM,IAAWzK,SAAS8C,mBAAmB,GAC5D,EAKO1E,GAAcuB,GAClB/B,IACLyM,KAAMK,KAAK,8BAA+B,CAAE/K,UAAS4K,MAAK,KACxD3M,EAAS,CACP+E,KAAM,gBACN,GACF,EAKOR,GAAegB,GACnB,CAACvF,EAAU6M,KAChB7M,EAAS,CACP+E,KAAM,iBACNQ,WAEFvF,EAASuM,GAAYM,IAAWzK,SAAS8C,mBAAmB,EAKnDV,GAAmBgD,GACvB,CAACxH,EAAU6M,KAChB7M,EAAS,CACP+E,KAAM,qBACNyC,UAEFxH,EAASuM,GAAYM,IAAWzK,SAAS8C,mBAAmB,EAKnDe,GAAcjB,GAClBhF,IACLyM,KAAMM,OAAO,8BAA+B,CAAE/H,OAAM2H,MAAK,KACvD3M,EAAS,CACP+E,KAAM,gBACN,GACF,EAKOxE,GAAcwB,GAClB/B,IACLA,EAAS,CACP+E,KAAM,eACNhD,SACA,E,QC7CN,MAAM9B,GAAiB,CACrB+M,SAAU,UACVC,QAAS,UACTC,SAAU,SACVC,OAAQ,UACRC,IAAK,QA4GQC,UAzGWA,KAExB,MAAMrN,EAAWsN,cACXxN,EAAQyN,aAAYC,GAASA,EAAMpL,YAGlCqL,EAAgBC,GAAqBjH,oBAAS,IAClDkH,EAAiBC,GAAsBnH,oBAAS,IAChDvG,EAAaC,GAAkBsG,mBAAS,OAGpC1G,EAAO8N,GAAYC,cAGpB1N,EAAwBA,IAAMsN,GAAmBD,GAGjDnN,EAAgByN,GAAOH,EAAmBG,GA6BhD,OAJAtN,qBAAU,KACRT,EAASuM,GAAYzM,EAAMoF,mBAAmB,GAC7C,IAGD3F,eAACH,WAAQ,CAAAC,SAAA,CACPF,cAAA,OAAKG,UAAU,sCAAqCD,SAClDE,eAACyO,IAAG,CAACC,WAAS,EAAA5O,SAAA,CACZF,cAAC+O,IAAG,CACFlJ,GAAG,uBACH1F,UAAWmG,IAAW,0EAA2E,CAC/F0I,KAAMR,IACLtO,SAEHF,cAACmF,EAAW,CACVxE,MAAOA,EACPE,SAAUA,EACVuE,aAAcA,GACdjE,cAAeA,EACfkE,iBAAkBA,GAClBpE,sBAAuBA,MAG3BjB,cAAC+O,IAAG,CAAC5O,UAAU,oBAAmBD,SAChCF,cAACO,EAAQ,CACPK,MAAOA,EACPD,MAAOA,EACPE,SAAUA,EACVK,WAlDO,CACjBrB,MAAO,GACPsC,MAAO,GACPC,IAAK,GACLwF,QAAQ,EACRR,IAAK,GACLpE,cAAe,CACbC,SAAU,GACVyE,OAAQ,GACRI,SAAU,GACVmB,YAAa,KAyCLlI,YAAaA,EACbK,YAAaA,GACbC,YAAaA,GACbF,cAAeA,EACfL,eAAgBA,GAChBE,eAAgBA,EAChBC,sBAAuBA,MAG3BjB,cAAA,OACEG,UAAWmG,IAAW,uBAAwB,CAC5C0I,MAA0B,IAApBR,IAER/I,QAASA,IAAMtE,GAAc,UAInCnB,cAAC0G,EAAe,CACd/F,MAAOA,EACPE,SAAUA,EACVgG,SAAUA,GACVF,KAAM2H,EACNlN,YAAaA,GACbC,YAAaA,GACbyF,YAAaA,GACb/F,YAAaA,EACb6F,cA9DgBA,KACA,OAAhB7F,GACFA,EAAY6F,eACd,EA4DI9F,eAAgBA,GAChBG,sBAAuBA,MAEhB,C","file":"static/js/324.ec740650.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";","// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { toast } from 'react-toastify'\nimport { Card, CardBody } from 'reactstrap'\nimport { Menu, Check } from 'react-feather'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport classnames from 'classnames'\nimport { CardBody, Button, CustomInput } from 'reactstrap'\n\n// ** illustration import\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\n\n// ** Filters Checkbox Array\nconst filters = [\n  { label: 'Personal', color: 'danger', className: 'custom-control-danger mb-1' },\n  { label: 'Business', color: 'primary', className: 'custom-control-primary mb-1' },\n  { label: 'Family', color: 'warning', className: 'custom-control-warning mb-1' },\n  { label: 'Holiday', color: 'success', className: 'custom-control-success mb-1' },\n  { label: 'ETC', color: 'info', className: 'custom-control-info' }\n]\n\nconst SidebarLeft = props => {\n  // ** Props\n  const { handleAddEventSidebar, toggleSidebar, updateFilter, updateAllFilters, store, dispatch } = props\n\n  // ** Function to handle Add Event Click\n  const handleAddEventClick = () => {\n    toggleSidebar(false)\n    handleAddEventSidebar()\n  }\n\n  return (\n    <Fragment>\n      <div className='sidebar-wrapper'>\n        <CardBody className='card-body d-flex justify-content-center my-sm-0 mb-3'>\n          <Button.Ripple color='primary' block onClick={handleAddEventClick}>\n            <span className='align-middle'>Add Event</span>\n          </Button.Ripple>\n        </CardBody>\n        <CardBody>\n          <h5 className='section-label mb-1'>\n            <span className='align-middle'>Filter</span>\n          </h5>\n          <CustomInput\n            type='checkbox'\n            className='mb-1'\n            label='View All'\n            id='view-all'\n            checked={store.selectedCalendars.length === filters.length}\n            onChange={e => dispatch(updateAllFilters(e.target.checked))}\n          />\n          <div className='calendar-events-filter'>\n            {filters.length &&\n              filters.map(filter => {\n                return (\n                  <CustomInput\n                    type='checkbox'\n                    key={filter.label}\n                    id={filter.label}\n                    label={filter.label}\n                    checked={store.selectedCalendars.includes(filter.label)}\n                    className={classnames({\n                      [filter.className]: filter.className\n                    })}\n                    onChange={e => dispatch(updateFilter(filter.label))}\n                  />\n                )\n              })}\n          </div>\n        </CardBody>\n      </div>\n      <div className='mt-auto'>\n        <img className='img-fluid' src={illustration} alt='illustration' />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SidebarLeft\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { toast } from 'react-toastify'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Check, Trash } from 'react-feather'\nimport Select, { components } from 'react-select'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Button, Modal, ModalHeader, ModalBody, FormGroup, Label, CustomInput, Input, Form } from 'reactstrap'\n\n// ** Utils\nimport { selectThemeColors, isObjEmpty } from '@utils'\n\n// ** Avatar Images\nimport img1 from '@src/assets/images/avatars/1-small.png'\nimport img2 from '@src/assets/images/avatars/3-small.png'\nimport img3 from '@src/assets/images/avatars/5-small.png'\nimport img4 from '@src/assets/images/avatars/7-small.png'\nimport img5 from '@src/assets/images/avatars/9-small.png'\nimport img6 from '@src/assets/images/avatars/11-small.png'\n\n// ** Styles Imports\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst AddEventSidebar = props => {\n  // ** Props\n  const {\n    store,\n    dispatch,\n    open,\n    handleAddEventSidebar,\n    calendarsColor,\n    calendarApi,\n    refetchEvents,\n    addEvent,\n    selectEvent,\n    updateEvent,\n    removeEvent\n  } = props\n\n  // ** Vars\n  const selectedEvent = store.selectedEvent\n  const { register, errors, handleSubmit } = useForm()\n\n  // ** States\n  const [url, setUrl] = useState('')\n  const [desc, setDesc] = useState('')\n  const [title, setTitle] = useState('')\n  const [guests, setGuests] = useState({})\n  const [allDay, setAllDay] = useState(false)\n  const [location, setLocation] = useState('')\n  const [endPicker, setEndPicker] = useState(new Date())\n  const [startPicker, setStartPicker] = useState(new Date())\n  const [value, setValue] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\n\n  // ** Select Options\n  const options = [\n    { value: 'Business', label: 'Business', color: 'primary' },\n    { value: 'Personal', label: 'Personal', color: 'danger' },\n    { value: 'Family', label: 'Family', color: 'warning' },\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\n    { value: 'ETC', label: 'ETC', color: 'info' }\n  ]\n\n  const guestsOptions = [\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\n  ]\n\n  // ** Custom select components\n  const OptionComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <span className={`bullet bullet-${data.color} bullet-sm mr-50`}></span>\n        {data.label}\n      </components.Option>\n    )\n  }\n\n  const GuestsComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex flex-wrap align-items-center'>\n          <Avatar className='my-0 mr-1' size='sm' img={data.avatar} />\n          <div>{data.label}</div>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Adds New Event\n  const handleAddEvent = () => {\n    const obj = {\n      title,\n      start: startPicker,\n      end: endPicker,\n      allDay,\n      display: 'block',\n      extendedProps: {\n        calendar: value[0].label,\n        url: url.length ? url : undefined,\n        guests: guests.length ? guests : undefined,\n        location: location.length ? location : undefined,\n        desc: desc.length ? desc : undefined\n      }\n    }\n    dispatch(addEvent(obj))\n    refetchEvents()\n    handleAddEventSidebar()\n    toast.success(<ToastComponent title='Event Added' color='success' icon={<Check />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** Reset Input Values on Close\n  const handleResetInputValues = () => {\n    dispatch(selectEvent({}))\n    setTitle('')\n    setAllDay(false)\n    setUrl('')\n    setLocation('')\n    setDesc('')\n    setGuests({})\n    setValue([{ value: 'Business', label: 'Business', color: 'primary' }])\n    setStartPicker(new Date())\n    setEndPicker(new Date())\n  }\n\n  // ** Set sidebar fields\n  const handleSelectedEvent = () => {\n    if (!isObjEmpty(selectedEvent)) {\n      const calendar = selectedEvent.extendedProps.calendar\n\n      const resolveLabel = () => {\n        if (calendar.length) {\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\n        } else {\n          return { value: 'Business', label: 'Business', color: 'primary' }\n        }\n      }\n      setTitle(selectedEvent.title || title)\n      setAllDay(selectedEvent.allDay || allDay)\n      setUrl(selectedEvent.url || url)\n      setLocation(selectedEvent.extendedProps.location || location)\n      setDesc(selectedEvent.extendedProps.description || desc)\n      setGuests(selectedEvent.extendedProps.guests || guests)\n      setStartPicker(new Date(selectedEvent.start))\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\n      setValue([resolveLabel()])\n    }\n  }\n\n  // ** (UI) updateEventInCalendar\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\n\n    // ** Set event properties except date related\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < propsToUpdate.length; index++) {\n      const propName = propsToUpdate[index]\n      existingEvent.setProp(propName, updatedEventData[propName])\n    }\n\n    // ** Set date related props\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\n    existingEvent.setDates(updatedEventData.start, updatedEventData.end, { allDay: updatedEventData.allDay })\n\n    // ** Set event's extendedProps\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\n      const propName = extendedPropsToUpdate[index]\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\n    }\n  }\n\n  // ** Updates Event in Store\n  const handleUpdateEvent = () => {\n    const eventToUpdate = {\n      id: selectedEvent.id,\n      title,\n      allDay,\n      start: startPicker,\n      end: endPicker,\n      url,\n      extendedProps: {\n        location,\n        description: desc,\n        guests,\n        calendar: value[0].label\n      }\n    }\n\n    const propsToUpdate = ['id', 'title', 'url']\n    const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\n\n    dispatch(updateEvent(eventToUpdate))\n    updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\n    handleAddEventSidebar()\n    toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** (UI) removeEventInCalendar\n  const removeEventInCalendar = eventId => {\n    calendarApi.getEventById(eventId).remove()\n  }\n  const handleDeleteEvent = () => {\n    dispatch(removeEvent(selectedEvent.id))\n    removeEventInCalendar(selectedEvent.id)\n    handleAddEventSidebar()\n    toast.error(<ToastComponent title='Event Removed' color='danger' icon={<Trash />} />, {\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeButton: false\n    })\n  }\n\n  // ** Event Action buttons\n  const EventActions = () => {\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n      return (\n        <Fragment>\n          <Button.Ripple className='mr-1' type='submit' color='primary'>\n            Add\n          </Button.Ripple>\n          <Button.Ripple color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\n            Cancel\n          </Button.Ripple>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button.Ripple\n            className='mr-1'\n            color='primary'\n            // onClick={handleUpdateEvent}\n          >\n            Update\n          </Button.Ripple>\n          <Button.Ripple color='danger' onClick={handleDeleteEvent} outline>\n            Delete\n          </Button.Ripple>\n        </Fragment>\n      )\n    }\n  }\n\n  // ** Close BTN\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleAddEventSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSelectedEvent}\n      onClosed={handleResetInputValues}\n      modalClassName='modal-slide-in event-sidebar'\n    >\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\n        <h5 className='modal-title'>\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\n        </h5>\n      </ModalHeader>\n      <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n        <Form\n          onSubmit={handleSubmit(data => {\n            if (isObjEmpty(errors)) {\n              if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n                handleAddEvent()\n              } else {\n                handleUpdateEvent()\n              }\n              handleAddEventSidebar()\n            }\n          })}\n        >\n          <FormGroup>\n            <Label for='title'>\n              Title <span className='text-danger'>*</span>\n            </Label>\n            <Input\n              id='title'\n              name='title'\n              placeholder='Title'\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n              innerRef={register({ register: true, validate: value => value !== '' })}\n              className={classnames({\n                'is-invalid': errors.title\n              })}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='label'>Label</Label>\n            <Select\n              id='label'\n              value={value}\n              options={options}\n              theme={selectThemeColors}\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              onChange={data => setValue([data])}\n              components={{\n                Option: OptionComponent\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='startDate'>Start Date</Label>\n            <Flatpickr\n              required\n              id='startDate'\n              // tag={Flatpickr}\n              name='startDate'\n              className='form-control'\n              onChange={date => setStartPicker(date[0])}\n              value={startPicker}\n              options={{\n                enableTime: allDay === false,\n                dateFormat: 'Y-m-d H:i'\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='endDate'>End Date</Label>\n            <Flatpickr\n              required\n              id='endDate'\n              // tag={Flatpickr}\n              name='endDate'\n              className='form-control'\n              onChange={date => setEndPicker(date[0])}\n              value={endPicker}\n              options={{\n                enableTime: allDay === false,\n                dateFormat: 'Y-m-d H:i'\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <CustomInput\n              type='switch'\n              id='allDay'\n              name='customSwitch'\n              label='All Day'\n              checked={allDay}\n              onChange={e => setAllDay(e.target.checked)}\n              inline\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='eventURL'>Event URL</Label>\n            <Input\n              type='url'\n              id='eventURL'\n              value={url}\n              onChange={e => setUrl(e.target.value)}\n              placeholder='https://www.google.com'\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='guests'>Guests</Label>\n            <Select\n              isMulti\n              id='guests'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={guestsOptions}\n              theme={selectThemeColors}\n              value={guests.length ? [...guests] : null}\n              onChange={data => setGuests([...data])}\n              components={{\n                Option: GuestsComponent\n              }}\n            />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='location'>Location</Label>\n            <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for='description'>Description</Label>\n            <Input\n              type='textarea'\n              name='text'\n              id='description'\n              rows='3'\n              value={desc}\n              onChange={e => setDesc(e.target.value)}\n              placeholder='Description'\n            />\n          </FormGroup>\n          <FormGroup className='d-flex'>\n            <EventActions />\n          </FormGroup>\n        </Form>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default AddEventSidebar\n","import axios from 'axios'\n\n// ** Fetch Events\nexport const fetchEvents = calendars => {\n  return dispatch => {\n    axios.get('/apps/calendar/events', { calendars }).then(response => {\n      dispatch({\n        type: 'FETCH_EVENTS',\n        events: response.data\n      })\n    })\n  }\n}\n\n// ** Add Event\nexport const addEvent = event => {\n  return (dispatch, getState) => {\n    axios.post('/apps/calendar/add-event', { event }).then(() => {\n      dispatch({\n        type: 'ADD_EVENT'\n      })\n      dispatch(fetchEvents(getState().calendar.selectedCalendars))\n    })\n  }\n}\n\n// ** Update Event\nexport const updateEvent = event => {\n  return dispatch => {\n    axios.post('/apps/calendar/update-event', { event }).then(() => {\n      dispatch({\n        type: 'UPDATE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Filter Events\nexport const updateFilter = filter => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_FILTERS',\n      filter\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** Add/Remove All Filters\nexport const updateAllFilters = value => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: 'UPDATE_ALL_FILTERS',\n      value\n    })\n    dispatch(fetchEvents(getState().calendar.selectedCalendars))\n  }\n}\n\n// ** remove Event\nexport const removeEvent = id => {\n  return dispatch => {\n    axios.delete('/apps/calendar/remove-event', { id }).then(() => {\n      dispatch({\n        type: 'REMOVE_EVENT'\n      })\n    })\n  }\n}\n\n// ** Select Event (get event data on click)\nexport const selectEvent = event => {\n  return dispatch => {\n    dispatch({\n      type: 'SELECT_EVENT',\n      event\n    })\n  }\n}\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\nimport AddEventSidebar from './AddEventSidebar'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  fetchEvents,\n  selectEvent,\n  updateEvent,\n  updateFilter,\n  updateAllFilters,\n  addEvent,\n  removeEvent\n} from './store/actions/index'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\n\n// ** CalendarColors\nconst calendarsColor = {\n  Business: 'primary',\n  Holiday: 'success',\n  Personal: 'danger',\n  Family: 'warning',\n  ETC: 'info'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false),\n    [leftSidebarOpen, setLeftSidebarOpen] = useState(false),\n    [calendarApi, setCalendarApi] = useState(null)\n\n  // ** Hooks\n  const [isRtl, setIsRtl] = useRTL()\n\n  // ** AddEventSidebar Toggle Function\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\n\n  // ** LeftSidebar Toggle Function\n  const toggleSidebar = val => setLeftSidebarOpen(val)\n\n  // ** Blank Event Object\n  const blankEvent = {\n    title: '',\n    start: '',\n    end: '',\n    allDay: false,\n    url: '',\n    extendedProps: {\n      calendar: '',\n      guests: [],\n      location: '',\n      description: ''\n    }\n  }\n\n  // ** refetchEvents\n  const refetchEvents = () => {\n    if (calendarApi !== null) {\n      calendarApi.refetchEvents()\n    }\n  }\n\n  // ** Fetch Events On Mount\n  useEffect(() => {\n    dispatch(fetchEvents(store.selectedCalendars))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row noGutters>\n          <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\n              show: leftSidebarOpen\n            })}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}\n              updateFilter={updateFilter}\n              toggleSidebar={toggleSidebar}\n              updateAllFilters={updateAllFilters}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              blankEvent={blankEvent}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              toggleSidebar={toggleSidebar}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <div\n            className={classnames('body-content-overlay', {\n              show: leftSidebarOpen === true\n            })}\n            onClick={() => toggleSidebar(false)}\n          ></div>\n        </Row>\n      </div>\n      <AddEventSidebar\n        store={store}\n        dispatch={dispatch}\n        addEvent={addEvent}\n        open={addSidebarOpen}\n        selectEvent={selectEvent}\n        updateEvent={updateEvent}\n        removeEvent={removeEvent}\n        calendarApi={calendarApi}\n        refetchEvents={refetchEvents}\n        calendarsColor={calendarsColor}\n        handleAddEventSidebar={handleAddEventSidebar}\n      />\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n"],"sourceRoot":""}