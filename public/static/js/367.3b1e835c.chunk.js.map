{"version":3,"sources":["views/custom/editUserInfo.js"],"names":["MySwal","withReactContent","Swal","EditUserInfo","history","useHistory","userID","useParams","userTypeData","setuserTypeData","useState","value","label","userTitleData","setuserTitleData","storeList","setStoreList","loading","setloading","submitLoading","setSubmitLoading","userData","setUserData","error","seterror","userType","userTitle","storeName","email","useEffect","useJwt","userRoleList","then","res","userTypeApi","data","payload","map","type","id","statusdesc","catch","err","userTitleList","userTitleApi","adminUserDetails","modifydata","splitdata","fullname","split","firstname","length","lastname","emailid","roleid","rolename","adminstatus","storename","adminstore","storeid","title","titleinfo","titleid","storeApi","onChange","e","chkEmail","test","target","name","CurrentData","_jsx","_Fragment","children","_jsxs","Skeleton","active","Button","Ripple","className","color","tag","Link","to","ChevronLeft","size","Card","CardHeader","CardBody","style","paddingTop","Form","width","onSubmit","preventDefault","concat","adminUserEdit","fire","icon","text","customClass","confirmButton","setTimeout","replace","autoComplete","Col","sm","FormGroup","Label","for","Input","required","placeholder","fontSize","Select","theme","selectThemeColors","classNamePrefix","defaultValue","handleStoreName","option","_ref3","action","newData","options","isClearable","isLoading","handleUserType","_ref","handleUserTitle","_ref2","disabled","marginTop","Spinner"],"mappings":"iHAAA,kPAeA,MAAMA,EAASC,IAAiBC,KAkSjBC,UAhSMA,KACjB,MAAMC,EAAUC,eACV,OAAEC,GAAWC,eACZC,EAAcC,GAAmBC,mBAAS,CAAC,CAAEC,MAAO,GAAIC,MAAO,OAC/DC,EAAeC,GAAoBJ,mBAAS,CAAC,CAAEC,MAAO,GAAIC,MAAO,OACjEG,EAAWC,GAAgBN,mBAAS,KACpCO,EAASC,GAAcR,oBAAS,IAChCS,EAAeC,GAAoBV,oBAAS,IAC5CW,EAAUC,GAAeZ,mBAAS,CAAC,IAEnCa,EAAOC,GAAYd,mBAAS,CAC/Be,UAAU,EACVC,WAAW,EACXC,WAAW,EACXC,OAAO,IAIXC,qBAAU,KACNC,IAAOC,eAAeC,MAAKC,IAEvB,MAAMC,EAAcD,EAAIE,KAAKC,QAAQC,KAAIC,IAC9B,CAAE3B,MAAO2B,EAAKC,GAAI3B,MAAO0B,EAAKE,eAEzC/B,EAAgByB,EAAY,IAC7BO,OAAMC,QAGTZ,IAAOa,gBAAgBX,MAAKC,IAExB,MAAMW,EAAeX,EAAIE,KAAKC,QAAQC,KAAIC,IAC/B,CAAE3B,MAAO2B,EAAKC,GAAI3B,MAAO0B,EAAKE,eAEzC1B,EAAiB8B,EAAa,IAC/BH,OAAMC,QAGTZ,IAAOe,iBAAiB,CAAEN,GAAIjC,IAAU0B,MAAKC,IACzC,MAAME,EAAOF,EAAIE,KAAKC,QAAQ,GAC9B,IAAIU,EAAa,CAAC,EAElB,MAAMC,EAAYZ,EAAKa,SAAWb,EAAKa,SAASC,MAAM,KAAO,CAAC,IAAK,KAEnEH,EAAa,CACTP,GAAIJ,EAAKI,GACTW,UAAWH,EAAUI,OAASJ,EAAU,GAAK,GAC7CK,SAA+B,IAArBL,EAAUI,OAAeJ,EAAU,GAAK,GAClDM,QAASlB,EAAKkB,QACdC,OAAQnB,EAAKmB,OACbC,SAAUpB,EAAKqB,YAAYhB,WAC3BiB,UAAWtB,EAAKuB,WAAWD,UAC3BE,QAASxB,EAAKwB,QACdC,MAAOzB,EAAK0B,UAAUrB,WACtBsB,QAAS3B,EAAK0B,UAAUtB,IAE5BjB,EAAYwB,GACZ5B,GAAW,EAAM,IAClBuB,OAAMC,QAGTZ,IAAOf,YAAYiB,MAAKC,IAEpB,MAAM8B,EAAW9B,EAAIE,KAAKC,QAAQC,KAAIC,IAC3B,CAAE3B,MAAO2B,EAAKqB,QAAS/C,MAAO0B,EAAKmB,cAE9CzC,EAAa+C,EAAS,IACvBtB,OAAMC,OAEP,GAEH,IAEH,MAAMsB,EAAYC,IACd,MAAMC,EAAW,eAAeC,KAAKF,EAAEG,OAAOzD,OACxB,YAAlBsD,EAAEG,OAAOC,MAAsBH,GAC/B1C,EAAS,IAAKD,EAAOK,OAAO,IAGhC,MAAM0C,EAAc,IAAKjD,GACH,cAAlB4C,EAAEG,OAAOC,OACTC,EAAYpB,UAAYe,EAAEG,OAAOzD,OAEf,aAAlBsD,EAAEG,OAAOC,OACTC,EAAYlB,SAAWa,EAAEG,OAAOzD,OAEd,YAAlBsD,EAAEG,OAAOC,OACTC,EAAYjB,QAAUY,EAAEG,OAAOzD,OAGnCW,EAAYgD,EAAY,EAkF5B,OACIC,cAAAC,WAAA,CAAAC,SACKxD,EAAUyD,eAAAF,WAAA,CAAAC,SAAA,CAAE,IAACF,cAACI,IAAQ,CAACC,QAAM,IAAG,IAACL,cAACI,IAAQ,CAACC,QAAM,OAC5CF,eAAAF,WAAA,CAAAC,SAAA,CACFC,eAACG,IAAOC,OAAM,CAACC,UAAU,YAAYC,MAAM,UAAUC,IAAKC,IAAMC,GAAG,QAAOV,SAAA,CACtEF,cAACa,IAAW,CAACC,KAAM,KACnBd,cAAA,QAAMQ,UAAU,qBAAoBN,SAAC,0BAEzCC,eAACY,IAAI,CAAAb,SAAA,CACDF,cAACgB,IAAU,CAACR,UAAU,gBAAeN,SACjCF,cAAA,MAAAE,SAAI,wBAERF,cAACiB,IAAQ,CAACC,MAAO,CAAEC,WAAY,QAASjB,SACpCC,eAACiB,IAAI,CAACZ,UAAU,MAAMU,MAAO,CAAEG,MAAO,QAAUC,SAvDlD5B,IACdA,EAAE6B,iBACF,MAAM,GAAEvD,EAAE,UAAEW,EAAS,SAAEE,EAAQ,QAAEC,EAAO,OAAEC,EAAM,QAAEK,EAAO,QAAEG,GAAYzC,EACjE6C,EAAW,eAAeC,KAAKd,GAC/BX,EAAM,IAAKnB,GAMjB,GAL+BmB,EAAId,OAAlCsC,EAC+BxB,EAAIjB,UAAnC6B,EACiCZ,EAAIhB,WAArCoC,EACiCpB,EAAIf,WAArCgC,EACDnC,EAASkB,IACJwB,EACD,OAEJ,MAAMlB,EAAQ,GAAA+C,OAAM7C,EAAS,KAAA6C,OAAI3C,GAE7BE,GAAUK,GAAWG,GACrBhC,IAAOkE,cAAc,CAAEzD,KAAIS,WAAUM,SAAQD,UAASM,UAASC,MAAOE,IAAW9B,MAAKC,IAElFjC,EAAOiG,KAAK,CACRC,KAAM,UACNtC,MAAO,QACPuC,KAAM,mCACNC,YAAa,CACTC,cAAe,qBAGvBC,YAAW,WAAclG,EAAQmG,QAAQ,QAAS,GAAG,IAAK,IAC3D9D,OAAMC,OAGb,EAyBoF8D,aAAa,MAAK/B,SAAA,CAElFF,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,YAAWpC,SAAA,CAAC,cAAWF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SACjEF,cAACuC,IAAK,CAACxE,KAAK,OAAO+B,KAAK,YACpB9B,GAAG,YAAYwE,UAAQ,EAACC,YAAY,YACpCrG,MAAOU,EAAS6B,UAChBc,SAAUA,SAKtBO,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,WAAUpC,SAAA,CAAC,aAAUF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SAC/DF,cAACuC,IAAK,CAACxE,KAAK,OAAO+B,KAAK,WACpB9B,GAAG,WAAWyB,SAAUA,EAAU+C,UAAQ,EAC1CC,YAAY,WACZrG,MAAOU,EAAS+B,gBAI5BmB,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,QAAOpC,SAAA,CAAC,SAAMF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SAAgB,OAAOlD,EAAMK,OAAS2C,cAAA,QAAMkB,MAAO,CAAET,MAAO,MAAOiC,SAAU,QAASxC,SAAC,kBAC/IF,cAACuC,IAAK,CAACxE,KAAK,QAAQ+B,KAAK,UACrB9B,GAAG,QAAQyB,SAAUA,EACrBgD,YAAY,QAAQrG,MAAOU,EAASgC,eAKhDkB,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,YAAWpC,SAAA,CAAC,aAAUF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SAAgB,OAAOlD,EAAMI,WAAa4C,cAAA,QAAMkB,MAAO,CAAET,MAAO,MAAOiC,SAAU,QAASxC,SAAC,aAC3JF,cAAC2C,IAAM,CACHC,MAAOC,IACPrC,UAAU,eACVsC,gBAAgB,SAChBhD,KAAK,YACLiD,aAAc,CAAE1G,MAAOS,EAASoC,UAAW9C,MAAOU,EAASsC,SAC3DK,SA7GZuD,CAACC,EAAMC,KAAkB,IAAhB,OAAEC,GAAQD,EACvC,GAAe,UAAXC,EAAoB,CACpB,MAAMC,EAAU,IAAKtG,GACrBsG,EAAQhE,QAAU,KAClBrC,EAAYqG,EAChB,KAAO,CACHnG,EAAS,IAAKD,EAAOI,WAAW,IAChC,MAAMgG,EAAU,IAAKtG,GACrBsG,EAAQhE,QAAU6D,EAAO7G,MACzBW,EAAYqG,EAChB,GAoGgCC,QAAS7G,EACT8G,aAAW,EACXC,WAAW,SAMvBvD,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,WAAUpC,SAAA,CAAC,YAASF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SAAgB,OAAOlD,EAAME,UAAY8C,cAAA,QAAMkB,MAAO,CAAET,MAAO,MAAOiC,SAAU,QAASxC,SAAC,aACxJF,cAAC2C,IAAM,CACHC,MAAOC,IACPrC,UAAU,eACVsC,gBAAgB,SAChBC,aAAc,CAAE1G,MAAOS,EAASkC,SAAU5C,MAAOU,EAASiC,QAC1De,KAAK,WACLL,SAvJb+D,CAACP,EAAMQ,KAAkB,IAAhB,OAAEN,GAAQM,EACtC,GAAe,UAAXN,EAAoB,CACpB,MAAMC,EAAU,IAAKtG,GACrBsG,EAAQrE,OAAS,KACjBhC,EAAYqG,EAChB,KAAO,CACHnG,EAAS,IAAKD,EAAOE,UAAU,IAC/B,MAAMkG,EAAU,IAAKtG,GACrBsG,EAAQrE,OAASkE,EAAO7G,MACxBW,EAAYqG,EAChB,GA8IgCC,QAASpH,EACTqH,aAAW,EACXC,WAAW,SAMvBvD,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SACPC,eAACiC,IAAS,CAAAlC,SAAA,CACNC,eAACkC,IAAK,CAACC,IAAI,YAAWpC,SAAA,CAAC,aAAUF,cAAA,QAAMkB,MAAO,CAAET,MAAO,OAAQP,SAAC,SAAgB,OAAOlD,EAAMG,WAAa6C,cAAA,QAAMkB,MAAO,CAAET,MAAO,MAAOiC,SAAU,QAASxC,SAAC,aAC3JF,cAAC2C,IAAM,CACHC,MAAOC,IACPrC,UAAU,eACVsC,gBAAgB,SAChBhD,KAAK,YACLiD,aAAc,CAAE1G,MAAOS,EAASuC,MAAOjD,MAAOU,EAASyC,SACvDE,SA7JZiE,CAACT,EAAMU,KAAkB,IAAhB,OAAER,GAAQQ,EACvC,GAAe,UAAXR,EAAoB,CACpB,MAAMC,EAAU,IAAKtG,GACrBsG,EAAQ7D,QAAU,KAClBxC,EAAYqG,EAChB,KAAO,CACHnG,EAAS,IAAKD,EAAOG,WAAW,IAChC,MAAMiG,EAAU,IAAKtG,GACrBsG,EAAQ7D,QAAU0D,EAAO7G,MACzBW,EAAYqG,EAChB,GAoJgCC,QAAS/G,EACTgH,aAAW,EACXC,WAAW,SAMvBvD,cAACkC,IAAG,CAACC,GAAG,IAAGjC,SAEHtD,EAAgBuD,eAACG,IAAOC,OAAM,CAACE,MAAM,UAAUD,UAAU,OAAOoD,UAAQ,EAAC1C,MAAO,CAAE2C,UAAW,QAAS3D,SAAA,CAClGF,cAAC8D,IAAO,CAACrD,MAAM,QAAQK,KAAK,OAC5Bd,cAAA,QAAMQ,UAAU,QAAON,SAAC,kBACTF,cAACM,IAAOC,OAAM,CAACC,UAAU,OAAOC,MAAM,UAAU1C,KAAK,SAASmD,MAAO,CAAE2C,UAAW,QAAS3D,SAC1GF,cAAA,QAAMQ,UAAU,qBAAoBN,SAAC,uBAMtD,QACZ,C","file":"static/js/367.3b1e835c.chunk.js","sourcesContent":["import { Fragment, useState, forwardRef, useEffect } from 'react'\nimport { Link, useHistory, useParams } from 'react-router-dom'\nimport Select from 'react-select'\nimport { selectThemeColors, transformInToFormObject } from '@utils'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\nimport { ChevronLeft, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock } from 'react-feather'\nimport { Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody } from 'reactstrap'\nimport { Tag, Skeleton } from 'antd'\nimport 'antd/dist/antd.css'\n// import { Error, Success } from '../../../viewhelper'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n\nconst EditUserInfo = () => {\n    const history = useHistory()\n    const { userID } = useParams()\n    const [userTypeData, setuserTypeData] = useState([{ value: \"\", label: \"\" }])\n    const [userTitleData, setuserTitleData] = useState([{ value: \"\", label: \"\" }])\n    const [storeList, setStoreList] = useState([])\n    const [loading, setloading] = useState(true)\n    const [submitLoading, setSubmitLoading] = useState(false)\n    const [userData, setUserData] = useState({})\n    // const [userInput, setUserInput] = useState({})\n    const [error, seterror] = useState({\n        userType: false,\n        userTitle: false,\n        storeName: false,\n        email: false\n    })\n\n\n    useEffect(() => {\n        useJwt.userRoleList().then(res => {\n            // console.log(res.data.payload)\n            const userTypeApi = res.data.payload.map(type => {\n                return { value: type.id, label: type.statusdesc }\n            })\n            setuserTypeData(userTypeApi)\n        }).catch(err => {\n            //console.log(err.response)\n        })\n        useJwt.userTitleList().then(res => {\n            // console.log(res.data.payload)\n            const userTitleApi = res.data.payload.map(type => {\n                return { value: type.id, label: type.statusdesc }\n            })\n            setuserTitleData(userTitleApi)\n        }).catch(err => {\n            //console.log(err.response)\n        })\n        useJwt.adminUserDetails({ id: userID }).then(res => {\n            const data = res.data.payload[0]\n            let modifydata = {}\n            //console.log(res)\n            const splitdata = data.fullname ? data.fullname.split(' ') : [' ', ' ']\n\n            modifydata = {\n                id: data.id,\n                firstname: splitdata.length ? splitdata[0] : \"\",\n                lastname: splitdata.length === 2 ? splitdata[1] : \"\",\n                emailid: data.emailid,\n                roleid: data.roleid,\n                rolename: data.adminstatus.statusdesc,\n                storename: data.adminstore.storename,\n                storeid: data.storeid,\n                title: data.titleinfo.statusdesc,\n                titleid: data.titleinfo.id\n            }\n            setUserData(modifydata)\n            setloading(false)\n        }).catch(err => {\n            //console.log(err.response)\n        })\n        useJwt.storeList().then(res => {\n            // console.log(res.data.payload)\n            const storeApi = res.data.payload.map(type => {\n                return { value: type.storeid, label: type.storename }\n            })\n            setStoreList(storeApi)\n        }).catch(err => {\n            //console.log(err)\n        })\n\n    }, [])\n\n    const onChange = (e) => {\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\n        if (e.target.name === 'emailid' && chkEmail) {\n            seterror({ ...error, email: false })\n        }\n        // console.log([e.target.name], e.target.value)\n        const CurrentData = { ...userData }\n        if (e.target.name === \"firstname\") {\n            CurrentData.firstname = e.target.value\n        }\n        if (e.target.name === \"lastname\") {\n            CurrentData.lastname = e.target.value\n        }\n        if (e.target.name === \"emailid\") {\n            CurrentData.emailid = e.target.value\n        }\n\n        setUserData(CurrentData)\n\n    }\n\n    const handleUserType = (option, { action }) => {\n        if (action === 'clear') {\n            const newData = { ...userData }\n            newData.roleid = null\n            setUserData(newData)\n        } else {\n            seterror({ ...error, userType: false })\n            const newData = { ...userData }\n            newData.roleid = option.value\n            setUserData(newData)\n        }\n    }\n    const handleUserTitle = (option, { action }) => {\n        if (action === 'clear') {\n            const newData = { ...userData }\n            newData.titleid = null\n            setUserData(newData)\n        } else {\n            seterror({ ...error, userTitle: false })\n            const newData = { ...userData }\n            newData.titleid = option.value\n            setUserData(newData)\n        }\n    }\n    const handleStoreName = (option, { action }) => {\n        if (action === 'clear') {\n            const newData = { ...userData }\n            newData.storeid = null\n            setUserData(newData)\n        } else {\n            seterror({ ...error, storeName: false })\n            const newData = { ...userData }\n            newData.storeid = option.value\n            setUserData(newData)\n        }\n    }\n    const onsubmit = (e) => {\n        e.preventDefault()\n        const { id, firstname, lastname, emailid, roleid, storeid, titleid } = userData\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(emailid)\n        const err = { ...error }\n        !chkEmail ? err.email = true : err.email = false\n        !roleid ? err.userType = true : err.userType = false\n        !titleid ? err.userTitle = true : err.userTitle = false\n        !storeid ? err.storeName = true : err.storeName = false\n        seterror(err)\n        if (!chkEmail) {\n            return\n        }\n        const fullname = `${firstname} ${lastname}`\n        // console.log({ id, fullname, roleid, emailid, storeid, title: titleid })\n        if (roleid && storeid && titleid) {\n            useJwt.adminUserEdit({ id, fullname, roleid, emailid, storeid, title: titleid }).then(res => {\n                //console.log(res)\n                MySwal.fire({\n                    icon: 'success',\n                    title: 'Done!',\n                    text: 'The Staff Info has been updated.',\n                    customClass: {\n                        confirmButton: 'btn btn-success'\n                    }\n                })\n                setTimeout(function () { history.replace('/user') }, 1000)\n            }).catch(err => {\n                //console.log(err)\n            })\n        }\n        // else {\n        //     MySwal.fire({\n        //         icon: 'warning',\n        //         title: 'Failed',\n        //         text: '\"Storename\" \"Usertype\" \"Usertitle\" must not be Empty!',\n        //         customClass: {\n        //             confirmButton: 'btn btn-danger'\n        //         }\n        //     })\n        // }\n    }\n    return (\n        <>\n            {loading ? <> <Skeleton active /> <Skeleton active />\n            </> : <>\n                <Button.Ripple className='ml-2 mb-2' color='primary' tag={Link} to='/user'>\n                    <ChevronLeft size={10} />\n                    <span className='align-middle ml-50'>Back to staff list</span>\n                </Button.Ripple>\n                <Card>\n                    <CardHeader className='border-bottom'>\n                        <h5>Update Staff Info</h5>\n                    </CardHeader>\n                    <CardBody style={{ paddingTop: '15px' }}>\n                        <Form className=\"row\" style={{ width: '100%' }} onSubmit={onsubmit} autoComplete=\"off\">\n\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"firstName\">First Name <span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"text\" name=\"firstname\"\n                                        id='firstName' required placeholder=\"firstName\"\n                                        value={userData.firstname}\n                                        onChange={onChange}\n\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"lastName\">Last Name <span style={{ color: 'red' }}>*</span></Label>\n                                    <Input type=\"text\" name=\"lastname\"\n                                        id='lastName' onChange={onChange} required\n                                        placeholder=\"lastName\"\n                                        value={userData.lastname}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"Email\">Email <span style={{ color: 'red' }}>*</span></Label>&nbsp;{error.email && <span style={{ color: 'red', fontSize: '11px' }}> is not valid</span>}\n                                    <Input type=\"email\" name=\"emailid\"\n                                        id='Email' onChange={onChange}\n                                        placeholder=\"Email\" value={userData.emailid}\n\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"StoreName\">Store Name<span style={{ color: 'red' }}>*</span></Label>&nbsp;{error.storeName && <span style={{ color: 'red', fontSize: '11px' }}>Required</span>}\n                                    <Select\n                                        theme={selectThemeColors}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        name=\"StoreName\"\n                                        defaultValue={{ label: userData.storename, value: userData.storeid }}\n                                        onChange={handleStoreName}\n                                        options={storeList}\n                                        isClearable\n                                        isLoading={false}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"UserType\">User Type<span style={{ color: 'red' }}>*</span></Label>&nbsp;{error.userType && <span style={{ color: 'red', fontSize: '11px' }}>Required</span>}\n                                    <Select\n                                        theme={selectThemeColors}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        defaultValue={{ label: userData.rolename, value: userData.roleid }}\n                                        name=\"UserType\"\n                                        onChange={handleUserType}\n                                        options={userTypeData}\n                                        isClearable\n                                        isLoading={false}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n\n                            <Col sm=\"3\" >\n                                <FormGroup>\n                                    <Label for=\"UserTitle\">User Title<span style={{ color: 'red' }}>*</span></Label>&nbsp;{error.userTitle && <span style={{ color: 'red', fontSize: '11px' }}>Required</span>}\n                                    <Select\n                                        theme={selectThemeColors}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        name=\"UserTitle\"\n                                        defaultValue={{ label: userData.title, value: userData.titleid }}\n                                        onChange={handleUserTitle}\n                                        options={userTitleData}\n                                        isClearable\n                                        isLoading={false}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n\n                            <Col sm=\"3\" >\n                                {\n                                    submitLoading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                        <Spinner color='white' size='sm' />\n                                        <span className='ml-50'>Loading...</span>\n                                    </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\n                                        <span className='align-middle ml-50'>Update</span>\n                                    </Button.Ripple>\n                                }\n                            </Col>\n                        </Form>\n                    </CardBody>\n                </Card> </>}\n        </>\n    )\n}\n\nexport default EditUserInfo"],"sourceRoot":""}